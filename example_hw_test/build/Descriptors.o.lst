   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 2
  10              		.eabi_attribute 34, 1
  11              		.eabi_attribute 18, 4
  12              		.file	"Descriptors.c"
  13              		.text
  14              	.Ltext0:
  15              		.cfi_sections	.debug_frame
  16              		.section	.text.CALLBACK_USB_GetDescriptor,"ax",%progbits
  17              		.align	1
  18              		.p2align 2,,3
  19              		.global	CALLBACK_USB_GetDescriptor
  20              		.arch armv7e-m
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  24              		.fpu fpv4-sp-d16
  26              	CALLBACK_USB_GetDescriptor:
  27              	.LVL0:
  28              	.LFB193:
  29              		.file 1 "Descriptors.c"
   1:Descriptors.c **** /*
   2:Descriptors.c ****              LUFA Library
   3:Descriptors.c ****      Copyright (C) Dean Camera, 2014.
   4:Descriptors.c **** 
   5:Descriptors.c ****   dean [at] fourwalledcubicle [dot] com
   6:Descriptors.c ****            www.lufa-lib.org
   7:Descriptors.c **** */
   8:Descriptors.c **** 
   9:Descriptors.c **** /*
  10:Descriptors.c ****   Copyright 2014  Dean Camera (dean [at] fourwalledcubicle [dot] com)
  11:Descriptors.c **** 
  12:Descriptors.c ****   Permission to use, copy, modify, distribute, and sell this
  13:Descriptors.c ****   software and its documentation for any purpose is hereby granted
  14:Descriptors.c ****   without fee, provided that the above copyright notice appear in
  15:Descriptors.c ****   all copies and that both that the copyright notice and this
  16:Descriptors.c ****   permission notice and warranty disclaimer appear in supporting
  17:Descriptors.c ****   documentation, and that the name of the author not be used in
  18:Descriptors.c ****   advertising or publicity pertaining to distribution of the
  19:Descriptors.c ****   software without specific, written prior permission.
  20:Descriptors.c **** 
  21:Descriptors.c ****   The author disclaims all warranties with regard to this
  22:Descriptors.c ****   software, including all implied warranties of merchantability
  23:Descriptors.c ****   and fitness.  In no event shall the author be liable for any
  24:Descriptors.c ****   special, indirect or consequential damages or any damages
  25:Descriptors.c ****   whatsoever resulting from loss of use, data or profits, whether
  26:Descriptors.c ****   in an action of contract, negligence or other tortious action,
  27:Descriptors.c ****   arising out of or in connection with the use or performance of
  28:Descriptors.c ****   this software.
  29:Descriptors.c **** */
  30:Descriptors.c **** 
  31:Descriptors.c **** /** \file
  32:Descriptors.c ****  *
  33:Descriptors.c ****  *  USB Device Descriptors, for library use when in USB device mode. Descriptors are special
  34:Descriptors.c ****  *  computer-readable structures which the host requests upon device enumeration, to determine
  35:Descriptors.c ****  *  the device's capabilities and functions.
  36:Descriptors.c ****  */
  37:Descriptors.c **** 
  38:Descriptors.c **** #include "Descriptors.h"
  39:Descriptors.c **** 
  40:Descriptors.c **** /** Device descriptor structure. This descriptor, located in FLASH memory, describes the overall
  41:Descriptors.c ****  *  device characteristics, including the supported USB version, control endpoint size and the
  42:Descriptors.c ****  *  number of device configurations. The descriptor is read out by the USB host when the enumeratio
  43:Descriptors.c ****  *  process begins.
  44:Descriptors.c ****  */
  45:Descriptors.c **** const USB_Descriptor_Device_t DeviceDescriptor =
  46:Descriptors.c **** {
  47:Descriptors.c **** 	.Header                 = {.Size = sizeof(USB_Descriptor_Device_t), .Type = DTYPE_Device},
  48:Descriptors.c **** 
  49:Descriptors.c **** 	.USBSpecification       = VERSION_BCD(1,1,0),
  50:Descriptors.c **** 	.Class                  = CDC_CSCP_CDCClass,
  51:Descriptors.c **** 	.SubClass               = CDC_CSCP_NoSpecificSubclass,
  52:Descriptors.c **** 	.Protocol               = CDC_CSCP_NoSpecificProtocol,
  53:Descriptors.c **** 
  54:Descriptors.c **** 	.Endpoint0Size          = 64,
  55:Descriptors.c **** 
  56:Descriptors.c **** 	.VendorID               = 0x058B,
  57:Descriptors.c **** 	.ProductID              = 0x0058,
  58:Descriptors.c **** 	.ReleaseNumber          = VERSION_BCD(0,1,0),
  59:Descriptors.c **** 
  60:Descriptors.c **** 	.ManufacturerStrIndex   = STRING_ID_Manufacturer,
  61:Descriptors.c **** 	.ProductStrIndex        = STRING_ID_Product,
  62:Descriptors.c **** 	.SerialNumStrIndex      = USE_INTERNAL_SERIAL,
  63:Descriptors.c **** 
  64:Descriptors.c **** 	.NumberOfConfigurations = 1
  65:Descriptors.c **** };
  66:Descriptors.c **** 
  67:Descriptors.c **** /** Configuration descriptor structure. This descriptor, located in FLASH memory, describes the usa
  68:Descriptors.c ****  *  of the device in one of its supported configurations, including information about any device in
  69:Descriptors.c ****  *  and endpoints. The descriptor is read out by the USB host during the enumeration process when s
  70:Descriptors.c ****  *  a configuration so that the host may correctly communicate with the USB device.
  71:Descriptors.c ****  */
  72:Descriptors.c **** const USB_Descriptor_Configuration_t ConfigurationDescriptor =
  73:Descriptors.c **** {
  74:Descriptors.c **** 	.Config =
  75:Descriptors.c **** 		{
  76:Descriptors.c **** 			.Header                 = {.Size = sizeof(USB_Descriptor_Configuration_Header_t), .Type = DTYPE_
  77:Descriptors.c **** 
  78:Descriptors.c **** 			.TotalConfigurationSize = sizeof(USB_Descriptor_Configuration_t),
  79:Descriptors.c **** 			.TotalInterfaces        = 2,
  80:Descriptors.c **** 
  81:Descriptors.c **** 			.ConfigurationNumber    = 1,
  82:Descriptors.c **** 			.ConfigurationStrIndex  = NO_DESCRIPTOR,
  83:Descriptors.c **** 
  84:Descriptors.c **** 			.ConfigAttributes       = USB_CONFIG_ATTR_RESERVED,
  85:Descriptors.c **** 
  86:Descriptors.c **** 			.MaxPowerConsumption    = USB_CONFIG_POWER_MA(100)
  87:Descriptors.c **** 		},
  88:Descriptors.c **** 
  89:Descriptors.c **** 	.CDC_CCI_Interface =
  90:Descriptors.c **** 		{
  91:Descriptors.c **** 			.Header                 = {.Size = sizeof(USB_Descriptor_Interface_t), .Type = DTYPE_Interface},
  92:Descriptors.c **** 
  93:Descriptors.c **** 			.InterfaceNumber        = INTERFACE_ID_CDC_CCI,
  94:Descriptors.c **** 			.AlternateSetting       = 0,
  95:Descriptors.c **** 
  96:Descriptors.c **** 			.TotalEndpoints         = 1,
  97:Descriptors.c **** 
  98:Descriptors.c **** 			.Class                  = CDC_CSCP_CDCClass,
  99:Descriptors.c **** 			.SubClass               = CDC_CSCP_ACMSubclass,
 100:Descriptors.c **** 			.Protocol               = CDC_CSCP_ATCommandProtocol,
 101:Descriptors.c **** 
 102:Descriptors.c **** 			.InterfaceStrIndex      = NO_DESCRIPTOR
 103:Descriptors.c **** 		},
 104:Descriptors.c **** 
 105:Descriptors.c **** 	.CDC_Functional_Header =
 106:Descriptors.c **** 		{
 107:Descriptors.c **** 			.Header                 = {.Size = sizeof(USB_CDC_Descriptor_FunctionalHeader_t), .Type = DTYPE_
 108:Descriptors.c **** 			.Subtype                = CDC_DSUBTYPE_CSInterface_Header,
 109:Descriptors.c **** 
 110:Descriptors.c **** 			.CDCSpecification       = VERSION_BCD(1,1,0),
 111:Descriptors.c **** 		},
 112:Descriptors.c **** 
 113:Descriptors.c **** 	.CDC_Functional_ACM =
 114:Descriptors.c **** 		{
 115:Descriptors.c **** 			.Header                 = {.Size = sizeof(USB_CDC_Descriptor_FunctionalACM_t), .Type = DTYPE_CSI
 116:Descriptors.c **** 			.Subtype                = CDC_DSUBTYPE_CSInterface_ACM,
 117:Descriptors.c **** 
 118:Descriptors.c **** 			.Capabilities           = 0x06,
 119:Descriptors.c **** 		},
 120:Descriptors.c **** 
 121:Descriptors.c **** 	.CDC_Functional_Union =
 122:Descriptors.c **** 		{
 123:Descriptors.c **** 			.Header                 = {.Size = sizeof(USB_CDC_Descriptor_FunctionalUnion_t), .Type = DTYPE_C
 124:Descriptors.c **** 			.Subtype                = CDC_DSUBTYPE_CSInterface_Union,
 125:Descriptors.c **** 
 126:Descriptors.c **** 			.MasterInterfaceNumber  = INTERFACE_ID_CDC_CCI,
 127:Descriptors.c **** 			.SlaveInterfaceNumber   = INTERFACE_ID_CDC_DCI,
 128:Descriptors.c **** 		},
 129:Descriptors.c **** 
 130:Descriptors.c **** 	.CDC_NotificationEndpoint =
 131:Descriptors.c **** 		{
 132:Descriptors.c **** 			.Header                 = {.Size = sizeof(USB_Descriptor_Endpoint_t), .Type = DTYPE_Endpoint},
 133:Descriptors.c **** 
 134:Descriptors.c **** 			.EndpointAddress        = CDC_NOTIFICATION_EPADDR,
 135:Descriptors.c **** 			.Attributes             = (EP_TYPE_INTERRUPT | ENDPOINT_ATTR_NO_SYNC | ENDPOINT_USAGE_DATA),
 136:Descriptors.c **** 			.EndpointSize           = CDC_NOTIFICATION_EPSIZE,
 137:Descriptors.c **** 			.PollingIntervalMS      = 0xFF
 138:Descriptors.c **** 		},
 139:Descriptors.c **** 
 140:Descriptors.c **** 	.CDC_DCI_Interface =
 141:Descriptors.c **** 		{
 142:Descriptors.c **** 			.Header                 = {.Size = sizeof(USB_Descriptor_Interface_t), .Type = DTYPE_Interface},
 143:Descriptors.c **** 
 144:Descriptors.c **** 			.InterfaceNumber        = INTERFACE_ID_CDC_DCI,
 145:Descriptors.c **** 			.AlternateSetting       = 0,
 146:Descriptors.c **** 
 147:Descriptors.c **** 			.TotalEndpoints         = 2,
 148:Descriptors.c **** 
 149:Descriptors.c **** 			.Class                  = CDC_CSCP_CDCDataClass,
 150:Descriptors.c **** 			.SubClass               = CDC_CSCP_NoDataSubclass,
 151:Descriptors.c **** 			.Protocol               = CDC_CSCP_NoDataProtocol,
 152:Descriptors.c **** 
 153:Descriptors.c **** 			.InterfaceStrIndex      = NO_DESCRIPTOR
 154:Descriptors.c **** 		},
 155:Descriptors.c **** 
 156:Descriptors.c **** 	.CDC_DataOutEndpoint =
 157:Descriptors.c **** 		{
 158:Descriptors.c **** 			.Header                 = {.Size = sizeof(USB_Descriptor_Endpoint_t), .Type = DTYPE_Endpoint},
 159:Descriptors.c **** 
 160:Descriptors.c **** 			.EndpointAddress        = CDC_RX_EPADDR,
 161:Descriptors.c **** 			.Attributes             = (EP_TYPE_BULK | ENDPOINT_ATTR_NO_SYNC | ENDPOINT_USAGE_DATA),
 162:Descriptors.c **** 			.EndpointSize           = CDC_TXRX_EPSIZE,
 163:Descriptors.c **** 			.PollingIntervalMS      = 0x05
 164:Descriptors.c **** 		},
 165:Descriptors.c **** 
 166:Descriptors.c **** 	.CDC_DataInEndpoint =
 167:Descriptors.c **** 		{
 168:Descriptors.c **** 			.Header                 = {.Size = sizeof(USB_Descriptor_Endpoint_t), .Type = DTYPE_Endpoint},
 169:Descriptors.c **** 
 170:Descriptors.c **** 			.EndpointAddress        = CDC_TX_EPADDR,
 171:Descriptors.c **** 			.Attributes             = (EP_TYPE_BULK | ENDPOINT_ATTR_NO_SYNC | ENDPOINT_USAGE_DATA),
 172:Descriptors.c **** 			.EndpointSize           = CDC_TXRX_EPSIZE,
 173:Descriptors.c **** 			.PollingIntervalMS      = 0x05
 174:Descriptors.c **** 		}
 175:Descriptors.c **** };
 176:Descriptors.c **** 
 177:Descriptors.c **** /** Language descriptor structure. This descriptor, located in FLASH memory, is returned when the h
 178:Descriptors.c ****  *  the string descriptor with index 0 (the first index). It is actually an array of 16-bit integer
 179:Descriptors.c ****  *  via the language ID table available at USB.org what languages the device supports for its strin
 180:Descriptors.c ****  */
 181:Descriptors.c **** const USB_Descriptor_String_t LanguageString = USB_STRING_DESCRIPTOR_ARRAY(LANGUAGE_ID_ENG);
 182:Descriptors.c **** 
 183:Descriptors.c **** /** Manufacturer descriptor string. This is a Unicode string containing the manufacturer's details 
 184:Descriptors.c ****  *  form, and is read out upon request by the host when the appropriate string ID is requested, lis
 185:Descriptors.c ****  *  Descriptor.
 186:Descriptors.c ****  */
 187:Descriptors.c **** const USB_Descriptor_String_t ManufacturerString = USB_STRING_DESCRIPTOR(L"Infineon Technologies");
 188:Descriptors.c **** 
 189:Descriptors.c **** 
 190:Descriptors.c **** /** Product descriptor string. This is a Unicode string containing the product's details in human r
 191:Descriptors.c ****  *  and is read out upon request by the host when the appropriate string ID is requested, listed in
 192:Descriptors.c ****  *  Descriptor.
 193:Descriptors.c ****  */
 194:Descriptors.c **** const USB_Descriptor_String_t ProductString = USB_STRING_DESCRIPTOR(L"IFX CDC");
 195:Descriptors.c **** 
 196:Descriptors.c **** /** This function is called by the library when in device mode, and must be overridden (see library
 197:Descriptors.c ****  *  documentation) by the application code so that the address and size of a requested descriptor c
 198:Descriptors.c ****  *  to the USB library. When the device receives a Get Descriptor request on the control endpoint, 
 199:Descriptors.c ****  *  is called so that the descriptor details can be passed back and the appropriate descriptor sent
 200:Descriptors.c ****  *  USB host.
 201:Descriptors.c ****  */
 202:Descriptors.c **** uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
 203:Descriptors.c ****                                     const uint8_t wIndex,
 204:Descriptors.c ****                                     const void** const DescriptorAddress)
 205:Descriptors.c **** {
  30              		.loc 1 205 1 view -0
  31              		.cfi_startproc
  32              		@ args = 0, pretend = 0, frame = 0
  33              		@ frame_needed = 0, uses_anonymous_args = 0
  34              		@ link register save eliminated.
 206:Descriptors.c **** 	const uint8_t  DescriptorType   = (wValue >> 8);
  35              		.loc 1 206 2 view .LVU1
  36              		.loc 1 206 17 is_stmt 0 view .LVU2
  37 0000 010A     		lsrs	r1, r0, #8
  38              	.LVL1:
 207:Descriptors.c **** 	const uint8_t  DescriptorNumber = (wValue & 0xFF);
  39              		.loc 1 207 2 is_stmt 1 view .LVU3
 208:Descriptors.c **** 
 209:Descriptors.c **** 	const void* Address = NULL;
  40              		.loc 1 209 2 view .LVU4
 210:Descriptors.c **** 	uint16_t    Size    = NO_DESCRIPTOR;
  41              		.loc 1 210 2 view .LVU5
 211:Descriptors.c **** 
 212:Descriptors.c **** 	switch (DescriptorType)
  42              		.loc 1 212 2 view .LVU6
  43 0002 0229     		cmp	r1, #2
  44 0004 18D0     		beq	.L4
  45 0006 0329     		cmp	r1, #3
  46 0008 09D0     		beq	.L3
  47 000a 0129     		cmp	r1, #1
  48 000c 03D0     		beq	.L8
  49              	.LVL2:
  50              	.L6:
 207:Descriptors.c **** 
  51              		.loc 1 207 17 is_stmt 0 view .LVU7
  52 000e 0020     		movs	r0, #0
  53 0010 0346     		mov	r3, r0
  54              	.LVL3:
 213:Descriptors.c **** 	{
 214:Descriptors.c **** 		case DTYPE_Device:
 215:Descriptors.c **** 			Address = &DeviceDescriptor;
 216:Descriptors.c **** 			Size    = sizeof(USB_Descriptor_Device_t);
 217:Descriptors.c **** 			break;
 218:Descriptors.c **** 		case DTYPE_Configuration:
 219:Descriptors.c **** 			Address = &ConfigurationDescriptor;
 220:Descriptors.c **** 			Size    = sizeof(USB_Descriptor_Configuration_t);
 221:Descriptors.c **** 			break;
 222:Descriptors.c **** 		case DTYPE_String:
 223:Descriptors.c **** 			switch (DescriptorNumber)
 224:Descriptors.c **** 			{
 225:Descriptors.c **** 				case STRING_ID_Language:
 226:Descriptors.c **** 					Address = &LanguageString;
 227:Descriptors.c **** 					Size    = LanguageString.Header.Size;
 228:Descriptors.c **** 					break;
 229:Descriptors.c **** 				case STRING_ID_Manufacturer:
 230:Descriptors.c **** 					Address = &ManufacturerString;
 231:Descriptors.c **** 					Size    = ManufacturerString.Header.Size;
 232:Descriptors.c **** 					break;
 233:Descriptors.c **** 				case STRING_ID_Product:
 234:Descriptors.c **** 					Address = &ProductString;
 235:Descriptors.c **** 					Size    = ProductString.Header.Size;
 236:Descriptors.c **** 					break;
 237:Descriptors.c **** 			}
 238:Descriptors.c **** 			break;
 239:Descriptors.c **** 	}
 240:Descriptors.c **** 
 241:Descriptors.c **** 	*DescriptorAddress = Address;
  55              		.loc 1 241 2 is_stmt 1 view .LVU8
  56              		.loc 1 241 21 is_stmt 0 view .LVU9
  57 0012 1360     		str	r3, [r2]
 242:Descriptors.c **** 	return Size;
  58              		.loc 1 242 2 is_stmt 1 view .LVU10
 243:Descriptors.c **** }
  59              		.loc 1 243 1 is_stmt 0 view .LVU11
  60 0014 7047     		bx	lr
  61              	.LVL4:
  62              	.L8:
 212:Descriptors.c **** 	{
  63              		.loc 1 212 2 view .LVU12
  64 0016 0A4B     		ldr	r3, .L9
 241:Descriptors.c **** 	return Size;
  65              		.loc 1 241 21 view .LVU13
  66 0018 1360     		str	r3, [r2]
 212:Descriptors.c **** 	{
  67              		.loc 1 212 2 view .LVU14
  68 001a 1220     		movs	r0, #18
  69              	.LVL5:
 241:Descriptors.c **** 	return Size;
  70              		.loc 1 241 2 is_stmt 1 view .LVU15
 242:Descriptors.c **** }
  71              		.loc 1 242 2 view .LVU16
  72              		.loc 1 243 1 is_stmt 0 view .LVU17
  73 001c 7047     		bx	lr
  74              	.LVL6:
  75              	.L3:
 207:Descriptors.c **** 
  76              		.loc 1 207 17 view .LVU18
  77 001e C0B2     		uxtb	r0, r0
  78              	.LVL7:
 223:Descriptors.c **** 			{
  79              		.loc 1 223 4 is_stmt 1 view .LVU19
  80 0020 0228     		cmp	r0, #2
  81 0022 F4D8     		bhi	.L6
  82 0024 074B     		ldr	r3, .L9+4
  83 0026 03EB8001 		add	r1, r3, r0, lsl #2
  84              	.LVL8:
 223:Descriptors.c **** 			{
  85              		.loc 1 223 4 is_stmt 0 view .LVU20
  86 002a 03EB4000 		add	r0, r3, r0, lsl #1
  87              	.LVL9:
 223:Descriptors.c **** 			{
  88              		.loc 1 223 4 view .LVU21
  89 002e 4B6D     		ldr	r3, [r1, #84]
  90 0030 B0F86000 		ldrh	r0, [r0, #96]
  91              	.LVL10:
 241:Descriptors.c **** 	return Size;
  92              		.loc 1 241 2 is_stmt 1 view .LVU22
 241:Descriptors.c **** 	return Size;
  93              		.loc 1 241 21 is_stmt 0 view .LVU23
  94 0034 1360     		str	r3, [r2]
 242:Descriptors.c **** }
  95              		.loc 1 242 2 is_stmt 1 view .LVU24
  96              		.loc 1 243 1 is_stmt 0 view .LVU25
  97 0036 7047     		bx	lr
  98              	.LVL11:
  99              	.L4:
 219:Descriptors.c **** 			Size    = sizeof(USB_Descriptor_Configuration_t);
 100              		.loc 1 219 12 view .LVU26
 101 0038 024B     		ldr	r3, .L9+4
 241:Descriptors.c **** 	return Size;
 102              		.loc 1 241 21 view .LVU27
 103 003a 1360     		str	r3, [r2]
 220:Descriptors.c **** 			break;
 104              		.loc 1 220 12 view .LVU28
 105 003c 3E20     		movs	r0, #62
 106              	.LVL12:
 241:Descriptors.c **** 	return Size;
 107              		.loc 1 241 2 is_stmt 1 view .LVU29
 242:Descriptors.c **** }
 108              		.loc 1 242 2 view .LVU30
 109              		.loc 1 243 1 is_stmt 0 view .LVU31
 110 003e 7047     		bx	lr
 111              	.L10:
 112              		.align	2
 113              	.L9:
 114 0040 40000000 		.word	.LANCHOR0+64
 115 0044 00000000 		.word	.LANCHOR0
 116              		.cfi_endproc
 117              	.LFE193:
 119              		.global	ProductString
 120              		.global	ManufacturerString
 121              		.global	LanguageString
 122              		.global	ConfigurationDescriptor
 123              		.global	DeviceDescriptor
 124              		.section	.rodata
 125              		.align	2
 126              		.set	.LANCHOR0,. + 0
 129              	ConfigurationDescriptor:
 130 0000 09       		.byte	9
 131 0001 02       		.byte	2
 132 0002 3E00     		.short	62
 133 0004 02       		.byte	2
 134 0005 01       		.byte	1
 135 0006 00       		.byte	0
 136 0007 80       		.byte	-128
 137 0008 32       		.byte	50
 138 0009 09       		.byte	9
 139 000a 04       		.byte	4
 140 000b 00       		.byte	0
 141 000c 00       		.byte	0
 142 000d 01       		.byte	1
 143 000e 02       		.byte	2
 144 000f 02       		.byte	2
 145 0010 01       		.byte	1
 146 0011 00       		.byte	0
 147 0012 05       		.byte	5
 148 0013 24       		.byte	36
 149 0014 00       		.byte	0
 150 0015 1001     		.2byte	272
 151 0017 04       		.byte	4
 152 0018 24       		.byte	36
 153 0019 02       		.byte	2
 154 001a 06       		.byte	6
 155 001b 05       		.byte	5
 156 001c 24       		.byte	36
 157 001d 06       		.byte	6
 158 001e 00       		.byte	0
 159 001f 01       		.byte	1
 160 0020 07       		.byte	7
 161 0021 05       		.byte	5
 162 0022 81       		.byte	-127
 163 0023 03       		.byte	3
 164 0024 0800     		.short	8
 165 0026 FF       		.byte	-1
 166 0027 09       		.byte	9
 167 0028 04       		.byte	4
 168 0029 01       		.byte	1
 169 002a 00       		.byte	0
 170 002b 02       		.byte	2
 171 002c 0A       		.byte	10
 172 002d 00       		.byte	0
 173 002e 00       		.byte	0
 174 002f 00       		.byte	0
 175 0030 07       		.byte	7
 176 0031 05       		.byte	5
 177 0032 03       		.byte	3
 178 0033 02       		.byte	2
 179 0034 4000     		.short	64
 180 0036 05       		.byte	5
 181 0037 07       		.byte	7
 182 0038 05       		.byte	5
 183 0039 82       		.byte	-126
 184 003a 02       		.byte	2
 185 003b 4000     		.2byte	64
 186 003d 05       		.byte	5
 187 003e 0000     		.space	2
 190              	DeviceDescriptor:
 191 0040 12       		.byte	18
 192 0041 01       		.byte	1
 193 0042 1001     		.short	272
 194 0044 02       		.byte	2
 195 0045 00       		.byte	0
 196 0046 00       		.byte	0
 197 0047 40       		.byte	64
 198 0048 8B05     		.short	1419
 199 004a 5800     		.short	88
 200 004c 1000     		.short	16
 201 004e 01       		.byte	1
 202 004f 02       		.byte	2
 203 0050 00       		.byte	0
 204 0051 01       		.byte	1
 205 0052 0000     		.space	2
 208              	CSWTCH.1:
 209 0054 00000000 		.word	LanguageString
 210 0058 00000000 		.word	ManufacturerString
 211 005c 00000000 		.word	ProductString
 214              	CSWTCH.2:
 215 0060 0400     		.short	4
 216 0062 5800     		.short	88
 217 0064 2000     		.short	32
 218 0066 0000     		.space	2
 221              	ProductString:
 222 0068 20       		.byte	32
 223 0069 03       		.byte	3
 224 006a 49000000 		.ascii	"I\000\000\000F\000\000\000X\000\000\000 \000\000\000"
 224      46000000 
 224      58000000 
 224      20000000 
 225 007a 43000000 		.ascii	"C\000\000\000D\000\000\000C\000\000\000\000\000\000"
 225      44000000 
 225      43000000 
 225      000000
 226 0089 00       		.ascii	"\000"
 227 008a 0000     		.space	2
 230              	ManufacturerString:
 231 008c 58       		.byte	88
 232 008d 03       		.byte	3
 233 008e 49000000 		.ascii	"I\000\000\000n\000\000\000f\000\000\000i\000\000\000"
 233      6E000000 
 233      66000000 
 233      69000000 
 234 009e 6E000000 		.ascii	"n\000\000\000e\000\000\000o\000\000\000n\000\000\000"
 234      65000000 
 234      6F000000 
 234      6E000000 
 235 00ae 20000000 		.ascii	" \000\000\000T\000\000\000e\000\000\000c\000\000\000"
 235      54000000 
 235      65000000 
 235      63000000 
 236 00be 68000000 		.ascii	"h\000\000\000n\000\000\000o\000\000\000l\000\000\000"
 236      6E000000 
 236      6F000000 
 236      6C000000 
 237 00ce 6F000000 		.ascii	"o\000\000\000g\000\000\000i\000\000\000e\000\000\000"
 237      67000000 
 237      69000000 
 237      65000000 
 238 00de 73000000 		.ascii	"s\000\000\000\000\000\000\000"
 238      00000000 
 239 00e6 0000     		.space	2
 242              	LanguageString:
 243 00e8 04       		.byte	4
 244 00e9 03       		.byte	3
 245 00ea 09040000 		.4byte	1033
 246              		.text
 247              	.Letext0:
 248              		.file 2 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stdint.h"
 249              		.file 3 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stddef.h"
 250              		.file 4 "/usr/include/newlib/sys/_types.h"
 251              		.file 5 "/usr/include/newlib/sys/reent.h"
 252              		.file 6 "/usr/include/newlib/sys/lock.h"
 253              		.file 7 "/opt/XMClib/XMC_Peripheral_Library_v2.1.16/CMSIS/Include/core_cm4.h"
 254              		.file 8 "/opt/XMClib/XMC_Peripheral_Library_v2.1.16/CMSIS/Infineon/XMC4500_series/Include/system_X
 255              		.file 9 "/opt/XMClib/XMC_Peripheral_Library_v2.1.16/CMSIS/Infineon/XMC4500_series/Include/XMC4500.
 256              		.file 10 "/usr/include/newlib/stdlib.h"
 257              		.file 11 "/opt/XMClib/XMC_Peripheral_Library_v2.1.16/XMCLib/inc/xmc_usbd_regs.h"
 258              		.file 12 "/opt/XMClib/XMC_Peripheral_Library_v2.1.16/XMCLib/inc/xmc_usbd.h"
 259              		.file 13 "/opt/XMClib/XMC_Peripheral_Library_v2.1.16/ThirdPartyLibraries/USBlib/USB/Core/XMC4000/U
 260              		.file 14 "/opt/XMClib/XMC_Peripheral_Library_v2.1.16/ThirdPartyLibraries/USBlib/USB/Core/XMC4000/.
 261              		.file 15 "/opt/XMClib/XMC_Peripheral_Library_v2.1.16/ThirdPartyLibraries/USBlib/USB/Core/XMC4000/.
 262              		.file 16 "/opt/XMClib/XMC_Peripheral_Library_v2.1.16/ThirdPartyLibraries/USBlib/USB/Core/XMC4000/.
 263              		.file 17 "/opt/XMClib/XMC_Peripheral_Library_v2.1.16/ThirdPartyLibraries/USBlib/USB/Core/USBTask.h
 264              		.file 18 "/opt/XMClib/XMC_Peripheral_Library_v2.1.16/ThirdPartyLibraries/USBlib/USB/Class/Device/.
 265              		.file 19 "Descriptors.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 Descriptors.c
     /tmp/ccZCE2PV.s:17     .text.CALLBACK_USB_GetDescriptor:0000000000000000 $t
     /tmp/ccZCE2PV.s:26     .text.CALLBACK_USB_GetDescriptor:0000000000000000 CALLBACK_USB_GetDescriptor
     /tmp/ccZCE2PV.s:114    .text.CALLBACK_USB_GetDescriptor:0000000000000040 $d
     /tmp/ccZCE2PV.s:221    .rodata:0000000000000068 ProductString
     /tmp/ccZCE2PV.s:230    .rodata:000000000000008c ManufacturerString
     /tmp/ccZCE2PV.s:242    .rodata:00000000000000e8 LanguageString
     /tmp/ccZCE2PV.s:129    .rodata:0000000000000000 ConfigurationDescriptor
     /tmp/ccZCE2PV.s:190    .rodata:0000000000000040 DeviceDescriptor
     /tmp/ccZCE2PV.s:125    .rodata:0000000000000000 $d
     /tmp/ccZCE2PV.s:208    .rodata:0000000000000054 CSWTCH.1
     /tmp/ccZCE2PV.s:214    .rodata:0000000000000060 CSWTCH.2
                           .group:0000000000000000 wm4.0.04d2d326b81bdb37bfb0bd77647c5fa0
                           .group:0000000000000000 wm4.USB.h.376.cfdb9ecb25c70fec676f585dede264a7
                           .group:0000000000000000 wm4.Common.h.60.c2f00e237f5994003db83c2422602b22
                           .group:0000000000000000 wm4.stdint.h.29.6d480f4ba0f60596e88234283d42444f
                           .group:0000000000000000 wm4.stdbool.h.29.07dce69c3b78884144b7f7bd19483461
                           .group:0000000000000000 wm4._newlib_version.h.4.1ef4e12f167f8b69d7c30054be56050d
                           .group:0000000000000000 wm4.newlib.h.21.1ae2897bc09bbe4bc80ffb801fb02432
                           .group:0000000000000000 wm4.ieeefp.h.77.f33a4dce62116f6f5175ff8bae57a54c
                           .group:0000000000000000 wm4.features.h.22.026edb2397769f4ae13f35900dbdb560
                           .group:0000000000000000 wm4.config.h.224.c701144a7b0518c6ee9b9b5465b79f81
                           .group:0000000000000000 wm4._ansi.h.31.de524f58584151836e90d8620a16f8e8
                           .group:0000000000000000 wm4.stddef.h.39.27677723d43e5b5a7afdf8d798429f1d
                           .group:0000000000000000 wm4._types.h.20.dd0d04dca3800a0d2a6129b87f3adbb2
                           .group:0000000000000000 wm4.stddef.h.155.3588ebfdd1e8c7ede80509bb9c3b8009
                           .group:0000000000000000 wm4._default_types.h.6.959254cf5f09734ea7516c89e8bb21bd
                           .group:0000000000000000 wm4._types.h.127.34941de1b2539d59d5cac00e0dd27a45
                           .group:0000000000000000 wm4.reent.h.17.e292bf8b0bec6c96e131a54347145a30
                           .group:0000000000000000 wm4.lock.h.2.c0958401bd0ce484d507ee19aacab817
                           .group:0000000000000000 wm4.reent.h.77.dcd6129ff07fe81bd5636db29abe53b2
                           .group:0000000000000000 wm4.cdefs.h.49.2bf373aedffd8b393ccd11dc057e8547
                           .group:0000000000000000 wm4.string.h.15.dab3980bf35408a4c507182805e2de3a
                           .group:0000000000000000 wm4.stddef.h.155.ba788add86a0e365f264484f110c3c29
                           .group:0000000000000000 wm4.BoardTypes.h.52.ca64813ccee737bcc2115eab5e075fdb
                           .group:0000000000000000 wm4.CompilerSpecific.h.55.4a5e5ff77cd35e49c89cf2115251aee0
                           .group:0000000000000000 wm4.Attributes.h.56.73b3ee26b0836c2dec569a5fa6f1b355
                           .group:0000000000000000 wm4.xmc_device.h.61.ba2d082e12f51240746cffdd60d42b81
                           .group:0000000000000000 wm4.XMC4500.h.55.9aa45b9b5790506b2dcb963e4e7adeaf
                           .group:0000000000000000 wm4.core_cm4.h.32.6c6eb1c8daeca23ce7ba79c8e8120d52
                           .group:0000000000000000 wm4.cmsis_gcc.h.26.91b63349961c35637933e4fba51b867b
                           .group:0000000000000000 wm4.core_cm4.h.172.fdd5a388a160bb6ff767b7d7ee212268
                           .group:0000000000000000 wm4.system_XMC4500.h.42.99124977c10ca8844a71949adbeabd70
                           .group:0000000000000000 wm4.XMC4500.h.208.b340195df97f067735c4c769ba59985a
                           .group:0000000000000000 wm4.xmc_device.h.1460.8860499b404961ffcfbb8d1fefcb2146
                           .group:0000000000000000 wm4.xmc_common.h.92.3f4336a80569affab05a81145b87c2fc
                           .group:0000000000000000 wm4.Endianness.h.57.3ac00c5468f4b91b806a0e6dba047e9c
                           .group:0000000000000000 wm4.Common.h.105.4b937a9cc9dcdb26c3f07541b0b763a8
                           .group:0000000000000000 wm4.USBController.h.49.cbfc73805155b6fff6267400af3f4eec
                           .group:0000000000000000 wm4.stdlib.h.13.4ed386f5c1a80d71e72172885d946ef2
                           .group:0000000000000000 wm4.alloca.h.8.dfc0c703c47ec3e69746825b17d9e66d
                           .group:0000000000000000 wm4.stdlib.h.56.f4862cfbf4363a1db01842d5bdf72c18
                           .group:0000000000000000 wm4.xmc_usbd_regs.h.80.57c6c85fa0ecbc9f8327ce445aebb9bc
                           .group:0000000000000000 wm4.xmc4_scu.h.83.0449f5880ac071460ec1a8072311ea51
                           .group:0000000000000000 wm4.xmc_usbd.h.122.ce57a9e6a9da48ee33ece02813c49593
                           .group:0000000000000000 wm4.USBController_XMC4000.h.71.902f2653e09cb8b25245faa82cc6b907
                           .group:0000000000000000 wm4.StdDescriptors.h.73.7d17e8be7a73b855fc0f8827303b7597
                           .group:0000000000000000 wm4.Endpoint.h.73.3734de3e84ab23fb43d81f41fba620ec
                           .group:0000000000000000 wm4.Device_XMC4000.h.86.6803bdd99d84e764a570256c87a24d0a
                           .group:0000000000000000 wm4.StdRequestType.h.50.461dce94a3ee1fa9ff31ec5f28bd9699
                           .group:0000000000000000 wm4.ConfigDescriptors.h.51.0d67ebf453774188abf5a503ba8f6735
                           .group:0000000000000000 wm4.CDCClass.h.61.0d41ba255f7ce6f076fd610d8396dd1f
                           .group:0000000000000000 wm4.CDCClassCommon.h.72.14ca578d8547e19a8a0c0d2d328483bd
                           .group:0000000000000000 wm4.stdio.h.27.3fc80220048df77954e38daec3bb9670
                           .group:0000000000000000 wm4.stdarg.h.34.3a23a216c0c293b3d2ea2e89281481e6
                           .group:0000000000000000 wm4.types.h.40.8b6acba56cefbb11746718204edc8f5e
                           .group:0000000000000000 wm4._stdint.h.10.c24fa3af3bc1706662bb5593a907e841
                           .group:0000000000000000 wm4._endian.h.31.65a10590763c3dde1ac4a7f66d7d4891
                           .group:0000000000000000 wm4.endian.h.9.49f3a4695c1b61e8a0808de3c4a106cb
                           .group:0000000000000000 wm4._timeval.h.32.bec3221fa7a9bb0bdde696c9c57e47d2
                           .group:0000000000000000 wm4.timespec.h.41.d855182eb0e690443ab8651bcedca6e1
                           .group:0000000000000000 wm4.select.h.19.97ca6fd0c752a0f3b6719fd314d361e6
                           .group:0000000000000000 wm4.types.h.51.5571ec98f267d17d3c670b7a3ba33afa
                           .group:0000000000000000 wm4.sched.h.22.c60982713a5c428609783c78f9c78d95
                           .group:0000000000000000 wm4._pthreadtypes.h.36.fcee9961c35163dde6267ef772ad1972
                           .group:0000000000000000 wm4.stdio.h.2.4aa87247282eca6c8f36f9de33d8df1a
                           .group:0000000000000000 wm4.stdio.h.81.932d0c162786b883f622b8d05c120c78
                           .group:0000000000000000 wm4.HIDClass.h.62.6bb32c59177b21a83b8e65c5a1b0a615
                           .group:0000000000000000 wm4.HIDReportData.h.47.f13f4956396e0bec70835fe634fcc24d
                           .group:0000000000000000 wm4.HIDParser.h.88.4b86fe94cb8d01713592cdd0391b606b
                           .group:0000000000000000 wm4.HIDClassCommon.h.71.a60cdf9d7cd69289f43dde215b509193
                           .group:0000000000000000 wm4.MassStorageClass.h.61.e9235f3bd090b77f36343f082ef93107
                           .group:0000000000000000 wm4.MassStorageClassCommon.h.51.6aefecf288eb3c3c6c9bde61e26dd765
                           .group:0000000000000000 wm4.Descriptors.h.44.84a4fd312957d0d42fb6aaa001850ba4

NO UNDEFINED SYMBOLS
