
build/main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001838  08000000  0c000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 Stack         00000800  10000000  10000000  00030000  2**0
                  ALLOC
  2 .ram_code     00000000  10000800  10000800  000207d8  2**0
                  CONTENTS
  3 PSRAM_DATA    00000000  10000800  10000800  000207d8  2**0
                  CONTENTS
  4 PSRAM_BSS     00000000  10000800  10000800  000207d8  2**0
                  CONTENTS
  5 .data         000007d8  20000000  0c001838  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000018  200007d8  0c002010  000207d8  2**2
                  ALLOC
  7 .no_init      00000014  2000ffc0  2000ffc0  0002ffc0  2**2
                  ALLOC
  8 DSRAM2_DATA   00000000  30000000  30000000  000207d8  2**0
                  CONTENTS
  9 DSRAM2_BSS    00000000  30000000  30000000  000207d8  2**0
                  CONTENTS
 10 .debug_aranges 00000120  00000000  00000000  000207d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_info   00001f66  00000000  00000000  000208f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 000007a9  00000000  00000000  0002285e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_line   0000204a  00000000  00000000  00023007  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_frame  000003b0  00000000  00000000  00025054  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00075a78  00000000  00000000  00025404  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_loc    0000069c  00000000  00000000  0009ae7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 000000d0  00000000  00000000  0009b518  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .build_attributes 000001a4  00000000  00000000  0009b5e8  2**0
                  CONTENTS, READONLY
 19 .debug_macro  00018a3d  00000000  00000000  0009b78c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000000 <__Vectors>:
 8000000:	00 08 00 10 01 02 00 08 b1 02 00 08 b1 02 00 08     ................
 8000010:	b1 02 00 08 b1 02 00 08 b1 02 00 08 00 00 00 00     ................
	...
 800002c:	b1 02 00 08 b1 02 00 08 00 00 00 00 b1 02 00 08     ................
 800003c:	e5 0e 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800004c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800005c:	b1 02 00 08 b1 02 00 08 00 00 00 00 00 00 00 00     ................
 800006c:	00 00 00 00 b1 02 00 08 00 00 00 00 b1 02 00 08     ................
 800007c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800008c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800009c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000ac:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000bc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000cc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000dc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000ec:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000fc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800010c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800011c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800012c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800013c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800014c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800015c:	b1 02 00 08 00 00 00 00 00 00 00 00 00 00 00 00     ................
 800016c:	00 00 00 00 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800017c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800018c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800019c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001ac:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001bc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001cc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001dc:	00 00 00 00 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001ec:	b1 02 00 08 b1 02 00 08 00 00 00 00 b1 02 00 08     ................
 80001fc:	00 00 00 00                                         ....

08000200 <Reset_Handler>:
 8000200:	f8df d08c 	ldr.w	sp, [pc, #140]	; 8000290 <__zero_table_end__>
 8000204:	4823      	ldr	r0, [pc, #140]	; (8000294 <__zero_table_end__+0x4>)
 8000206:	4780      	blx	r0
 8000208:	4c23      	ldr	r4, [pc, #140]	; (8000298 <__zero_table_end__+0x8>)
 800020a:	4d24      	ldr	r5, [pc, #144]	; (800029c <__zero_table_end__+0xc>)
 800020c:	42ac      	cmp	r4, r5
 800020e:	da09      	bge.n	8000224 <Reset_Handler+0x24>
 8000210:	6821      	ldr	r1, [r4, #0]
 8000212:	6862      	ldr	r2, [r4, #4]
 8000214:	68a3      	ldr	r3, [r4, #8]
 8000216:	3b04      	subs	r3, #4
 8000218:	bfa2      	ittt	ge
 800021a:	58c8      	ldrge	r0, [r1, r3]
 800021c:	50d0      	strge	r0, [r2, r3]
 800021e:	e7fa      	bge.n	8000216 <Reset_Handler+0x16>
 8000220:	340c      	adds	r4, #12
 8000222:	e7f3      	b.n	800020c <Reset_Handler+0xc>
 8000224:	4b1e      	ldr	r3, [pc, #120]	; (80002a0 <__zero_table_end__+0x10>)
 8000226:	4c1f      	ldr	r4, [pc, #124]	; (80002a4 <__zero_table_end__+0x14>)
 8000228:	42a3      	cmp	r3, r4
 800022a:	da08      	bge.n	800023e <Reset_Handler+0x3e>
 800022c:	6819      	ldr	r1, [r3, #0]
 800022e:	685a      	ldr	r2, [r3, #4]
 8000230:	2000      	movs	r0, #0
 8000232:	3a04      	subs	r2, #4
 8000234:	bfa4      	itt	ge
 8000236:	5088      	strge	r0, [r1, r2]
 8000238:	e7fb      	bge.n	8000232 <Reset_Handler+0x32>
 800023a:	3308      	adds	r3, #8
 800023c:	e7f4      	b.n	8000228 <Reset_Handler+0x28>
 800023e:	481a      	ldr	r0, [pc, #104]	; (80002a8 <__zero_table_end__+0x18>)
 8000240:	4780      	blx	r0
 8000242:	481a      	ldr	r0, [pc, #104]	; (80002ac <__zero_table_end__+0x1c>)
 8000244:	4780      	blx	r0
	...

08000248 <__copy_table_start__>:
 8000248:	0c001838 	.word	0x0c001838
 800024c:	20000000 	.word	0x20000000
 8000250:	000007d8 	.word	0x000007d8
 8000254:	0c002010 	.word	0x0c002010
 8000258:	30000000 	.word	0x30000000
 800025c:	00000000 	.word	0x00000000
 8000260:	0c001838 	.word	0x0c001838
 8000264:	10000800 	.word	0x10000800
 8000268:	00000000 	.word	0x00000000
 800026c:	0c001838 	.word	0x0c001838
 8000270:	10000800 	.word	0x10000800
 8000274:	00000000 	.word	0x00000000

08000278 <__copy_table_end__>:
 8000278:	200007d8 	.word	0x200007d8
 800027c:	00000018 	.word	0x00000018
 8000280:	30000000 	.word	0x30000000
 8000284:	00000000 	.word	0x00000000
 8000288:	10000800 	.word	0x10000800
 800028c:	00000000 	.word	0x00000000

08000290 <__zero_table_end__>:
 8000290:	10000800 	.word	0x10000800
 8000294:	080013e1 	.word	0x080013e1
 8000298:	08000248 	.word	0x08000248
 800029c:	08000278 	.word	0x08000278
 80002a0:	08000278 	.word	0x08000278
 80002a4:	08000290 	.word	0x08000290
 80002a8:	080017ed 	.word	0x080017ed
 80002ac:	08000f55 	.word	0x08000f55

080002b0 <BusFault_Handler>:
 80002b0:	e7fe      	b.n	80002b0 <BusFault_Handler>
	...

080002b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80002b4:	b480      	push	{r7}
 80002b6:	b083      	sub	sp, #12
 80002b8:	af00      	add	r7, sp, #0
 80002ba:	4603      	mov	r3, r0
 80002bc:	6039      	str	r1, [r7, #0]
 80002be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	db0a      	blt.n	80002de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002c8:	683b      	ldr	r3, [r7, #0]
 80002ca:	b2da      	uxtb	r2, r3
 80002cc:	490c      	ldr	r1, [pc, #48]	; (8000300 <__NVIC_SetPriority+0x4c>)
 80002ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002d2:	0092      	lsls	r2, r2, #2
 80002d4:	b2d2      	uxtb	r2, r2
 80002d6:	440b      	add	r3, r1
 80002d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80002dc:	e00a      	b.n	80002f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002de:	683b      	ldr	r3, [r7, #0]
 80002e0:	b2da      	uxtb	r2, r3
 80002e2:	4908      	ldr	r1, [pc, #32]	; (8000304 <__NVIC_SetPriority+0x50>)
 80002e4:	79fb      	ldrb	r3, [r7, #7]
 80002e6:	f003 030f 	and.w	r3, r3, #15
 80002ea:	3b04      	subs	r3, #4
 80002ec:	0092      	lsls	r2, r2, #2
 80002ee:	b2d2      	uxtb	r2, r2
 80002f0:	440b      	add	r3, r1
 80002f2:	761a      	strb	r2, [r3, #24]
}
 80002f4:	bf00      	nop
 80002f6:	370c      	adds	r7, #12
 80002f8:	46bd      	mov	sp, r7
 80002fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002fe:	4770      	bx	lr
 8000300:	e000e100 	.word	0xe000e100
 8000304:	e000ed00 	.word	0xe000ed00

08000308 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000308:	b580      	push	{r7, lr}
 800030a:	b082      	sub	sp, #8
 800030c:	af00      	add	r7, sp, #0
 800030e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	3b01      	subs	r3, #1
 8000314:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000318:	d301      	bcc.n	800031e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800031a:	2301      	movs	r3, #1
 800031c:	e00f      	b.n	800033e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800031e:	4a0a      	ldr	r2, [pc, #40]	; (8000348 <SysTick_Config+0x40>)
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	3b01      	subs	r3, #1
 8000324:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000326:	213f      	movs	r1, #63	; 0x3f
 8000328:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800032c:	f7ff ffc2 	bl	80002b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000330:	4b05      	ldr	r3, [pc, #20]	; (8000348 <SysTick_Config+0x40>)
 8000332:	2200      	movs	r2, #0
 8000334:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000336:	4b04      	ldr	r3, [pc, #16]	; (8000348 <SysTick_Config+0x40>)
 8000338:	2207      	movs	r2, #7
 800033a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800033c:	2300      	movs	r3, #0
}
 800033e:	4618      	mov	r0, r3
 8000340:	3708      	adds	r7, #8
 8000342:	46bd      	mov	sp, r7
 8000344:	bd80      	pop	{r7, pc}
 8000346:	bf00      	nop
 8000348:	e000e010 	.word	0xe000e010

0800034c <XMC_GPIO_SetOutputHigh>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputHigh(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 800034c:	b480      	push	{r7}
 800034e:	b083      	sub	sp, #12
 8000350:	af00      	add	r7, sp, #0
 8000352:	6078      	str	r0, [r7, #4]
 8000354:	460b      	mov	r3, r1
 8000356:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_SetOutputHigh: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = (uint32_t)0x1U << pin;
 8000358:	78fb      	ldrb	r3, [r7, #3]
 800035a:	2201      	movs	r2, #1
 800035c:	409a      	lsls	r2, r3
 800035e:	687b      	ldr	r3, [r7, #4]
 8000360:	605a      	str	r2, [r3, #4]
}
 8000362:	bf00      	nop
 8000364:	370c      	adds	r7, #12
 8000366:	46bd      	mov	sp, r7
 8000368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800036c:	4770      	bx	lr

0800036e <XMC_GPIO_SetOutputLow>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.\n
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputLow(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 800036e:	b480      	push	{r7}
 8000370:	b083      	sub	sp, #12
 8000372:	af00      	add	r7, sp, #0
 8000374:	6078      	str	r0, [r7, #4]
 8000376:	460b      	mov	r3, r1
 8000378:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_SetOutputLow: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = 0x10000U << pin;
 800037a:	78fb      	ldrb	r3, [r7, #3]
 800037c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000380:	409a      	lsls	r2, r3
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	605a      	str	r2, [r3, #4]
}
 8000386:	bf00      	nop
 8000388:	370c      	adds	r7, #12
 800038a:	46bd      	mov	sp, r7
 800038c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000390:	4770      	bx	lr

08000392 <XMC_GPIO_GetInput>:
 * Prior to this api, user has to configure port pin to input mode using XMC_GPIO_SetMode().
 *
 */

__STATIC_INLINE uint32_t XMC_GPIO_GetInput(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 8000392:	b480      	push	{r7}
 8000394:	b083      	sub	sp, #12
 8000396:	af00      	add	r7, sp, #0
 8000398:	6078      	str	r0, [r7, #4]
 800039a:	460b      	mov	r3, r1
 800039c:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_GetInput: Invalid port", XMC_GPIO_CHECK_PORT(port));

  return (((port->IN) >> pin) & 0x1U);
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80003a2:	78fb      	ldrb	r3, [r7, #3]
 80003a4:	fa22 f303 	lsr.w	r3, r2, r3
 80003a8:	f003 0301 	and.w	r3, r3, #1
}
 80003ac:	4618      	mov	r0, r3
 80003ae:	370c      	adds	r7, #12
 80003b0:	46bd      	mov	sp, r7
 80003b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b6:	4770      	bx	lr

080003b8 <DecimalToArrayFunction>:
//Interrupt handler


// DECIMAL TO ARRAY CODE TAKEN FROM STACK OVERFLOW https://stackoverflow.com/questions/515612/convert-an-integer-number-into-an-array
void DecimalToArrayFunction(int recordedTimeArray[], uint32_t timeBuffer)
{  
 80003b8:	e92d 03b0 	stmdb	sp!, {r4, r5, r7, r8, r9}
 80003bc:	b089      	sub	sp, #36	; 0x24
 80003be:	af00      	add	r7, sp, #0
 80003c0:	6078      	str	r0, [r7, #4]
 80003c2:	6039      	str	r1, [r7, #0]
        int c = 0; /* digit position */
 80003c4:	2300      	movs	r3, #0
 80003c6:	617b      	str	r3, [r7, #20]
        int n = timeBuffer;
 80003c8:	683b      	ldr	r3, [r7, #0]
 80003ca:	61bb      	str	r3, [r7, #24]
        //recordedTimeArray[]={999,999,999,999,999,999,999,999,999,999};              
        while (n != 0)
 80003cc:	e00a      	b.n	80003e4 <DecimalToArrayFunction+0x2c>
        {
            n /= 10;
 80003ce:	69bb      	ldr	r3, [r7, #24]
 80003d0:	4a3d      	ldr	r2, [pc, #244]	; (80004c8 <DecimalToArrayFunction+0x110>)
 80003d2:	fb82 1203 	smull	r1, r2, r2, r3
 80003d6:	1092      	asrs	r2, r2, #2
 80003d8:	17db      	asrs	r3, r3, #31
 80003da:	1ad3      	subs	r3, r2, r3
 80003dc:	61bb      	str	r3, [r7, #24]
            c++;
 80003de:	697b      	ldr	r3, [r7, #20]
 80003e0:	3301      	adds	r3, #1
 80003e2:	617b      	str	r3, [r7, #20]
        while (n != 0)
 80003e4:	69bb      	ldr	r3, [r7, #24]
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	d1f1      	bne.n	80003ce <DecimalToArrayFunction+0x16>
        }
        
        int numberArray[c];
 80003ea:	6979      	ldr	r1, [r7, #20]
 80003ec:	466b      	mov	r3, sp
 80003ee:	4618      	mov	r0, r3
 80003f0:	1e4b      	subs	r3, r1, #1
 80003f2:	60fb      	str	r3, [r7, #12]
 80003f4:	460a      	mov	r2, r1
 80003f6:	2300      	movs	r3, #0
 80003f8:	4690      	mov	r8, r2
 80003fa:	4699      	mov	r9, r3
 80003fc:	f04f 0200 	mov.w	r2, #0
 8000400:	f04f 0300 	mov.w	r3, #0
 8000404:	ea4f 1349 	mov.w	r3, r9, lsl #5
 8000408:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 800040c:	ea4f 1248 	mov.w	r2, r8, lsl #5
 8000410:	460a      	mov	r2, r1
 8000412:	2300      	movs	r3, #0
 8000414:	4614      	mov	r4, r2
 8000416:	461d      	mov	r5, r3
 8000418:	f04f 0200 	mov.w	r2, #0
 800041c:	f04f 0300 	mov.w	r3, #0
 8000420:	016b      	lsls	r3, r5, #5
 8000422:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8000426:	0162      	lsls	r2, r4, #5
 8000428:	460b      	mov	r3, r1
 800042a:	009b      	lsls	r3, r3, #2
 800042c:	3307      	adds	r3, #7
 800042e:	08db      	lsrs	r3, r3, #3
 8000430:	00db      	lsls	r3, r3, #3
 8000432:	ebad 0d03 	sub.w	sp, sp, r3
 8000436:	466b      	mov	r3, sp
 8000438:	3303      	adds	r3, #3
 800043a:	089b      	lsrs	r3, r3, #2
 800043c:	009b      	lsls	r3, r3, #2
 800043e:	60bb      	str	r3, [r7, #8]
        
        c = 0;    
 8000440:	2300      	movs	r3, #0
 8000442:	617b      	str	r3, [r7, #20]
        n = timeBuffer;
 8000444:	683b      	ldr	r3, [r7, #0]
 8000446:	61bb      	str	r3, [r7, #24]
        
        /* extract each digit */
        while (n != 0)
 8000448:	e01a      	b.n	8000480 <DecimalToArrayFunction+0xc8>
        {
            numberArray[c] = n % 10;
 800044a:	69b9      	ldr	r1, [r7, #24]
 800044c:	4b1e      	ldr	r3, [pc, #120]	; (80004c8 <DecimalToArrayFunction+0x110>)
 800044e:	fb83 2301 	smull	r2, r3, r3, r1
 8000452:	109a      	asrs	r2, r3, #2
 8000454:	17cb      	asrs	r3, r1, #31
 8000456:	1ad2      	subs	r2, r2, r3
 8000458:	4613      	mov	r3, r2
 800045a:	009b      	lsls	r3, r3, #2
 800045c:	4413      	add	r3, r2
 800045e:	005b      	lsls	r3, r3, #1
 8000460:	1aca      	subs	r2, r1, r3
 8000462:	68bb      	ldr	r3, [r7, #8]
 8000464:	6979      	ldr	r1, [r7, #20]
 8000466:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
            n /= 10;
 800046a:	69bb      	ldr	r3, [r7, #24]
 800046c:	4a16      	ldr	r2, [pc, #88]	; (80004c8 <DecimalToArrayFunction+0x110>)
 800046e:	fb82 1203 	smull	r1, r2, r2, r3
 8000472:	1092      	asrs	r2, r2, #2
 8000474:	17db      	asrs	r3, r3, #31
 8000476:	1ad3      	subs	r3, r2, r3
 8000478:	61bb      	str	r3, [r7, #24]
            c++;
 800047a:	697b      	ldr	r3, [r7, #20]
 800047c:	3301      	adds	r3, #1
 800047e:	617b      	str	r3, [r7, #20]
        while (n != 0)
 8000480:	69bb      	ldr	r3, [r7, #24]
 8000482:	2b00      	cmp	r3, #0
 8000484:	d1e1      	bne.n	800044a <DecimalToArrayFunction+0x92>
        }
        int intracounter=0;
 8000486:	2300      	movs	r3, #0
 8000488:	61fb      	str	r3, [r7, #28]
        for (int i=c-1;i>=0;i--){            
 800048a:	697b      	ldr	r3, [r7, #20]
 800048c:	3b01      	subs	r3, #1
 800048e:	613b      	str	r3, [r7, #16]
 8000490:	e00e      	b.n	80004b0 <DecimalToArrayFunction+0xf8>
            //printf("%d \n",numberArray[i]);
                recordedTimeArray[intracounter]=numberArray[i];
 8000492:	69fb      	ldr	r3, [r7, #28]
 8000494:	009b      	lsls	r3, r3, #2
 8000496:	687a      	ldr	r2, [r7, #4]
 8000498:	4413      	add	r3, r2
 800049a:	68ba      	ldr	r2, [r7, #8]
 800049c:	6939      	ldr	r1, [r7, #16]
 800049e:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 80004a2:	601a      	str	r2, [r3, #0]
                intracounter++;
 80004a4:	69fb      	ldr	r3, [r7, #28]
 80004a6:	3301      	adds	r3, #1
 80004a8:	61fb      	str	r3, [r7, #28]
        for (int i=c-1;i>=0;i--){            
 80004aa:	693b      	ldr	r3, [r7, #16]
 80004ac:	3b01      	subs	r3, #1
 80004ae:	613b      	str	r3, [r7, #16]
 80004b0:	693b      	ldr	r3, [r7, #16]
 80004b2:	2b00      	cmp	r3, #0
 80004b4:	daed      	bge.n	8000492 <DecimalToArrayFunction+0xda>
        }
        intracounter=0;
 80004b6:	2300      	movs	r3, #0
 80004b8:	61fb      	str	r3, [r7, #28]
 80004ba:	4685      	mov	sp, r0

}
 80004bc:	bf00      	nop
 80004be:	3724      	adds	r7, #36	; 0x24
 80004c0:	46bd      	mov	sp, r7
 80004c2:	e8bd 03b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9}
 80004c6:	4770      	bx	lr
 80004c8:	66666667 	.word	0x66666667

080004cc <ArrayToMorse>:
void ArrayToMorse(int ArrayInput[], uint8_t ArrayOutput[]){
 80004cc:	b480      	push	{r7}
 80004ce:	b087      	sub	sp, #28
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
 80004d4:	6039      	str	r1, [r7, #0]
    bool encodingFlag = false;
 80004d6:	2300      	movs	r3, #0
 80004d8:	75fb      	strb	r3, [r7, #23]
    int counterIndex=0;
 80004da:	2300      	movs	r3, #0
 80004dc:	613b      	str	r3, [r7, #16]
    int outputCounterIndex=0;
 80004de:	2300      	movs	r3, #0
 80004e0:	60fb      	str	r3, [r7, #12]
    while (!encodingFlag){
 80004e2:	f000 bcf1 	b.w	8000ec8 <ArrayToMorse+0x9fc>
        
        switch (ArrayInput[counterIndex])
 80004e6:	693b      	ldr	r3, [r7, #16]
 80004e8:	009b      	lsls	r3, r3, #2
 80004ea:	687a      	ldr	r2, [r7, #4]
 80004ec:	4413      	add	r3, r2
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	2b09      	cmp	r3, #9
 80004f2:	dc1d      	bgt.n	8000530 <ArrayToMorse+0x64>
 80004f4:	2b00      	cmp	r3, #0
 80004f6:	f2c0 84e7 	blt.w	8000ec8 <ArrayToMorse+0x9fc>
 80004fa:	2b09      	cmp	r3, #9
 80004fc:	f200 84e4 	bhi.w	8000ec8 <ArrayToMorse+0x9fc>
 8000500:	a201      	add	r2, pc, #4	; (adr r2, 8000508 <ArrayToMorse+0x3c>)
 8000502:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000506:	bf00      	nop
 8000508:	0800053f 	.word	0x0800053f
 800050c:	08000689 	.word	0x08000689
 8000510:	080007b1 	.word	0x080007b1
 8000514:	080008b9 	.word	0x080008b9
 8000518:	0800099b 	.word	0x0800099b
 800051c:	08000a57 	.word	0x08000a57
 8000520:	08000aed 	.word	0x08000aed
 8000524:	08000baf 	.word	0x08000baf
 8000528:	08000c8b 	.word	0x08000c8b
 800052c:	08000d8d 	.word	0x08000d8d
 8000530:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000534:	4293      	cmp	r3, r2
 8000536:	f000 84ba 	beq.w	8000eae <ArrayToMorse+0x9e2>
 800053a:	f000 bcc5 	b.w	8000ec8 <ArrayToMorse+0x9fc>
        {
            case 0:
                 ArrayOutput[outputCounterIndex]=1;
 800053e:	68fb      	ldr	r3, [r7, #12]
 8000540:	683a      	ldr	r2, [r7, #0]
 8000542:	4413      	add	r3, r2
 8000544:	2201      	movs	r2, #1
 8000546:	701a      	strb	r2, [r3, #0]
                 outputCounterIndex++;
 8000548:	68fb      	ldr	r3, [r7, #12]
 800054a:	3301      	adds	r3, #1
 800054c:	60fb      	str	r3, [r7, #12]
                 ArrayOutput[outputCounterIndex]=1;
 800054e:	68fb      	ldr	r3, [r7, #12]
 8000550:	683a      	ldr	r2, [r7, #0]
 8000552:	4413      	add	r3, r2
 8000554:	2201      	movs	r2, #1
 8000556:	701a      	strb	r2, [r3, #0]
                 outputCounterIndex++;
 8000558:	68fb      	ldr	r3, [r7, #12]
 800055a:	3301      	adds	r3, #1
 800055c:	60fb      	str	r3, [r7, #12]
                 ArrayOutput[outputCounterIndex]=1;
 800055e:	68fb      	ldr	r3, [r7, #12]
 8000560:	683a      	ldr	r2, [r7, #0]
 8000562:	4413      	add	r3, r2
 8000564:	2201      	movs	r2, #1
 8000566:	701a      	strb	r2, [r3, #0]
                 outputCounterIndex++;
 8000568:	68fb      	ldr	r3, [r7, #12]
 800056a:	3301      	adds	r3, #1
 800056c:	60fb      	str	r3, [r7, #12]
                 
                 
                 ArrayOutput[outputCounterIndex]=0;
 800056e:	68fb      	ldr	r3, [r7, #12]
 8000570:	683a      	ldr	r2, [r7, #0]
 8000572:	4413      	add	r3, r2
 8000574:	2200      	movs	r2, #0
 8000576:	701a      	strb	r2, [r3, #0]
                 outputCounterIndex++;
 8000578:	68fb      	ldr	r3, [r7, #12]
 800057a:	3301      	adds	r3, #1
 800057c:	60fb      	str	r3, [r7, #12]
                 
                 ArrayOutput[outputCounterIndex]=1;
 800057e:	68fb      	ldr	r3, [r7, #12]
 8000580:	683a      	ldr	r2, [r7, #0]
 8000582:	4413      	add	r3, r2
 8000584:	2201      	movs	r2, #1
 8000586:	701a      	strb	r2, [r3, #0]
                 outputCounterIndex++;
 8000588:	68fb      	ldr	r3, [r7, #12]
 800058a:	3301      	adds	r3, #1
 800058c:	60fb      	str	r3, [r7, #12]
                 ArrayOutput[outputCounterIndex]=1;
 800058e:	68fb      	ldr	r3, [r7, #12]
 8000590:	683a      	ldr	r2, [r7, #0]
 8000592:	4413      	add	r3, r2
 8000594:	2201      	movs	r2, #1
 8000596:	701a      	strb	r2, [r3, #0]
                 outputCounterIndex++;
 8000598:	68fb      	ldr	r3, [r7, #12]
 800059a:	3301      	adds	r3, #1
 800059c:	60fb      	str	r3, [r7, #12]
                 ArrayOutput[outputCounterIndex]=1;
 800059e:	68fb      	ldr	r3, [r7, #12]
 80005a0:	683a      	ldr	r2, [r7, #0]
 80005a2:	4413      	add	r3, r2
 80005a4:	2201      	movs	r2, #1
 80005a6:	701a      	strb	r2, [r3, #0]
                 outputCounterIndex++;
 80005a8:	68fb      	ldr	r3, [r7, #12]
 80005aa:	3301      	adds	r3, #1
 80005ac:	60fb      	str	r3, [r7, #12]
                 
                 ArrayOutput[outputCounterIndex]=0;
 80005ae:	68fb      	ldr	r3, [r7, #12]
 80005b0:	683a      	ldr	r2, [r7, #0]
 80005b2:	4413      	add	r3, r2
 80005b4:	2200      	movs	r2, #0
 80005b6:	701a      	strb	r2, [r3, #0]
                 outputCounterIndex++;
 80005b8:	68fb      	ldr	r3, [r7, #12]
 80005ba:	3301      	adds	r3, #1
 80005bc:	60fb      	str	r3, [r7, #12]
                 
                 ArrayOutput[outputCounterIndex]=1;
 80005be:	68fb      	ldr	r3, [r7, #12]
 80005c0:	683a      	ldr	r2, [r7, #0]
 80005c2:	4413      	add	r3, r2
 80005c4:	2201      	movs	r2, #1
 80005c6:	701a      	strb	r2, [r3, #0]
                 outputCounterIndex++;
 80005c8:	68fb      	ldr	r3, [r7, #12]
 80005ca:	3301      	adds	r3, #1
 80005cc:	60fb      	str	r3, [r7, #12]
                 ArrayOutput[outputCounterIndex]=1;
 80005ce:	68fb      	ldr	r3, [r7, #12]
 80005d0:	683a      	ldr	r2, [r7, #0]
 80005d2:	4413      	add	r3, r2
 80005d4:	2201      	movs	r2, #1
 80005d6:	701a      	strb	r2, [r3, #0]
                 outputCounterIndex++;
 80005d8:	68fb      	ldr	r3, [r7, #12]
 80005da:	3301      	adds	r3, #1
 80005dc:	60fb      	str	r3, [r7, #12]
                 ArrayOutput[outputCounterIndex]=1;
 80005de:	68fb      	ldr	r3, [r7, #12]
 80005e0:	683a      	ldr	r2, [r7, #0]
 80005e2:	4413      	add	r3, r2
 80005e4:	2201      	movs	r2, #1
 80005e6:	701a      	strb	r2, [r3, #0]
                 outputCounterIndex++;
 80005e8:	68fb      	ldr	r3, [r7, #12]
 80005ea:	3301      	adds	r3, #1
 80005ec:	60fb      	str	r3, [r7, #12]
                 
                 ArrayOutput[outputCounterIndex]=0;
 80005ee:	68fb      	ldr	r3, [r7, #12]
 80005f0:	683a      	ldr	r2, [r7, #0]
 80005f2:	4413      	add	r3, r2
 80005f4:	2200      	movs	r2, #0
 80005f6:	701a      	strb	r2, [r3, #0]
                 outputCounterIndex++;
 80005f8:	68fb      	ldr	r3, [r7, #12]
 80005fa:	3301      	adds	r3, #1
 80005fc:	60fb      	str	r3, [r7, #12]
                 
                 ArrayOutput[outputCounterIndex]=1;
 80005fe:	68fb      	ldr	r3, [r7, #12]
 8000600:	683a      	ldr	r2, [r7, #0]
 8000602:	4413      	add	r3, r2
 8000604:	2201      	movs	r2, #1
 8000606:	701a      	strb	r2, [r3, #0]
                 outputCounterIndex++;
 8000608:	68fb      	ldr	r3, [r7, #12]
 800060a:	3301      	adds	r3, #1
 800060c:	60fb      	str	r3, [r7, #12]
                 ArrayOutput[outputCounterIndex]=1;
 800060e:	68fb      	ldr	r3, [r7, #12]
 8000610:	683a      	ldr	r2, [r7, #0]
 8000612:	4413      	add	r3, r2
 8000614:	2201      	movs	r2, #1
 8000616:	701a      	strb	r2, [r3, #0]
                 outputCounterIndex++;
 8000618:	68fb      	ldr	r3, [r7, #12]
 800061a:	3301      	adds	r3, #1
 800061c:	60fb      	str	r3, [r7, #12]
                 ArrayOutput[outputCounterIndex]=1;
 800061e:	68fb      	ldr	r3, [r7, #12]
 8000620:	683a      	ldr	r2, [r7, #0]
 8000622:	4413      	add	r3, r2
 8000624:	2201      	movs	r2, #1
 8000626:	701a      	strb	r2, [r3, #0]
                 outputCounterIndex++;
 8000628:	68fb      	ldr	r3, [r7, #12]
 800062a:	3301      	adds	r3, #1
 800062c:	60fb      	str	r3, [r7, #12]
                 
                 ArrayOutput[outputCounterIndex]=0;
 800062e:	68fb      	ldr	r3, [r7, #12]
 8000630:	683a      	ldr	r2, [r7, #0]
 8000632:	4413      	add	r3, r2
 8000634:	2200      	movs	r2, #0
 8000636:	701a      	strb	r2, [r3, #0]
                 outputCounterIndex++;
 8000638:	68fb      	ldr	r3, [r7, #12]
 800063a:	3301      	adds	r3, #1
 800063c:	60fb      	str	r3, [r7, #12]
                 
                 ArrayOutput[outputCounterIndex]=1;
 800063e:	68fb      	ldr	r3, [r7, #12]
 8000640:	683a      	ldr	r2, [r7, #0]
 8000642:	4413      	add	r3, r2
 8000644:	2201      	movs	r2, #1
 8000646:	701a      	strb	r2, [r3, #0]
                 outputCounterIndex++;
 8000648:	68fb      	ldr	r3, [r7, #12]
 800064a:	3301      	adds	r3, #1
 800064c:	60fb      	str	r3, [r7, #12]
                 ArrayOutput[outputCounterIndex]=1;
 800064e:	68fb      	ldr	r3, [r7, #12]
 8000650:	683a      	ldr	r2, [r7, #0]
 8000652:	4413      	add	r3, r2
 8000654:	2201      	movs	r2, #1
 8000656:	701a      	strb	r2, [r3, #0]
                 outputCounterIndex++;
 8000658:	68fb      	ldr	r3, [r7, #12]
 800065a:	3301      	adds	r3, #1
 800065c:	60fb      	str	r3, [r7, #12]
                 ArrayOutput[outputCounterIndex]=1;
 800065e:	68fb      	ldr	r3, [r7, #12]
 8000660:	683a      	ldr	r2, [r7, #0]
 8000662:	4413      	add	r3, r2
 8000664:	2201      	movs	r2, #1
 8000666:	701a      	strb	r2, [r3, #0]
                 outputCounterIndex++;
 8000668:	68fb      	ldr	r3, [r7, #12]
 800066a:	3301      	adds	r3, #1
 800066c:	60fb      	str	r3, [r7, #12]
                 
                 ArrayOutput[outputCounterIndex]=0;
 800066e:	68fb      	ldr	r3, [r7, #12]
 8000670:	683a      	ldr	r2, [r7, #0]
 8000672:	4413      	add	r3, r2
 8000674:	2200      	movs	r2, #0
 8000676:	701a      	strb	r2, [r3, #0]
                 outputCounterIndex++;
 8000678:	68fb      	ldr	r3, [r7, #12]
 800067a:	3301      	adds	r3, #1
 800067c:	60fb      	str	r3, [r7, #12]
                 
                 counterIndex++;
 800067e:	693b      	ldr	r3, [r7, #16]
 8000680:	3301      	adds	r3, #1
 8000682:	613b      	str	r3, [r7, #16]
                break;
 8000684:	f000 bc20 	b.w	8000ec8 <ArrayToMorse+0x9fc>
            case 1:
                 ArrayOutput[outputCounterIndex]=1;
 8000688:	68fb      	ldr	r3, [r7, #12]
 800068a:	683a      	ldr	r2, [r7, #0]
 800068c:	4413      	add	r3, r2
 800068e:	2201      	movs	r2, #1
 8000690:	701a      	strb	r2, [r3, #0]
                 outputCounterIndex++;
 8000692:	68fb      	ldr	r3, [r7, #12]
 8000694:	3301      	adds	r3, #1
 8000696:	60fb      	str	r3, [r7, #12]
                 
                 ArrayOutput[outputCounterIndex]=0;
 8000698:	68fb      	ldr	r3, [r7, #12]
 800069a:	683a      	ldr	r2, [r7, #0]
 800069c:	4413      	add	r3, r2
 800069e:	2200      	movs	r2, #0
 80006a0:	701a      	strb	r2, [r3, #0]
                 outputCounterIndex++;
 80006a2:	68fb      	ldr	r3, [r7, #12]
 80006a4:	3301      	adds	r3, #1
 80006a6:	60fb      	str	r3, [r7, #12]
                 
                 ArrayOutput[outputCounterIndex]=1;
 80006a8:	68fb      	ldr	r3, [r7, #12]
 80006aa:	683a      	ldr	r2, [r7, #0]
 80006ac:	4413      	add	r3, r2
 80006ae:	2201      	movs	r2, #1
 80006b0:	701a      	strb	r2, [r3, #0]
                 outputCounterIndex++;
 80006b2:	68fb      	ldr	r3, [r7, #12]
 80006b4:	3301      	adds	r3, #1
 80006b6:	60fb      	str	r3, [r7, #12]
                 ArrayOutput[outputCounterIndex]=1;
 80006b8:	68fb      	ldr	r3, [r7, #12]
 80006ba:	683a      	ldr	r2, [r7, #0]
 80006bc:	4413      	add	r3, r2
 80006be:	2201      	movs	r2, #1
 80006c0:	701a      	strb	r2, [r3, #0]
                 outputCounterIndex++;
 80006c2:	68fb      	ldr	r3, [r7, #12]
 80006c4:	3301      	adds	r3, #1
 80006c6:	60fb      	str	r3, [r7, #12]
                 ArrayOutput[outputCounterIndex]=1;
 80006c8:	68fb      	ldr	r3, [r7, #12]
 80006ca:	683a      	ldr	r2, [r7, #0]
 80006cc:	4413      	add	r3, r2
 80006ce:	2201      	movs	r2, #1
 80006d0:	701a      	strb	r2, [r3, #0]
                 outputCounterIndex++;
 80006d2:	68fb      	ldr	r3, [r7, #12]
 80006d4:	3301      	adds	r3, #1
 80006d6:	60fb      	str	r3, [r7, #12]
                 
                 ArrayOutput[outputCounterIndex]=0;
 80006d8:	68fb      	ldr	r3, [r7, #12]
 80006da:	683a      	ldr	r2, [r7, #0]
 80006dc:	4413      	add	r3, r2
 80006de:	2200      	movs	r2, #0
 80006e0:	701a      	strb	r2, [r3, #0]
                 outputCounterIndex++;
 80006e2:	68fb      	ldr	r3, [r7, #12]
 80006e4:	3301      	adds	r3, #1
 80006e6:	60fb      	str	r3, [r7, #12]
                 
                 ArrayOutput[outputCounterIndex]=1;
 80006e8:	68fb      	ldr	r3, [r7, #12]
 80006ea:	683a      	ldr	r2, [r7, #0]
 80006ec:	4413      	add	r3, r2
 80006ee:	2201      	movs	r2, #1
 80006f0:	701a      	strb	r2, [r3, #0]
                 outputCounterIndex++;
 80006f2:	68fb      	ldr	r3, [r7, #12]
 80006f4:	3301      	adds	r3, #1
 80006f6:	60fb      	str	r3, [r7, #12]
                 ArrayOutput[outputCounterIndex]=1;
 80006f8:	68fb      	ldr	r3, [r7, #12]
 80006fa:	683a      	ldr	r2, [r7, #0]
 80006fc:	4413      	add	r3, r2
 80006fe:	2201      	movs	r2, #1
 8000700:	701a      	strb	r2, [r3, #0]
                 outputCounterIndex++;
 8000702:	68fb      	ldr	r3, [r7, #12]
 8000704:	3301      	adds	r3, #1
 8000706:	60fb      	str	r3, [r7, #12]
                 ArrayOutput[outputCounterIndex]=1;
 8000708:	68fb      	ldr	r3, [r7, #12]
 800070a:	683a      	ldr	r2, [r7, #0]
 800070c:	4413      	add	r3, r2
 800070e:	2201      	movs	r2, #1
 8000710:	701a      	strb	r2, [r3, #0]
                 outputCounterIndex++;
 8000712:	68fb      	ldr	r3, [r7, #12]
 8000714:	3301      	adds	r3, #1
 8000716:	60fb      	str	r3, [r7, #12]
                 
                 ArrayOutput[outputCounterIndex]=0;
 8000718:	68fb      	ldr	r3, [r7, #12]
 800071a:	683a      	ldr	r2, [r7, #0]
 800071c:	4413      	add	r3, r2
 800071e:	2200      	movs	r2, #0
 8000720:	701a      	strb	r2, [r3, #0]
                 outputCounterIndex++;
 8000722:	68fb      	ldr	r3, [r7, #12]
 8000724:	3301      	adds	r3, #1
 8000726:	60fb      	str	r3, [r7, #12]
                 
                 ArrayOutput[outputCounterIndex]=1;
 8000728:	68fb      	ldr	r3, [r7, #12]
 800072a:	683a      	ldr	r2, [r7, #0]
 800072c:	4413      	add	r3, r2
 800072e:	2201      	movs	r2, #1
 8000730:	701a      	strb	r2, [r3, #0]
                 outputCounterIndex++;
 8000732:	68fb      	ldr	r3, [r7, #12]
 8000734:	3301      	adds	r3, #1
 8000736:	60fb      	str	r3, [r7, #12]
                 ArrayOutput[outputCounterIndex]=1;
 8000738:	68fb      	ldr	r3, [r7, #12]
 800073a:	683a      	ldr	r2, [r7, #0]
 800073c:	4413      	add	r3, r2
 800073e:	2201      	movs	r2, #1
 8000740:	701a      	strb	r2, [r3, #0]
                 outputCounterIndex++;
 8000742:	68fb      	ldr	r3, [r7, #12]
 8000744:	3301      	adds	r3, #1
 8000746:	60fb      	str	r3, [r7, #12]
                 ArrayOutput[outputCounterIndex]=1;
 8000748:	68fb      	ldr	r3, [r7, #12]
 800074a:	683a      	ldr	r2, [r7, #0]
 800074c:	4413      	add	r3, r2
 800074e:	2201      	movs	r2, #1
 8000750:	701a      	strb	r2, [r3, #0]
                 outputCounterIndex++;
 8000752:	68fb      	ldr	r3, [r7, #12]
 8000754:	3301      	adds	r3, #1
 8000756:	60fb      	str	r3, [r7, #12]
                 
                 ArrayOutput[outputCounterIndex]=0;
 8000758:	68fb      	ldr	r3, [r7, #12]
 800075a:	683a      	ldr	r2, [r7, #0]
 800075c:	4413      	add	r3, r2
 800075e:	2200      	movs	r2, #0
 8000760:	701a      	strb	r2, [r3, #0]
                 outputCounterIndex++;
 8000762:	68fb      	ldr	r3, [r7, #12]
 8000764:	3301      	adds	r3, #1
 8000766:	60fb      	str	r3, [r7, #12]
                 
                 ArrayOutput[outputCounterIndex]=1;
 8000768:	68fb      	ldr	r3, [r7, #12]
 800076a:	683a      	ldr	r2, [r7, #0]
 800076c:	4413      	add	r3, r2
 800076e:	2201      	movs	r2, #1
 8000770:	701a      	strb	r2, [r3, #0]
                 outputCounterIndex++;
 8000772:	68fb      	ldr	r3, [r7, #12]
 8000774:	3301      	adds	r3, #1
 8000776:	60fb      	str	r3, [r7, #12]
                 ArrayOutput[outputCounterIndex]=1;
 8000778:	68fb      	ldr	r3, [r7, #12]
 800077a:	683a      	ldr	r2, [r7, #0]
 800077c:	4413      	add	r3, r2
 800077e:	2201      	movs	r2, #1
 8000780:	701a      	strb	r2, [r3, #0]
                 outputCounterIndex++;
 8000782:	68fb      	ldr	r3, [r7, #12]
 8000784:	3301      	adds	r3, #1
 8000786:	60fb      	str	r3, [r7, #12]
                 ArrayOutput[outputCounterIndex]=1;
 8000788:	68fb      	ldr	r3, [r7, #12]
 800078a:	683a      	ldr	r2, [r7, #0]
 800078c:	4413      	add	r3, r2
 800078e:	2201      	movs	r2, #1
 8000790:	701a      	strb	r2, [r3, #0]
                 outputCounterIndex++;
 8000792:	68fb      	ldr	r3, [r7, #12]
 8000794:	3301      	adds	r3, #1
 8000796:	60fb      	str	r3, [r7, #12]
                 
                 ArrayOutput[outputCounterIndex]=0;
 8000798:	68fb      	ldr	r3, [r7, #12]
 800079a:	683a      	ldr	r2, [r7, #0]
 800079c:	4413      	add	r3, r2
 800079e:	2200      	movs	r2, #0
 80007a0:	701a      	strb	r2, [r3, #0]
                 outputCounterIndex++;
 80007a2:	68fb      	ldr	r3, [r7, #12]
 80007a4:	3301      	adds	r3, #1
 80007a6:	60fb      	str	r3, [r7, #12]
                 counterIndex++;
 80007a8:	693b      	ldr	r3, [r7, #16]
 80007aa:	3301      	adds	r3, #1
 80007ac:	613b      	str	r3, [r7, #16]
                break;
 80007ae:	e38b      	b.n	8000ec8 <ArrayToMorse+0x9fc>
            case 2:
                 ArrayOutput[outputCounterIndex]=1;
 80007b0:	68fb      	ldr	r3, [r7, #12]
 80007b2:	683a      	ldr	r2, [r7, #0]
 80007b4:	4413      	add	r3, r2
 80007b6:	2201      	movs	r2, #1
 80007b8:	701a      	strb	r2, [r3, #0]
                 outputCounterIndex++;
 80007ba:	68fb      	ldr	r3, [r7, #12]
 80007bc:	3301      	adds	r3, #1
 80007be:	60fb      	str	r3, [r7, #12]
                 
                 ArrayOutput[outputCounterIndex]=0;
 80007c0:	68fb      	ldr	r3, [r7, #12]
 80007c2:	683a      	ldr	r2, [r7, #0]
 80007c4:	4413      	add	r3, r2
 80007c6:	2200      	movs	r2, #0
 80007c8:	701a      	strb	r2, [r3, #0]
                 outputCounterIndex++;
 80007ca:	68fb      	ldr	r3, [r7, #12]
 80007cc:	3301      	adds	r3, #1
 80007ce:	60fb      	str	r3, [r7, #12]
                 
                 ArrayOutput[outputCounterIndex]=1;
 80007d0:	68fb      	ldr	r3, [r7, #12]
 80007d2:	683a      	ldr	r2, [r7, #0]
 80007d4:	4413      	add	r3, r2
 80007d6:	2201      	movs	r2, #1
 80007d8:	701a      	strb	r2, [r3, #0]
                 outputCounterIndex++;
 80007da:	68fb      	ldr	r3, [r7, #12]
 80007dc:	3301      	adds	r3, #1
 80007de:	60fb      	str	r3, [r7, #12]
                 
                 ArrayOutput[outputCounterIndex]=0;
 80007e0:	68fb      	ldr	r3, [r7, #12]
 80007e2:	683a      	ldr	r2, [r7, #0]
 80007e4:	4413      	add	r3, r2
 80007e6:	2200      	movs	r2, #0
 80007e8:	701a      	strb	r2, [r3, #0]
                 outputCounterIndex++;
 80007ea:	68fb      	ldr	r3, [r7, #12]
 80007ec:	3301      	adds	r3, #1
 80007ee:	60fb      	str	r3, [r7, #12]
                 
                 ArrayOutput[outputCounterIndex]=1;
 80007f0:	68fb      	ldr	r3, [r7, #12]
 80007f2:	683a      	ldr	r2, [r7, #0]
 80007f4:	4413      	add	r3, r2
 80007f6:	2201      	movs	r2, #1
 80007f8:	701a      	strb	r2, [r3, #0]
                 outputCounterIndex++;
 80007fa:	68fb      	ldr	r3, [r7, #12]
 80007fc:	3301      	adds	r3, #1
 80007fe:	60fb      	str	r3, [r7, #12]
                 ArrayOutput[outputCounterIndex]=1;
 8000800:	68fb      	ldr	r3, [r7, #12]
 8000802:	683a      	ldr	r2, [r7, #0]
 8000804:	4413      	add	r3, r2
 8000806:	2201      	movs	r2, #1
 8000808:	701a      	strb	r2, [r3, #0]
                 outputCounterIndex++;
 800080a:	68fb      	ldr	r3, [r7, #12]
 800080c:	3301      	adds	r3, #1
 800080e:	60fb      	str	r3, [r7, #12]
                 ArrayOutput[outputCounterIndex]=1;
 8000810:	68fb      	ldr	r3, [r7, #12]
 8000812:	683a      	ldr	r2, [r7, #0]
 8000814:	4413      	add	r3, r2
 8000816:	2201      	movs	r2, #1
 8000818:	701a      	strb	r2, [r3, #0]
                 outputCounterIndex++;
 800081a:	68fb      	ldr	r3, [r7, #12]
 800081c:	3301      	adds	r3, #1
 800081e:	60fb      	str	r3, [r7, #12]
                 
                 ArrayOutput[outputCounterIndex]=0;
 8000820:	68fb      	ldr	r3, [r7, #12]
 8000822:	683a      	ldr	r2, [r7, #0]
 8000824:	4413      	add	r3, r2
 8000826:	2200      	movs	r2, #0
 8000828:	701a      	strb	r2, [r3, #0]
                 outputCounterIndex++;
 800082a:	68fb      	ldr	r3, [r7, #12]
 800082c:	3301      	adds	r3, #1
 800082e:	60fb      	str	r3, [r7, #12]
                 
                 ArrayOutput[outputCounterIndex]=1;
 8000830:	68fb      	ldr	r3, [r7, #12]
 8000832:	683a      	ldr	r2, [r7, #0]
 8000834:	4413      	add	r3, r2
 8000836:	2201      	movs	r2, #1
 8000838:	701a      	strb	r2, [r3, #0]
                 outputCounterIndex++;
 800083a:	68fb      	ldr	r3, [r7, #12]
 800083c:	3301      	adds	r3, #1
 800083e:	60fb      	str	r3, [r7, #12]
                 ArrayOutput[outputCounterIndex]=1;
 8000840:	68fb      	ldr	r3, [r7, #12]
 8000842:	683a      	ldr	r2, [r7, #0]
 8000844:	4413      	add	r3, r2
 8000846:	2201      	movs	r2, #1
 8000848:	701a      	strb	r2, [r3, #0]
                 outputCounterIndex++;
 800084a:	68fb      	ldr	r3, [r7, #12]
 800084c:	3301      	adds	r3, #1
 800084e:	60fb      	str	r3, [r7, #12]
                 ArrayOutput[outputCounterIndex]=1;
 8000850:	68fb      	ldr	r3, [r7, #12]
 8000852:	683a      	ldr	r2, [r7, #0]
 8000854:	4413      	add	r3, r2
 8000856:	2201      	movs	r2, #1
 8000858:	701a      	strb	r2, [r3, #0]
                 outputCounterIndex++;
 800085a:	68fb      	ldr	r3, [r7, #12]
 800085c:	3301      	adds	r3, #1
 800085e:	60fb      	str	r3, [r7, #12]
                 
                 ArrayOutput[outputCounterIndex]=0;
 8000860:	68fb      	ldr	r3, [r7, #12]
 8000862:	683a      	ldr	r2, [r7, #0]
 8000864:	4413      	add	r3, r2
 8000866:	2200      	movs	r2, #0
 8000868:	701a      	strb	r2, [r3, #0]
                 outputCounterIndex++;
 800086a:	68fb      	ldr	r3, [r7, #12]
 800086c:	3301      	adds	r3, #1
 800086e:	60fb      	str	r3, [r7, #12]
                 
                 ArrayOutput[outputCounterIndex]=1;
 8000870:	68fb      	ldr	r3, [r7, #12]
 8000872:	683a      	ldr	r2, [r7, #0]
 8000874:	4413      	add	r3, r2
 8000876:	2201      	movs	r2, #1
 8000878:	701a      	strb	r2, [r3, #0]
                 outputCounterIndex++;
 800087a:	68fb      	ldr	r3, [r7, #12]
 800087c:	3301      	adds	r3, #1
 800087e:	60fb      	str	r3, [r7, #12]
                 ArrayOutput[outputCounterIndex]=1;
 8000880:	68fb      	ldr	r3, [r7, #12]
 8000882:	683a      	ldr	r2, [r7, #0]
 8000884:	4413      	add	r3, r2
 8000886:	2201      	movs	r2, #1
 8000888:	701a      	strb	r2, [r3, #0]
                 outputCounterIndex++;
 800088a:	68fb      	ldr	r3, [r7, #12]
 800088c:	3301      	adds	r3, #1
 800088e:	60fb      	str	r3, [r7, #12]
                 ArrayOutput[outputCounterIndex]=1;
 8000890:	68fb      	ldr	r3, [r7, #12]
 8000892:	683a      	ldr	r2, [r7, #0]
 8000894:	4413      	add	r3, r2
 8000896:	2201      	movs	r2, #1
 8000898:	701a      	strb	r2, [r3, #0]
                 outputCounterIndex++;
 800089a:	68fb      	ldr	r3, [r7, #12]
 800089c:	3301      	adds	r3, #1
 800089e:	60fb      	str	r3, [r7, #12]
                 
                 ArrayOutput[outputCounterIndex]=0;
 80008a0:	68fb      	ldr	r3, [r7, #12]
 80008a2:	683a      	ldr	r2, [r7, #0]
 80008a4:	4413      	add	r3, r2
 80008a6:	2200      	movs	r2, #0
 80008a8:	701a      	strb	r2, [r3, #0]
                 outputCounterIndex++;
 80008aa:	68fb      	ldr	r3, [r7, #12]
 80008ac:	3301      	adds	r3, #1
 80008ae:	60fb      	str	r3, [r7, #12]
                 
                 counterIndex++;
 80008b0:	693b      	ldr	r3, [r7, #16]
 80008b2:	3301      	adds	r3, #1
 80008b4:	613b      	str	r3, [r7, #16]
                break;
 80008b6:	e307      	b.n	8000ec8 <ArrayToMorse+0x9fc>
            case 3: 
                 ArrayOutput[outputCounterIndex]=1;
 80008b8:	68fb      	ldr	r3, [r7, #12]
 80008ba:	683a      	ldr	r2, [r7, #0]
 80008bc:	4413      	add	r3, r2
 80008be:	2201      	movs	r2, #1
 80008c0:	701a      	strb	r2, [r3, #0]
                 outputCounterIndex++;
 80008c2:	68fb      	ldr	r3, [r7, #12]
 80008c4:	3301      	adds	r3, #1
 80008c6:	60fb      	str	r3, [r7, #12]
                 
                 ArrayOutput[outputCounterIndex]=0;
 80008c8:	68fb      	ldr	r3, [r7, #12]
 80008ca:	683a      	ldr	r2, [r7, #0]
 80008cc:	4413      	add	r3, r2
 80008ce:	2200      	movs	r2, #0
 80008d0:	701a      	strb	r2, [r3, #0]
                 outputCounterIndex++;
 80008d2:	68fb      	ldr	r3, [r7, #12]
 80008d4:	3301      	adds	r3, #1
 80008d6:	60fb      	str	r3, [r7, #12]
                 
                 ArrayOutput[outputCounterIndex]=1;
 80008d8:	68fb      	ldr	r3, [r7, #12]
 80008da:	683a      	ldr	r2, [r7, #0]
 80008dc:	4413      	add	r3, r2
 80008de:	2201      	movs	r2, #1
 80008e0:	701a      	strb	r2, [r3, #0]
                 outputCounterIndex++;
 80008e2:	68fb      	ldr	r3, [r7, #12]
 80008e4:	3301      	adds	r3, #1
 80008e6:	60fb      	str	r3, [r7, #12]
                 
                 ArrayOutput[outputCounterIndex]=0;
 80008e8:	68fb      	ldr	r3, [r7, #12]
 80008ea:	683a      	ldr	r2, [r7, #0]
 80008ec:	4413      	add	r3, r2
 80008ee:	2200      	movs	r2, #0
 80008f0:	701a      	strb	r2, [r3, #0]
                 outputCounterIndex++;
 80008f2:	68fb      	ldr	r3, [r7, #12]
 80008f4:	3301      	adds	r3, #1
 80008f6:	60fb      	str	r3, [r7, #12]
                 
                 ArrayOutput[outputCounterIndex]=1;
 80008f8:	68fb      	ldr	r3, [r7, #12]
 80008fa:	683a      	ldr	r2, [r7, #0]
 80008fc:	4413      	add	r3, r2
 80008fe:	2201      	movs	r2, #1
 8000900:	701a      	strb	r2, [r3, #0]
                 outputCounterIndex++;
 8000902:	68fb      	ldr	r3, [r7, #12]
 8000904:	3301      	adds	r3, #1
 8000906:	60fb      	str	r3, [r7, #12]
                 
                 ArrayOutput[outputCounterIndex]=0;
 8000908:	68fb      	ldr	r3, [r7, #12]
 800090a:	683a      	ldr	r2, [r7, #0]
 800090c:	4413      	add	r3, r2
 800090e:	2200      	movs	r2, #0
 8000910:	701a      	strb	r2, [r3, #0]
                 outputCounterIndex++;
 8000912:	68fb      	ldr	r3, [r7, #12]
 8000914:	3301      	adds	r3, #1
 8000916:	60fb      	str	r3, [r7, #12]
                 
                 ArrayOutput[outputCounterIndex]=1;
 8000918:	68fb      	ldr	r3, [r7, #12]
 800091a:	683a      	ldr	r2, [r7, #0]
 800091c:	4413      	add	r3, r2
 800091e:	2201      	movs	r2, #1
 8000920:	701a      	strb	r2, [r3, #0]
                 outputCounterIndex++;
 8000922:	68fb      	ldr	r3, [r7, #12]
 8000924:	3301      	adds	r3, #1
 8000926:	60fb      	str	r3, [r7, #12]
                 ArrayOutput[outputCounterIndex]=1;
 8000928:	68fb      	ldr	r3, [r7, #12]
 800092a:	683a      	ldr	r2, [r7, #0]
 800092c:	4413      	add	r3, r2
 800092e:	2201      	movs	r2, #1
 8000930:	701a      	strb	r2, [r3, #0]
                 outputCounterIndex++;
 8000932:	68fb      	ldr	r3, [r7, #12]
 8000934:	3301      	adds	r3, #1
 8000936:	60fb      	str	r3, [r7, #12]
                 ArrayOutput[outputCounterIndex]=1;
 8000938:	68fb      	ldr	r3, [r7, #12]
 800093a:	683a      	ldr	r2, [r7, #0]
 800093c:	4413      	add	r3, r2
 800093e:	2201      	movs	r2, #1
 8000940:	701a      	strb	r2, [r3, #0]
                 outputCounterIndex++;
 8000942:	68fb      	ldr	r3, [r7, #12]
 8000944:	3301      	adds	r3, #1
 8000946:	60fb      	str	r3, [r7, #12]
                 
                 ArrayOutput[outputCounterIndex]=0;
 8000948:	68fb      	ldr	r3, [r7, #12]
 800094a:	683a      	ldr	r2, [r7, #0]
 800094c:	4413      	add	r3, r2
 800094e:	2200      	movs	r2, #0
 8000950:	701a      	strb	r2, [r3, #0]
                 outputCounterIndex++;
 8000952:	68fb      	ldr	r3, [r7, #12]
 8000954:	3301      	adds	r3, #1
 8000956:	60fb      	str	r3, [r7, #12]
                 
                 ArrayOutput[outputCounterIndex]=1;
 8000958:	68fb      	ldr	r3, [r7, #12]
 800095a:	683a      	ldr	r2, [r7, #0]
 800095c:	4413      	add	r3, r2
 800095e:	2201      	movs	r2, #1
 8000960:	701a      	strb	r2, [r3, #0]
                 outputCounterIndex++;
 8000962:	68fb      	ldr	r3, [r7, #12]
 8000964:	3301      	adds	r3, #1
 8000966:	60fb      	str	r3, [r7, #12]
                 ArrayOutput[outputCounterIndex]=1;
 8000968:	68fb      	ldr	r3, [r7, #12]
 800096a:	683a      	ldr	r2, [r7, #0]
 800096c:	4413      	add	r3, r2
 800096e:	2201      	movs	r2, #1
 8000970:	701a      	strb	r2, [r3, #0]
                 outputCounterIndex++;
 8000972:	68fb      	ldr	r3, [r7, #12]
 8000974:	3301      	adds	r3, #1
 8000976:	60fb      	str	r3, [r7, #12]
                 ArrayOutput[outputCounterIndex]=1;
 8000978:	68fb      	ldr	r3, [r7, #12]
 800097a:	683a      	ldr	r2, [r7, #0]
 800097c:	4413      	add	r3, r2
 800097e:	2201      	movs	r2, #1
 8000980:	701a      	strb	r2, [r3, #0]
                 outputCounterIndex++;
 8000982:	68fb      	ldr	r3, [r7, #12]
 8000984:	3301      	adds	r3, #1
 8000986:	60fb      	str	r3, [r7, #12]
                 
                 ArrayOutput[outputCounterIndex]=0;
 8000988:	68fb      	ldr	r3, [r7, #12]
 800098a:	683a      	ldr	r2, [r7, #0]
 800098c:	4413      	add	r3, r2
 800098e:	2200      	movs	r2, #0
 8000990:	701a      	strb	r2, [r3, #0]
                 
                 
                counterIndex++;
 8000992:	693b      	ldr	r3, [r7, #16]
 8000994:	3301      	adds	r3, #1
 8000996:	613b      	str	r3, [r7, #16]
                break;
 8000998:	e296      	b.n	8000ec8 <ArrayToMorse+0x9fc>
            case 4:
                 ArrayOutput[outputCounterIndex]=1;
 800099a:	68fb      	ldr	r3, [r7, #12]
 800099c:	683a      	ldr	r2, [r7, #0]
 800099e:	4413      	add	r3, r2
 80009a0:	2201      	movs	r2, #1
 80009a2:	701a      	strb	r2, [r3, #0]
                 outputCounterIndex++;
 80009a4:	68fb      	ldr	r3, [r7, #12]
 80009a6:	3301      	adds	r3, #1
 80009a8:	60fb      	str	r3, [r7, #12]
                 
                 ArrayOutput[outputCounterIndex]=0;
 80009aa:	68fb      	ldr	r3, [r7, #12]
 80009ac:	683a      	ldr	r2, [r7, #0]
 80009ae:	4413      	add	r3, r2
 80009b0:	2200      	movs	r2, #0
 80009b2:	701a      	strb	r2, [r3, #0]
                 outputCounterIndex++;
 80009b4:	68fb      	ldr	r3, [r7, #12]
 80009b6:	3301      	adds	r3, #1
 80009b8:	60fb      	str	r3, [r7, #12]
                 
                 ArrayOutput[outputCounterIndex]=1;
 80009ba:	68fb      	ldr	r3, [r7, #12]
 80009bc:	683a      	ldr	r2, [r7, #0]
 80009be:	4413      	add	r3, r2
 80009c0:	2201      	movs	r2, #1
 80009c2:	701a      	strb	r2, [r3, #0]
                 outputCounterIndex++;
 80009c4:	68fb      	ldr	r3, [r7, #12]
 80009c6:	3301      	adds	r3, #1
 80009c8:	60fb      	str	r3, [r7, #12]
                 
                 ArrayOutput[outputCounterIndex]=0;
 80009ca:	68fb      	ldr	r3, [r7, #12]
 80009cc:	683a      	ldr	r2, [r7, #0]
 80009ce:	4413      	add	r3, r2
 80009d0:	2200      	movs	r2, #0
 80009d2:	701a      	strb	r2, [r3, #0]
                 outputCounterIndex++;
 80009d4:	68fb      	ldr	r3, [r7, #12]
 80009d6:	3301      	adds	r3, #1
 80009d8:	60fb      	str	r3, [r7, #12]
                 
                 ArrayOutput[outputCounterIndex]=1;
 80009da:	68fb      	ldr	r3, [r7, #12]
 80009dc:	683a      	ldr	r2, [r7, #0]
 80009de:	4413      	add	r3, r2
 80009e0:	2201      	movs	r2, #1
 80009e2:	701a      	strb	r2, [r3, #0]
                 outputCounterIndex++;
 80009e4:	68fb      	ldr	r3, [r7, #12]
 80009e6:	3301      	adds	r3, #1
 80009e8:	60fb      	str	r3, [r7, #12]
                 
                 ArrayOutput[outputCounterIndex]=0;
 80009ea:	68fb      	ldr	r3, [r7, #12]
 80009ec:	683a      	ldr	r2, [r7, #0]
 80009ee:	4413      	add	r3, r2
 80009f0:	2200      	movs	r2, #0
 80009f2:	701a      	strb	r2, [r3, #0]
                 
                 ArrayOutput[outputCounterIndex]=1;
 80009f4:	68fb      	ldr	r3, [r7, #12]
 80009f6:	683a      	ldr	r2, [r7, #0]
 80009f8:	4413      	add	r3, r2
 80009fa:	2201      	movs	r2, #1
 80009fc:	701a      	strb	r2, [r3, #0]
                 outputCounterIndex++;
 80009fe:	68fb      	ldr	r3, [r7, #12]
 8000a00:	3301      	adds	r3, #1
 8000a02:	60fb      	str	r3, [r7, #12]
                 
                 ArrayOutput[outputCounterIndex]=0;
 8000a04:	68fb      	ldr	r3, [r7, #12]
 8000a06:	683a      	ldr	r2, [r7, #0]
 8000a08:	4413      	add	r3, r2
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	701a      	strb	r2, [r3, #0]
                 outputCounterIndex++;
 8000a0e:	68fb      	ldr	r3, [r7, #12]
 8000a10:	3301      	adds	r3, #1
 8000a12:	60fb      	str	r3, [r7, #12]
                 
                 ArrayOutput[outputCounterIndex]=1;
 8000a14:	68fb      	ldr	r3, [r7, #12]
 8000a16:	683a      	ldr	r2, [r7, #0]
 8000a18:	4413      	add	r3, r2
 8000a1a:	2201      	movs	r2, #1
 8000a1c:	701a      	strb	r2, [r3, #0]
                 outputCounterIndex++;
 8000a1e:	68fb      	ldr	r3, [r7, #12]
 8000a20:	3301      	adds	r3, #1
 8000a22:	60fb      	str	r3, [r7, #12]
                 ArrayOutput[outputCounterIndex]=1;
 8000a24:	68fb      	ldr	r3, [r7, #12]
 8000a26:	683a      	ldr	r2, [r7, #0]
 8000a28:	4413      	add	r3, r2
 8000a2a:	2201      	movs	r2, #1
 8000a2c:	701a      	strb	r2, [r3, #0]
                 outputCounterIndex++;
 8000a2e:	68fb      	ldr	r3, [r7, #12]
 8000a30:	3301      	adds	r3, #1
 8000a32:	60fb      	str	r3, [r7, #12]
                 ArrayOutput[outputCounterIndex]=1;
 8000a34:	68fb      	ldr	r3, [r7, #12]
 8000a36:	683a      	ldr	r2, [r7, #0]
 8000a38:	4413      	add	r3, r2
 8000a3a:	2201      	movs	r2, #1
 8000a3c:	701a      	strb	r2, [r3, #0]
                 outputCounterIndex++;
 8000a3e:	68fb      	ldr	r3, [r7, #12]
 8000a40:	3301      	adds	r3, #1
 8000a42:	60fb      	str	r3, [r7, #12]
                 
                 ArrayOutput[outputCounterIndex]=0;
 8000a44:	68fb      	ldr	r3, [r7, #12]
 8000a46:	683a      	ldr	r2, [r7, #0]
 8000a48:	4413      	add	r3, r2
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	701a      	strb	r2, [r3, #0]
                 
                 
                counterIndex++;
 8000a4e:	693b      	ldr	r3, [r7, #16]
 8000a50:	3301      	adds	r3, #1
 8000a52:	613b      	str	r3, [r7, #16]
                break;
 8000a54:	e238      	b.n	8000ec8 <ArrayToMorse+0x9fc>
            case 5:
                ArrayOutput[outputCounterIndex]=1;
 8000a56:	68fb      	ldr	r3, [r7, #12]
 8000a58:	683a      	ldr	r2, [r7, #0]
 8000a5a:	4413      	add	r3, r2
 8000a5c:	2201      	movs	r2, #1
 8000a5e:	701a      	strb	r2, [r3, #0]
                 outputCounterIndex++;
 8000a60:	68fb      	ldr	r3, [r7, #12]
 8000a62:	3301      	adds	r3, #1
 8000a64:	60fb      	str	r3, [r7, #12]
                 
                 ArrayOutput[outputCounterIndex]=0;
 8000a66:	68fb      	ldr	r3, [r7, #12]
 8000a68:	683a      	ldr	r2, [r7, #0]
 8000a6a:	4413      	add	r3, r2
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	701a      	strb	r2, [r3, #0]
                 outputCounterIndex++;
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	3301      	adds	r3, #1
 8000a74:	60fb      	str	r3, [r7, #12]
                 
                 ArrayOutput[outputCounterIndex]=1;
 8000a76:	68fb      	ldr	r3, [r7, #12]
 8000a78:	683a      	ldr	r2, [r7, #0]
 8000a7a:	4413      	add	r3, r2
 8000a7c:	2201      	movs	r2, #1
 8000a7e:	701a      	strb	r2, [r3, #0]
                 outputCounterIndex++;
 8000a80:	68fb      	ldr	r3, [r7, #12]
 8000a82:	3301      	adds	r3, #1
 8000a84:	60fb      	str	r3, [r7, #12]
                 
                 ArrayOutput[outputCounterIndex]=0;
 8000a86:	68fb      	ldr	r3, [r7, #12]
 8000a88:	683a      	ldr	r2, [r7, #0]
 8000a8a:	4413      	add	r3, r2
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	701a      	strb	r2, [r3, #0]
                 outputCounterIndex++;
 8000a90:	68fb      	ldr	r3, [r7, #12]
 8000a92:	3301      	adds	r3, #1
 8000a94:	60fb      	str	r3, [r7, #12]
                 
                 ArrayOutput[outputCounterIndex]=1;
 8000a96:	68fb      	ldr	r3, [r7, #12]
 8000a98:	683a      	ldr	r2, [r7, #0]
 8000a9a:	4413      	add	r3, r2
 8000a9c:	2201      	movs	r2, #1
 8000a9e:	701a      	strb	r2, [r3, #0]
                 outputCounterIndex++;
 8000aa0:	68fb      	ldr	r3, [r7, #12]
 8000aa2:	3301      	adds	r3, #1
 8000aa4:	60fb      	str	r3, [r7, #12]
                 
                 ArrayOutput[outputCounterIndex]=0;
 8000aa6:	68fb      	ldr	r3, [r7, #12]
 8000aa8:	683a      	ldr	r2, [r7, #0]
 8000aaa:	4413      	add	r3, r2
 8000aac:	2200      	movs	r2, #0
 8000aae:	701a      	strb	r2, [r3, #0]
                 
                 ArrayOutput[outputCounterIndex]=1;
 8000ab0:	68fb      	ldr	r3, [r7, #12]
 8000ab2:	683a      	ldr	r2, [r7, #0]
 8000ab4:	4413      	add	r3, r2
 8000ab6:	2201      	movs	r2, #1
 8000ab8:	701a      	strb	r2, [r3, #0]
                 outputCounterIndex++;
 8000aba:	68fb      	ldr	r3, [r7, #12]
 8000abc:	3301      	adds	r3, #1
 8000abe:	60fb      	str	r3, [r7, #12]
                 
                 ArrayOutput[outputCounterIndex]=0;
 8000ac0:	68fb      	ldr	r3, [r7, #12]
 8000ac2:	683a      	ldr	r2, [r7, #0]
 8000ac4:	4413      	add	r3, r2
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	701a      	strb	r2, [r3, #0]
                 
                 ArrayOutput[outputCounterIndex]=1;
 8000aca:	68fb      	ldr	r3, [r7, #12]
 8000acc:	683a      	ldr	r2, [r7, #0]
 8000ace:	4413      	add	r3, r2
 8000ad0:	2201      	movs	r2, #1
 8000ad2:	701a      	strb	r2, [r3, #0]
                 outputCounterIndex++;
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	3301      	adds	r3, #1
 8000ad8:	60fb      	str	r3, [r7, #12]
                 
                 ArrayOutput[outputCounterIndex]=0;
 8000ada:	68fb      	ldr	r3, [r7, #12]
 8000adc:	683a      	ldr	r2, [r7, #0]
 8000ade:	4413      	add	r3, r2
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	701a      	strb	r2, [r3, #0]
                counterIndex++;
 8000ae4:	693b      	ldr	r3, [r7, #16]
 8000ae6:	3301      	adds	r3, #1
 8000ae8:	613b      	str	r3, [r7, #16]
                break;
 8000aea:	e1ed      	b.n	8000ec8 <ArrayToMorse+0x9fc>
            case 6:
                 ArrayOutput[outputCounterIndex]=1;
 8000aec:	68fb      	ldr	r3, [r7, #12]
 8000aee:	683a      	ldr	r2, [r7, #0]
 8000af0:	4413      	add	r3, r2
 8000af2:	2201      	movs	r2, #1
 8000af4:	701a      	strb	r2, [r3, #0]
                 outputCounterIndex++;
 8000af6:	68fb      	ldr	r3, [r7, #12]
 8000af8:	3301      	adds	r3, #1
 8000afa:	60fb      	str	r3, [r7, #12]
                 ArrayOutput[outputCounterIndex]=1;
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	683a      	ldr	r2, [r7, #0]
 8000b00:	4413      	add	r3, r2
 8000b02:	2201      	movs	r2, #1
 8000b04:	701a      	strb	r2, [r3, #0]
                 outputCounterIndex++;
 8000b06:	68fb      	ldr	r3, [r7, #12]
 8000b08:	3301      	adds	r3, #1
 8000b0a:	60fb      	str	r3, [r7, #12]
                 ArrayOutput[outputCounterIndex]=1;
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	683a      	ldr	r2, [r7, #0]
 8000b10:	4413      	add	r3, r2
 8000b12:	2201      	movs	r2, #1
 8000b14:	701a      	strb	r2, [r3, #0]
                 outputCounterIndex++;
 8000b16:	68fb      	ldr	r3, [r7, #12]
 8000b18:	3301      	adds	r3, #1
 8000b1a:	60fb      	str	r3, [r7, #12]
                 
                 ArrayOutput[outputCounterIndex]=0;
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	683a      	ldr	r2, [r7, #0]
 8000b20:	4413      	add	r3, r2
 8000b22:	2200      	movs	r2, #0
 8000b24:	701a      	strb	r2, [r3, #0]
                 outputCounterIndex++;
 8000b26:	68fb      	ldr	r3, [r7, #12]
 8000b28:	3301      	adds	r3, #1
 8000b2a:	60fb      	str	r3, [r7, #12]
                 
                 ArrayOutput[outputCounterIndex]=1;
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	683a      	ldr	r2, [r7, #0]
 8000b30:	4413      	add	r3, r2
 8000b32:	2201      	movs	r2, #1
 8000b34:	701a      	strb	r2, [r3, #0]
                 outputCounterIndex++;
 8000b36:	68fb      	ldr	r3, [r7, #12]
 8000b38:	3301      	adds	r3, #1
 8000b3a:	60fb      	str	r3, [r7, #12]
                 
                 ArrayOutput[outputCounterIndex]=0;
 8000b3c:	68fb      	ldr	r3, [r7, #12]
 8000b3e:	683a      	ldr	r2, [r7, #0]
 8000b40:	4413      	add	r3, r2
 8000b42:	2200      	movs	r2, #0
 8000b44:	701a      	strb	r2, [r3, #0]
                 outputCounterIndex++;
 8000b46:	68fb      	ldr	r3, [r7, #12]
 8000b48:	3301      	adds	r3, #1
 8000b4a:	60fb      	str	r3, [r7, #12]
                 
                 ArrayOutput[outputCounterIndex]=1;
 8000b4c:	68fb      	ldr	r3, [r7, #12]
 8000b4e:	683a      	ldr	r2, [r7, #0]
 8000b50:	4413      	add	r3, r2
 8000b52:	2201      	movs	r2, #1
 8000b54:	701a      	strb	r2, [r3, #0]
                 outputCounterIndex++;
 8000b56:	68fb      	ldr	r3, [r7, #12]
 8000b58:	3301      	adds	r3, #1
 8000b5a:	60fb      	str	r3, [r7, #12]
                 
                 ArrayOutput[outputCounterIndex]=0;
 8000b5c:	68fb      	ldr	r3, [r7, #12]
 8000b5e:	683a      	ldr	r2, [r7, #0]
 8000b60:	4413      	add	r3, r2
 8000b62:	2200      	movs	r2, #0
 8000b64:	701a      	strb	r2, [r3, #0]
                 outputCounterIndex++;
 8000b66:	68fb      	ldr	r3, [r7, #12]
 8000b68:	3301      	adds	r3, #1
 8000b6a:	60fb      	str	r3, [r7, #12]
                 
                 ArrayOutput[outputCounterIndex]=1;
 8000b6c:	68fb      	ldr	r3, [r7, #12]
 8000b6e:	683a      	ldr	r2, [r7, #0]
 8000b70:	4413      	add	r3, r2
 8000b72:	2201      	movs	r2, #1
 8000b74:	701a      	strb	r2, [r3, #0]
                 outputCounterIndex++;
 8000b76:	68fb      	ldr	r3, [r7, #12]
 8000b78:	3301      	adds	r3, #1
 8000b7a:	60fb      	str	r3, [r7, #12]
                 
                 ArrayOutput[outputCounterIndex]=0;
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	683a      	ldr	r2, [r7, #0]
 8000b80:	4413      	add	r3, r2
 8000b82:	2200      	movs	r2, #0
 8000b84:	701a      	strb	r2, [r3, #0]
                 
                 ArrayOutput[outputCounterIndex]=1;
 8000b86:	68fb      	ldr	r3, [r7, #12]
 8000b88:	683a      	ldr	r2, [r7, #0]
 8000b8a:	4413      	add	r3, r2
 8000b8c:	2201      	movs	r2, #1
 8000b8e:	701a      	strb	r2, [r3, #0]
                 outputCounterIndex++;
 8000b90:	68fb      	ldr	r3, [r7, #12]
 8000b92:	3301      	adds	r3, #1
 8000b94:	60fb      	str	r3, [r7, #12]
                 
                 ArrayOutput[outputCounterIndex]=0;
 8000b96:	68fb      	ldr	r3, [r7, #12]
 8000b98:	683a      	ldr	r2, [r7, #0]
 8000b9a:	4413      	add	r3, r2
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	701a      	strb	r2, [r3, #0]
                 outputCounterIndex++;
 8000ba0:	68fb      	ldr	r3, [r7, #12]
 8000ba2:	3301      	adds	r3, #1
 8000ba4:	60fb      	str	r3, [r7, #12]
                counterIndex++;
 8000ba6:	693b      	ldr	r3, [r7, #16]
 8000ba8:	3301      	adds	r3, #1
 8000baa:	613b      	str	r3, [r7, #16]
                break;
 8000bac:	e18c      	b.n	8000ec8 <ArrayToMorse+0x9fc>
            case 7:
                 ArrayOutput[outputCounterIndex]=1;
 8000bae:	68fb      	ldr	r3, [r7, #12]
 8000bb0:	683a      	ldr	r2, [r7, #0]
 8000bb2:	4413      	add	r3, r2
 8000bb4:	2201      	movs	r2, #1
 8000bb6:	701a      	strb	r2, [r3, #0]
                 outputCounterIndex++;
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	3301      	adds	r3, #1
 8000bbc:	60fb      	str	r3, [r7, #12]
                 ArrayOutput[outputCounterIndex]=1;
 8000bbe:	68fb      	ldr	r3, [r7, #12]
 8000bc0:	683a      	ldr	r2, [r7, #0]
 8000bc2:	4413      	add	r3, r2
 8000bc4:	2201      	movs	r2, #1
 8000bc6:	701a      	strb	r2, [r3, #0]
                 outputCounterIndex++;
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	3301      	adds	r3, #1
 8000bcc:	60fb      	str	r3, [r7, #12]
                 ArrayOutput[outputCounterIndex]=1;
 8000bce:	68fb      	ldr	r3, [r7, #12]
 8000bd0:	683a      	ldr	r2, [r7, #0]
 8000bd2:	4413      	add	r3, r2
 8000bd4:	2201      	movs	r2, #1
 8000bd6:	701a      	strb	r2, [r3, #0]
                 outputCounterIndex++;
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	3301      	adds	r3, #1
 8000bdc:	60fb      	str	r3, [r7, #12]
                
                 ArrayOutput[outputCounterIndex]=0;
 8000bde:	68fb      	ldr	r3, [r7, #12]
 8000be0:	683a      	ldr	r2, [r7, #0]
 8000be2:	4413      	add	r3, r2
 8000be4:	2200      	movs	r2, #0
 8000be6:	701a      	strb	r2, [r3, #0]
                 outputCounterIndex++;
 8000be8:	68fb      	ldr	r3, [r7, #12]
 8000bea:	3301      	adds	r3, #1
 8000bec:	60fb      	str	r3, [r7, #12]
                
                 ArrayOutput[outputCounterIndex]=1;
 8000bee:	68fb      	ldr	r3, [r7, #12]
 8000bf0:	683a      	ldr	r2, [r7, #0]
 8000bf2:	4413      	add	r3, r2
 8000bf4:	2201      	movs	r2, #1
 8000bf6:	701a      	strb	r2, [r3, #0]
                 outputCounterIndex++;
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	3301      	adds	r3, #1
 8000bfc:	60fb      	str	r3, [r7, #12]
                 ArrayOutput[outputCounterIndex]=1;
 8000bfe:	68fb      	ldr	r3, [r7, #12]
 8000c00:	683a      	ldr	r2, [r7, #0]
 8000c02:	4413      	add	r3, r2
 8000c04:	2201      	movs	r2, #1
 8000c06:	701a      	strb	r2, [r3, #0]
                 outputCounterIndex++;
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	3301      	adds	r3, #1
 8000c0c:	60fb      	str	r3, [r7, #12]
                 ArrayOutput[outputCounterIndex]=1;
 8000c0e:	68fb      	ldr	r3, [r7, #12]
 8000c10:	683a      	ldr	r2, [r7, #0]
 8000c12:	4413      	add	r3, r2
 8000c14:	2201      	movs	r2, #1
 8000c16:	701a      	strb	r2, [r3, #0]
                 outputCounterIndex++;
 8000c18:	68fb      	ldr	r3, [r7, #12]
 8000c1a:	3301      	adds	r3, #1
 8000c1c:	60fb      	str	r3, [r7, #12]
                 
                 ArrayOutput[outputCounterIndex]=0;
 8000c1e:	68fb      	ldr	r3, [r7, #12]
 8000c20:	683a      	ldr	r2, [r7, #0]
 8000c22:	4413      	add	r3, r2
 8000c24:	2200      	movs	r2, #0
 8000c26:	701a      	strb	r2, [r3, #0]
                 outputCounterIndex++;
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	3301      	adds	r3, #1
 8000c2c:	60fb      	str	r3, [r7, #12]
                 
                 ArrayOutput[outputCounterIndex]=1;
 8000c2e:	68fb      	ldr	r3, [r7, #12]
 8000c30:	683a      	ldr	r2, [r7, #0]
 8000c32:	4413      	add	r3, r2
 8000c34:	2201      	movs	r2, #1
 8000c36:	701a      	strb	r2, [r3, #0]
                 outputCounterIndex++;
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	3301      	adds	r3, #1
 8000c3c:	60fb      	str	r3, [r7, #12]
                 
                 ArrayOutput[outputCounterIndex]=0;
 8000c3e:	68fb      	ldr	r3, [r7, #12]
 8000c40:	683a      	ldr	r2, [r7, #0]
 8000c42:	4413      	add	r3, r2
 8000c44:	2200      	movs	r2, #0
 8000c46:	701a      	strb	r2, [r3, #0]
                 outputCounterIndex++;
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	3301      	adds	r3, #1
 8000c4c:	60fb      	str	r3, [r7, #12]
                 
                 ArrayOutput[outputCounterIndex]=1;
 8000c4e:	68fb      	ldr	r3, [r7, #12]
 8000c50:	683a      	ldr	r2, [r7, #0]
 8000c52:	4413      	add	r3, r2
 8000c54:	2201      	movs	r2, #1
 8000c56:	701a      	strb	r2, [r3, #0]
                 outputCounterIndex++;
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	3301      	adds	r3, #1
 8000c5c:	60fb      	str	r3, [r7, #12]
                 
                 ArrayOutput[outputCounterIndex]=0;
 8000c5e:	68fb      	ldr	r3, [r7, #12]
 8000c60:	683a      	ldr	r2, [r7, #0]
 8000c62:	4413      	add	r3, r2
 8000c64:	2200      	movs	r2, #0
 8000c66:	701a      	strb	r2, [r3, #0]
                 
                 ArrayOutput[outputCounterIndex]=1;
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	683a      	ldr	r2, [r7, #0]
 8000c6c:	4413      	add	r3, r2
 8000c6e:	2201      	movs	r2, #1
 8000c70:	701a      	strb	r2, [r3, #0]
                 outputCounterIndex++;
 8000c72:	68fb      	ldr	r3, [r7, #12]
 8000c74:	3301      	adds	r3, #1
 8000c76:	60fb      	str	r3, [r7, #12]
                 
                 ArrayOutput[outputCounterIndex]=0;
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	683a      	ldr	r2, [r7, #0]
 8000c7c:	4413      	add	r3, r2
 8000c7e:	2200      	movs	r2, #0
 8000c80:	701a      	strb	r2, [r3, #0]
                 
                counterIndex++;
 8000c82:	693b      	ldr	r3, [r7, #16]
 8000c84:	3301      	adds	r3, #1
 8000c86:	613b      	str	r3, [r7, #16]
                break;
 8000c88:	e11e      	b.n	8000ec8 <ArrayToMorse+0x9fc>
            case 8:
                 ArrayOutput[outputCounterIndex]=1;
 8000c8a:	68fb      	ldr	r3, [r7, #12]
 8000c8c:	683a      	ldr	r2, [r7, #0]
 8000c8e:	4413      	add	r3, r2
 8000c90:	2201      	movs	r2, #1
 8000c92:	701a      	strb	r2, [r3, #0]
                 outputCounterIndex++;
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	3301      	adds	r3, #1
 8000c98:	60fb      	str	r3, [r7, #12]
                 ArrayOutput[outputCounterIndex]=1;
 8000c9a:	68fb      	ldr	r3, [r7, #12]
 8000c9c:	683a      	ldr	r2, [r7, #0]
 8000c9e:	4413      	add	r3, r2
 8000ca0:	2201      	movs	r2, #1
 8000ca2:	701a      	strb	r2, [r3, #0]
                 outputCounterIndex++;
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	3301      	adds	r3, #1
 8000ca8:	60fb      	str	r3, [r7, #12]
                 ArrayOutput[outputCounterIndex]=1;
 8000caa:	68fb      	ldr	r3, [r7, #12]
 8000cac:	683a      	ldr	r2, [r7, #0]
 8000cae:	4413      	add	r3, r2
 8000cb0:	2201      	movs	r2, #1
 8000cb2:	701a      	strb	r2, [r3, #0]
                 outputCounterIndex++;
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	3301      	adds	r3, #1
 8000cb8:	60fb      	str	r3, [r7, #12]
                
                 ArrayOutput[outputCounterIndex]=0;
 8000cba:	68fb      	ldr	r3, [r7, #12]
 8000cbc:	683a      	ldr	r2, [r7, #0]
 8000cbe:	4413      	add	r3, r2
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	701a      	strb	r2, [r3, #0]
                 outputCounterIndex++;
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	3301      	adds	r3, #1
 8000cc8:	60fb      	str	r3, [r7, #12]
                
                 ArrayOutput[outputCounterIndex]=1;
 8000cca:	68fb      	ldr	r3, [r7, #12]
 8000ccc:	683a      	ldr	r2, [r7, #0]
 8000cce:	4413      	add	r3, r2
 8000cd0:	2201      	movs	r2, #1
 8000cd2:	701a      	strb	r2, [r3, #0]
                 outputCounterIndex++;
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	3301      	adds	r3, #1
 8000cd8:	60fb      	str	r3, [r7, #12]
                 ArrayOutput[outputCounterIndex]=1;
 8000cda:	68fb      	ldr	r3, [r7, #12]
 8000cdc:	683a      	ldr	r2, [r7, #0]
 8000cde:	4413      	add	r3, r2
 8000ce0:	2201      	movs	r2, #1
 8000ce2:	701a      	strb	r2, [r3, #0]
                 outputCounterIndex++;
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	3301      	adds	r3, #1
 8000ce8:	60fb      	str	r3, [r7, #12]
                 ArrayOutput[outputCounterIndex]=1;
 8000cea:	68fb      	ldr	r3, [r7, #12]
 8000cec:	683a      	ldr	r2, [r7, #0]
 8000cee:	4413      	add	r3, r2
 8000cf0:	2201      	movs	r2, #1
 8000cf2:	701a      	strb	r2, [r3, #0]
                 outputCounterIndex++;
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	3301      	adds	r3, #1
 8000cf8:	60fb      	str	r3, [r7, #12]
                 
                 ArrayOutput[outputCounterIndex]=0;
 8000cfa:	68fb      	ldr	r3, [r7, #12]
 8000cfc:	683a      	ldr	r2, [r7, #0]
 8000cfe:	4413      	add	r3, r2
 8000d00:	2200      	movs	r2, #0
 8000d02:	701a      	strb	r2, [r3, #0]
                 
                 ArrayOutput[outputCounterIndex]=1;
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	683a      	ldr	r2, [r7, #0]
 8000d08:	4413      	add	r3, r2
 8000d0a:	2201      	movs	r2, #1
 8000d0c:	701a      	strb	r2, [r3, #0]
                 outputCounterIndex++;
 8000d0e:	68fb      	ldr	r3, [r7, #12]
 8000d10:	3301      	adds	r3, #1
 8000d12:	60fb      	str	r3, [r7, #12]
                 ArrayOutput[outputCounterIndex]=1;
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	683a      	ldr	r2, [r7, #0]
 8000d18:	4413      	add	r3, r2
 8000d1a:	2201      	movs	r2, #1
 8000d1c:	701a      	strb	r2, [r3, #0]
                 outputCounterIndex++;
 8000d1e:	68fb      	ldr	r3, [r7, #12]
 8000d20:	3301      	adds	r3, #1
 8000d22:	60fb      	str	r3, [r7, #12]
                 ArrayOutput[outputCounterIndex]=1;
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	683a      	ldr	r2, [r7, #0]
 8000d28:	4413      	add	r3, r2
 8000d2a:	2201      	movs	r2, #1
 8000d2c:	701a      	strb	r2, [r3, #0]
                 outputCounterIndex++;
 8000d2e:	68fb      	ldr	r3, [r7, #12]
 8000d30:	3301      	adds	r3, #1
 8000d32:	60fb      	str	r3, [r7, #12]
                 
                 ArrayOutput[outputCounterIndex]=0;
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	683a      	ldr	r2, [r7, #0]
 8000d38:	4413      	add	r3, r2
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	701a      	strb	r2, [r3, #0]
                 outputCounterIndex++;
 8000d3e:	68fb      	ldr	r3, [r7, #12]
 8000d40:	3301      	adds	r3, #1
 8000d42:	60fb      	str	r3, [r7, #12]
                 
                 ArrayOutput[outputCounterIndex]=1;
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	683a      	ldr	r2, [r7, #0]
 8000d48:	4413      	add	r3, r2
 8000d4a:	2201      	movs	r2, #1
 8000d4c:	701a      	strb	r2, [r3, #0]
                 outputCounterIndex++;
 8000d4e:	68fb      	ldr	r3, [r7, #12]
 8000d50:	3301      	adds	r3, #1
 8000d52:	60fb      	str	r3, [r7, #12]
                 
                 ArrayOutput[outputCounterIndex]=0;
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	683a      	ldr	r2, [r7, #0]
 8000d58:	4413      	add	r3, r2
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	701a      	strb	r2, [r3, #0]
                 outputCounterIndex++;
 8000d5e:	68fb      	ldr	r3, [r7, #12]
 8000d60:	3301      	adds	r3, #1
 8000d62:	60fb      	str	r3, [r7, #12]
                 
                 ArrayOutput[outputCounterIndex]=1;
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	683a      	ldr	r2, [r7, #0]
 8000d68:	4413      	add	r3, r2
 8000d6a:	2201      	movs	r2, #1
 8000d6c:	701a      	strb	r2, [r3, #0]
                 outputCounterIndex++;
 8000d6e:	68fb      	ldr	r3, [r7, #12]
 8000d70:	3301      	adds	r3, #1
 8000d72:	60fb      	str	r3, [r7, #12]
                 
                 ArrayOutput[outputCounterIndex]=0;
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	683a      	ldr	r2, [r7, #0]
 8000d78:	4413      	add	r3, r2
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	701a      	strb	r2, [r3, #0]
                 outputCounterIndex++;
 8000d7e:	68fb      	ldr	r3, [r7, #12]
 8000d80:	3301      	adds	r3, #1
 8000d82:	60fb      	str	r3, [r7, #12]
                 
                counterIndex++;
 8000d84:	693b      	ldr	r3, [r7, #16]
 8000d86:	3301      	adds	r3, #1
 8000d88:	613b      	str	r3, [r7, #16]
                break;
 8000d8a:	e09d      	b.n	8000ec8 <ArrayToMorse+0x9fc>
            case 9:
                 ArrayOutput[outputCounterIndex]=1;
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	683a      	ldr	r2, [r7, #0]
 8000d90:	4413      	add	r3, r2
 8000d92:	2201      	movs	r2, #1
 8000d94:	701a      	strb	r2, [r3, #0]
                 outputCounterIndex++;
 8000d96:	68fb      	ldr	r3, [r7, #12]
 8000d98:	3301      	adds	r3, #1
 8000d9a:	60fb      	str	r3, [r7, #12]
                 ArrayOutput[outputCounterIndex]=1;
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	683a      	ldr	r2, [r7, #0]
 8000da0:	4413      	add	r3, r2
 8000da2:	2201      	movs	r2, #1
 8000da4:	701a      	strb	r2, [r3, #0]
                 outputCounterIndex++;
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	3301      	adds	r3, #1
 8000daa:	60fb      	str	r3, [r7, #12]
                 ArrayOutput[outputCounterIndex]=1;
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	683a      	ldr	r2, [r7, #0]
 8000db0:	4413      	add	r3, r2
 8000db2:	2201      	movs	r2, #1
 8000db4:	701a      	strb	r2, [r3, #0]
                 outputCounterIndex++;
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	3301      	adds	r3, #1
 8000dba:	60fb      	str	r3, [r7, #12]
                
                 ArrayOutput[outputCounterIndex]=0;
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	683a      	ldr	r2, [r7, #0]
 8000dc0:	4413      	add	r3, r2
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	701a      	strb	r2, [r3, #0]
                 outputCounterIndex++;
 8000dc6:	68fb      	ldr	r3, [r7, #12]
 8000dc8:	3301      	adds	r3, #1
 8000dca:	60fb      	str	r3, [r7, #12]
                
                 ArrayOutput[outputCounterIndex]=1;
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	683a      	ldr	r2, [r7, #0]
 8000dd0:	4413      	add	r3, r2
 8000dd2:	2201      	movs	r2, #1
 8000dd4:	701a      	strb	r2, [r3, #0]
                 outputCounterIndex++;
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	3301      	adds	r3, #1
 8000dda:	60fb      	str	r3, [r7, #12]
                 ArrayOutput[outputCounterIndex]=1;
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	683a      	ldr	r2, [r7, #0]
 8000de0:	4413      	add	r3, r2
 8000de2:	2201      	movs	r2, #1
 8000de4:	701a      	strb	r2, [r3, #0]
                 outputCounterIndex++;
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	3301      	adds	r3, #1
 8000dea:	60fb      	str	r3, [r7, #12]
                 ArrayOutput[outputCounterIndex]=1;
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	683a      	ldr	r2, [r7, #0]
 8000df0:	4413      	add	r3, r2
 8000df2:	2201      	movs	r2, #1
 8000df4:	701a      	strb	r2, [r3, #0]
                 outputCounterIndex++;
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	3301      	adds	r3, #1
 8000dfa:	60fb      	str	r3, [r7, #12]
                 
                 ArrayOutput[outputCounterIndex]=0;
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	683a      	ldr	r2, [r7, #0]
 8000e00:	4413      	add	r3, r2
 8000e02:	2200      	movs	r2, #0
 8000e04:	701a      	strb	r2, [r3, #0]
                 
                 ArrayOutput[outputCounterIndex]=1;
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	683a      	ldr	r2, [r7, #0]
 8000e0a:	4413      	add	r3, r2
 8000e0c:	2201      	movs	r2, #1
 8000e0e:	701a      	strb	r2, [r3, #0]
                 outputCounterIndex++;
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	3301      	adds	r3, #1
 8000e14:	60fb      	str	r3, [r7, #12]
                 ArrayOutput[outputCounterIndex]=1;
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	683a      	ldr	r2, [r7, #0]
 8000e1a:	4413      	add	r3, r2
 8000e1c:	2201      	movs	r2, #1
 8000e1e:	701a      	strb	r2, [r3, #0]
                 outputCounterIndex++;
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	3301      	adds	r3, #1
 8000e24:	60fb      	str	r3, [r7, #12]
                 ArrayOutput[outputCounterIndex]=1;
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	683a      	ldr	r2, [r7, #0]
 8000e2a:	4413      	add	r3, r2
 8000e2c:	2201      	movs	r2, #1
 8000e2e:	701a      	strb	r2, [r3, #0]
                 outputCounterIndex++;
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	3301      	adds	r3, #1
 8000e34:	60fb      	str	r3, [r7, #12]
                 
                 ArrayOutput[outputCounterIndex]=0;
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	683a      	ldr	r2, [r7, #0]
 8000e3a:	4413      	add	r3, r2
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	701a      	strb	r2, [r3, #0]
                 outputCounterIndex++;
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	3301      	adds	r3, #1
 8000e44:	60fb      	str	r3, [r7, #12]
                 
                 ArrayOutput[outputCounterIndex]=1;
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	683a      	ldr	r2, [r7, #0]
 8000e4a:	4413      	add	r3, r2
 8000e4c:	2201      	movs	r2, #1
 8000e4e:	701a      	strb	r2, [r3, #0]
                 outputCounterIndex++;
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	3301      	adds	r3, #1
 8000e54:	60fb      	str	r3, [r7, #12]
                 ArrayOutput[outputCounterIndex]=1;
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	683a      	ldr	r2, [r7, #0]
 8000e5a:	4413      	add	r3, r2
 8000e5c:	2201      	movs	r2, #1
 8000e5e:	701a      	strb	r2, [r3, #0]
                 outputCounterIndex++;
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	3301      	adds	r3, #1
 8000e64:	60fb      	str	r3, [r7, #12]
                 ArrayOutput[outputCounterIndex]=1;
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	683a      	ldr	r2, [r7, #0]
 8000e6a:	4413      	add	r3, r2
 8000e6c:	2201      	movs	r2, #1
 8000e6e:	701a      	strb	r2, [r3, #0]
                 outputCounterIndex++;
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	3301      	adds	r3, #1
 8000e74:	60fb      	str	r3, [r7, #12]
                 
                 ArrayOutput[outputCounterIndex]=0;
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	683a      	ldr	r2, [r7, #0]
 8000e7a:	4413      	add	r3, r2
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	701a      	strb	r2, [r3, #0]
                 outputCounterIndex++;
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	3301      	adds	r3, #1
 8000e84:	60fb      	str	r3, [r7, #12]
                 
                 ArrayOutput[outputCounterIndex]=1;
 8000e86:	68fb      	ldr	r3, [r7, #12]
 8000e88:	683a      	ldr	r2, [r7, #0]
 8000e8a:	4413      	add	r3, r2
 8000e8c:	2201      	movs	r2, #1
 8000e8e:	701a      	strb	r2, [r3, #0]
                 outputCounterIndex++;
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	3301      	adds	r3, #1
 8000e94:	60fb      	str	r3, [r7, #12]
                 
                 ArrayOutput[outputCounterIndex]=0;
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	683a      	ldr	r2, [r7, #0]
 8000e9a:	4413      	add	r3, r2
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	701a      	strb	r2, [r3, #0]
                 outputCounterIndex++;
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	3301      	adds	r3, #1
 8000ea4:	60fb      	str	r3, [r7, #12]
                counterIndex++;
 8000ea6:	693b      	ldr	r3, [r7, #16]
 8000ea8:	3301      	adds	r3, #1
 8000eaa:	613b      	str	r3, [r7, #16]
                break;
 8000eac:	e00c      	b.n	8000ec8 <ArrayToMorse+0x9fc>
                
            case 999:
                ArrayOutput[outputCounterIndex]=3;
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	683a      	ldr	r2, [r7, #0]
 8000eb2:	4413      	add	r3, r2
 8000eb4:	2203      	movs	r2, #3
 8000eb6:	701a      	strb	r2, [r3, #0]
                ArrayInput[1,2,3,4,5,6,7,8,9,10]=999,999,999,999,999,999,999,999,999,999;
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	3328      	adds	r3, #40	; 0x28
 8000ebc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000ec0:	601a      	str	r2, [r3, #0]
                encodingFlag=true;
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	75fb      	strb	r3, [r7, #23]
                break;
 8000ec6:	bf00      	nop
    while (!encodingFlag){
 8000ec8:	7dfb      	ldrb	r3, [r7, #23]
 8000eca:	f083 0301 	eor.w	r3, r3, #1
 8000ece:	b2db      	uxtb	r3, r3
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	f47f ab08 	bne.w	80004e6 <ArrayToMorse+0x1a>
        }
        
        
    }
    
}
 8000ed6:	bf00      	nop
 8000ed8:	bf00      	nop
 8000eda:	371c      	adds	r7, #28
 8000edc:	46bd      	mov	sp, r7
 8000ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee2:	4770      	bx	lr

08000ee4 <SysTick_Handler>:
void SysTick_Handler(void)  {     
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0
  //XMC_GPIO_ToggleOutput(LED1);                           
  counterTMS++;       
 8000ee8:	4b15      	ldr	r3, [pc, #84]	; (8000f40 <SysTick_Handler+0x5c>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	3301      	adds	r3, #1
 8000eee:	4a14      	ldr	r2, [pc, #80]	; (8000f40 <SysTick_Handler+0x5c>)
 8000ef0:	6013      	str	r3, [r2, #0]
    if(counterTMS%100==0){
 8000ef2:	4b13      	ldr	r3, [pc, #76]	; (8000f40 <SysTick_Handler+0x5c>)
 8000ef4:	681a      	ldr	r2, [r3, #0]
 8000ef6:	4b13      	ldr	r3, [pc, #76]	; (8000f44 <SysTick_Handler+0x60>)
 8000ef8:	fba3 1302 	umull	r1, r3, r3, r2
 8000efc:	095b      	lsrs	r3, r3, #5
 8000efe:	2164      	movs	r1, #100	; 0x64
 8000f00:	fb01 f303 	mul.w	r3, r1, r3
 8000f04:	1ad3      	subs	r3, r2, r3
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d114      	bne.n	8000f34 <SysTick_Handler+0x50>
        if (btnOPressedFlag || btnTPressedFlag){
 8000f0a:	4b0f      	ldr	r3, [pc, #60]	; (8000f48 <SysTick_Handler+0x64>)
 8000f0c:	781b      	ldrb	r3, [r3, #0]
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d103      	bne.n	8000f1a <SysTick_Handler+0x36>
 8000f12:	4b0e      	ldr	r3, [pc, #56]	; (8000f4c <SysTick_Handler+0x68>)
 8000f14:	781b      	ldrb	r3, [r3, #0]
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d00c      	beq.n	8000f34 <SysTick_Handler+0x50>
            if (letterCounter==0){
 8000f1a:	4b0d      	ldr	r3, [pc, #52]	; (8000f50 <SysTick_Handler+0x6c>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d103      	bne.n	8000f2a <SysTick_Handler+0x46>
                letterCounter=1;}
 8000f22:	4b0b      	ldr	r3, [pc, #44]	; (8000f50 <SysTick_Handler+0x6c>)
 8000f24:	2201      	movs	r2, #1
 8000f26:	601a      	str	r2, [r3, #0]
            else {    
            letterCounter++;}
        } 
    }
}
 8000f28:	e004      	b.n	8000f34 <SysTick_Handler+0x50>
            letterCounter++;}
 8000f2a:	4b09      	ldr	r3, [pc, #36]	; (8000f50 <SysTick_Handler+0x6c>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	3301      	adds	r3, #1
 8000f30:	4a07      	ldr	r2, [pc, #28]	; (8000f50 <SysTick_Handler+0x6c>)
 8000f32:	6013      	str	r3, [r2, #0]
}
 8000f34:	bf00      	nop
 8000f36:	46bd      	mov	sp, r7
 8000f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop
 8000f40:	200007d8 	.word	0x200007d8
 8000f44:	51eb851f 	.word	0x51eb851f
 8000f48:	200007e0 	.word	0x200007e0
 8000f4c:	200007e1 	.word	0x200007e1
 8000f50:	200007dc 	.word	0x200007dc

08000f54 <main>:
                            0,0,0,
                            1,
                            3};
                            
                            
int main (void)  {
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b088      	sub	sp, #32
 8000f58:	af00      	add	r7, sp, #0
  //7 0,0,0,0,0,0,0,
  //3 0,0,0,

// GPIO CONFIG
  XMC_GPIO_CONFIG_t config;
  config.mode = XMC_GPIO_MODE_OUTPUT_PUSH_PULL;
 8000f5a:	2380      	movs	r3, #128	; 0x80
 8000f5c:	743b      	strb	r3, [r7, #16]
  config.output_level = XMC_GPIO_OUTPUT_LEVEL_HIGH;
 8000f5e:	2301      	movs	r3, #1
 8000f60:	617b      	str	r3, [r7, #20]
  config.output_strength = XMC_GPIO_OUTPUT_STRENGTH_MEDIUM;
 8000f62:	2304      	movs	r3, #4
 8000f64:	763b      	strb	r3, [r7, #24]
  XMC_GPIO_Init(LED1, &config);
 8000f66:	f107 0310 	add.w	r3, r7, #16
 8000f6a:	461a      	mov	r2, r3
 8000f6c:	2101      	movs	r1, #1
 8000f6e:	4860      	ldr	r0, [pc, #384]	; (80010f0 <main+0x19c>)
 8000f70:	f000 f93a 	bl	80011e8 <XMC_GPIO_Init>
  config.output_level = XMC_GPIO_OUTPUT_LEVEL_LOW;
 8000f74:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f78:	617b      	str	r3, [r7, #20]
  XMC_GPIO_Init(LED2, &config);
 8000f7a:	f107 0310 	add.w	r3, r7, #16
 8000f7e:	461a      	mov	r2, r3
 8000f80:	2100      	movs	r1, #0
 8000f82:	485b      	ldr	r0, [pc, #364]	; (80010f0 <main+0x19c>)
 8000f84:	f000 f930 	bl	80011e8 <XMC_GPIO_Init>
  
    const XMC_GPIO_CONFIG_t in_config = \
 8000f88:	2300      	movs	r3, #0
 8000f8a:	713b      	strb	r3, [r7, #4]
 8000f8c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f90:	60bb      	str	r3, [r7, #8]
 8000f92:	2300      	movs	r3, #0
 8000f94:	733b      	strb	r3, [r7, #12]
      {.mode=XMC_GPIO_MODE_INPUT_TRISTATE,\
       .output_level=XMC_GPIO_OUTPUT_LEVEL_LOW,\
       .output_strength=XMC_GPIO_OUTPUT_STRENGTH_STRONG_SHARP_EDGE};
  XMC_GPIO_Init(GPIO_BUTTON1,  &in_config);
 8000f96:	1d3b      	adds	r3, r7, #4
 8000f98:	461a      	mov	r2, r3
 8000f9a:	210e      	movs	r1, #14
 8000f9c:	4854      	ldr	r0, [pc, #336]	; (80010f0 <main+0x19c>)
 8000f9e:	f000 f923 	bl	80011e8 <XMC_GPIO_Init>
  XMC_GPIO_Init(GPIO_BUTTON2,  &in_config);
 8000fa2:	1d3b      	adds	r3, r7, #4
 8000fa4:	461a      	mov	r2, r3
 8000fa6:	210f      	movs	r1, #15
 8000fa8:	4851      	ldr	r0, [pc, #324]	; (80010f0 <main+0x19c>)
 8000faa:	f000 f91d 	bl	80011e8 <XMC_GPIO_Init>


  returnCode = SysTick_Config(SystemCoreClock / 1000);      /* Configure SysTick to generate an interrupt every 100 milliseconds */
 8000fae:	4b51      	ldr	r3, [pc, #324]	; (80010f4 <main+0x1a0>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	4a51      	ldr	r2, [pc, #324]	; (80010f8 <main+0x1a4>)
 8000fb4:	fba2 2303 	umull	r2, r3, r2, r3
 8000fb8:	099b      	lsrs	r3, r3, #6
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f7ff f9a4 	bl	8000308 <SysTick_Config>
 8000fc0:	61f8      	str	r0, [r7, #28]
  
  if (returnCode != 0)  {                                   /* Check return code for errors */
    // Error Handling 
  }
  XMC_GPIO_SetOutputLow(LED1);
 8000fc2:	2101      	movs	r1, #1
 8000fc4:	484a      	ldr	r0, [pc, #296]	; (80010f0 <main+0x19c>)
 8000fc6:	f7ff f9d2 	bl	800036e <XMC_GPIO_SetOutputLow>
  
  for(;;){
      
   // The mechanism for the button locking is utilized through the flags btnTPressedFlag and btnOPressedFlag   
      
    if(XMC_GPIO_GetInput(GPIO_BUTTON1) == 0) { 
 8000fca:	210e      	movs	r1, #14
 8000fcc:	4848      	ldr	r0, [pc, #288]	; (80010f0 <main+0x19c>)
 8000fce:	f7ff f9e0 	bl	8000392 <XMC_GPIO_GetInput>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d109      	bne.n	8000fec <main+0x98>
            if (!btnTPressedFlag){
 8000fd8:	4b48      	ldr	r3, [pc, #288]	; (80010fc <main+0x1a8>)
 8000fda:	781b      	ldrb	r3, [r3, #0]
 8000fdc:	f083 0301 	eor.w	r3, r3, #1
 8000fe0:	b2db      	uxtb	r3, r3
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d002      	beq.n	8000fec <main+0x98>
                    btnOPressedFlag=true;
 8000fe6:	4b46      	ldr	r3, [pc, #280]	; (8001100 <main+0x1ac>)
 8000fe8:	2201      	movs	r2, #1
 8000fea:	701a      	strb	r2, [r3, #0]
                                }
                                                }
    if(XMC_GPIO_GetInput(GPIO_BUTTON2) == 0) { 
 8000fec:	210f      	movs	r1, #15
 8000fee:	4840      	ldr	r0, [pc, #256]	; (80010f0 <main+0x19c>)
 8000ff0:	f7ff f9cf 	bl	8000392 <XMC_GPIO_GetInput>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d113      	bne.n	8001022 <main+0xce>
                                             if(!btnOPressedFlag){
 8000ffa:	4b41      	ldr	r3, [pc, #260]	; (8001100 <main+0x1ac>)
 8000ffc:	781b      	ldrb	r3, [r3, #0]
 8000ffe:	f083 0301 	eor.w	r3, r3, #1
 8001002:	b2db      	uxtb	r3, r3
 8001004:	2b00      	cmp	r3, #0
 8001006:	d00c      	beq.n	8001022 <main+0xce>
                                                 btnTPressedFlag=true;
 8001008:	4b3c      	ldr	r3, [pc, #240]	; (80010fc <main+0x1a8>)
 800100a:	2201      	movs	r2, #1
 800100c:	701a      	strb	r2, [r3, #0]
                                                 DecimalToArrayFunction(recordedTimeArray,timeBuffer);
 800100e:	4b3d      	ldr	r3, [pc, #244]	; (8001104 <main+0x1b0>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	4619      	mov	r1, r3
 8001014:	483c      	ldr	r0, [pc, #240]	; (8001108 <main+0x1b4>)
 8001016:	f7ff f9cf 	bl	80003b8 <DecimalToArrayFunction>
                                                 ArrayToMorse(recordedTimeArray,morseNumber);
 800101a:	493c      	ldr	r1, [pc, #240]	; (800110c <main+0x1b8>)
 800101c:	483a      	ldr	r0, [pc, #232]	; (8001108 <main+0x1b4>)
 800101e:	f7ff fa55 	bl	80004cc <ArrayToMorse>
                                                                }
                                            }  
   
   // Btn 1 Functionality
   //
   if (btnTPressedFlag){
 8001022:	4b36      	ldr	r3, [pc, #216]	; (80010fc <main+0x1a8>)
 8001024:	781b      	ldrb	r3, [r3, #0]
 8001026:	2b00      	cmp	r3, #0
 8001028:	d026      	beq.n	8001078 <main+0x124>

    switch (morseNumber[letterCounter])
 800102a:	4b39      	ldr	r3, [pc, #228]	; (8001110 <main+0x1bc>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	4a37      	ldr	r2, [pc, #220]	; (800110c <main+0x1b8>)
 8001030:	5cd3      	ldrb	r3, [r2, r3]
 8001032:	2b03      	cmp	r3, #3
 8001034:	d00f      	beq.n	8001056 <main+0x102>
 8001036:	2b03      	cmp	r3, #3
 8001038:	dc1f      	bgt.n	800107a <main+0x126>
 800103a:	2b00      	cmp	r3, #0
 800103c:	d006      	beq.n	800104c <main+0xf8>
 800103e:	2b01      	cmp	r3, #1
 8001040:	d11b      	bne.n	800107a <main+0x126>
        {
            case 1:
            XMC_GPIO_SetOutputHigh(LED1);
 8001042:	2101      	movs	r1, #1
 8001044:	482a      	ldr	r0, [pc, #168]	; (80010f0 <main+0x19c>)
 8001046:	f7ff f981 	bl	800034c <XMC_GPIO_SetOutputHigh>
            break;
 800104a:	e016      	b.n	800107a <main+0x126>
            case 0:
            XMC_GPIO_SetOutputLow(LED1);
 800104c:	2101      	movs	r1, #1
 800104e:	4828      	ldr	r0, [pc, #160]	; (80010f0 <main+0x19c>)
 8001050:	f7ff f98d 	bl	800036e <XMC_GPIO_SetOutputLow>
            break;
 8001054:	e011      	b.n	800107a <main+0x126>
            case 3:  
            letterCounter=0;            
 8001056:	4b2e      	ldr	r3, [pc, #184]	; (8001110 <main+0x1bc>)
 8001058:	2200      	movs	r2, #0
 800105a:	601a      	str	r2, [r3, #0]
            counterTMS=0;
 800105c:	4b2d      	ldr	r3, [pc, #180]	; (8001114 <main+0x1c0>)
 800105e:	2200      	movs	r2, #0
 8001060:	601a      	str	r2, [r3, #0]
            btnTPressedFlag=false;
 8001062:	4b26      	ldr	r3, [pc, #152]	; (80010fc <main+0x1a8>)
 8001064:	2200      	movs	r2, #0
 8001066:	701a      	strb	r2, [r3, #0]
            timeBufferFlag=true;
 8001068:	4b2b      	ldr	r3, [pc, #172]	; (8001118 <main+0x1c4>)
 800106a:	2201      	movs	r2, #1
 800106c:	701a      	strb	r2, [r3, #0]
            XMC_GPIO_SetOutputLow(LED1);
 800106e:	2101      	movs	r1, #1
 8001070:	481f      	ldr	r0, [pc, #124]	; (80010f0 <main+0x19c>)
 8001072:	f7ff f97c 	bl	800036e <XMC_GPIO_SetOutputLow>
            break;
 8001076:	e000      	b.n	800107a <main+0x126>
        }
   }
 8001078:	bf00      	nop
   
   if (btnOPressedFlag){
 800107a:	4b21      	ldr	r3, [pc, #132]	; (8001100 <main+0x1ac>)
 800107c:	781b      	ldrb	r3, [r3, #0]
 800107e:	2b00      	cmp	r3, #0
 8001080:	d034      	beq.n	80010ec <main+0x198>
       if (timeBufferFlag){
 8001082:	4b25      	ldr	r3, [pc, #148]	; (8001118 <main+0x1c4>)
 8001084:	781b      	ldrb	r3, [r3, #0]
 8001086:	2b00      	cmp	r3, #0
 8001088:	d009      	beq.n	800109e <main+0x14a>
       timeBuffer = counterTMS;
 800108a:	4b22      	ldr	r3, [pc, #136]	; (8001114 <main+0x1c0>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	4a1d      	ldr	r2, [pc, #116]	; (8001104 <main+0x1b0>)
 8001090:	6013      	str	r3, [r2, #0]
       counterTMS=0;
 8001092:	4b20      	ldr	r3, [pc, #128]	; (8001114 <main+0x1c0>)
 8001094:	2200      	movs	r2, #0
 8001096:	601a      	str	r2, [r3, #0]
       timeBufferFlag=false;    
 8001098:	4b1f      	ldr	r3, [pc, #124]	; (8001118 <main+0x1c4>)
 800109a:	2200      	movs	r2, #0
 800109c:	701a      	strb	r2, [r3, #0]
                            }
        switch (signalArray[letterCounter])
 800109e:	4b1c      	ldr	r3, [pc, #112]	; (8001110 <main+0x1bc>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	4a1e      	ldr	r2, [pc, #120]	; (800111c <main+0x1c8>)
 80010a4:	5cd3      	ldrb	r3, [r2, r3]
 80010a6:	2b03      	cmp	r3, #3
 80010a8:	d00f      	beq.n	80010ca <main+0x176>
 80010aa:	2b03      	cmp	r3, #3
 80010ac:	dc8d      	bgt.n	8000fca <main+0x76>
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d006      	beq.n	80010c0 <main+0x16c>
 80010b2:	2b01      	cmp	r3, #1
 80010b4:	d189      	bne.n	8000fca <main+0x76>
        {
            case 1:
            XMC_GPIO_SetOutputHigh(LED1);
 80010b6:	2101      	movs	r1, #1
 80010b8:	480d      	ldr	r0, [pc, #52]	; (80010f0 <main+0x19c>)
 80010ba:	f7ff f947 	bl	800034c <XMC_GPIO_SetOutputHigh>
            break;
 80010be:	e016      	b.n	80010ee <main+0x19a>
            case 0:
            XMC_GPIO_SetOutputLow(LED1);
 80010c0:	2101      	movs	r1, #1
 80010c2:	480b      	ldr	r0, [pc, #44]	; (80010f0 <main+0x19c>)
 80010c4:	f7ff f953 	bl	800036e <XMC_GPIO_SetOutputLow>
            break;
 80010c8:	e011      	b.n	80010ee <main+0x19a>
            case 3:
        //         
            letterCounter=0;            
 80010ca:	4b11      	ldr	r3, [pc, #68]	; (8001110 <main+0x1bc>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	601a      	str	r2, [r3, #0]
            counterTMS=0;
 80010d0:	4b10      	ldr	r3, [pc, #64]	; (8001114 <main+0x1c0>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	601a      	str	r2, [r3, #0]
            btnOPressedFlag=false;
 80010d6:	4b0a      	ldr	r3, [pc, #40]	; (8001100 <main+0x1ac>)
 80010d8:	2200      	movs	r2, #0
 80010da:	701a      	strb	r2, [r3, #0]
            timeBufferFlag=true;
 80010dc:	4b0e      	ldr	r3, [pc, #56]	; (8001118 <main+0x1c4>)
 80010de:	2201      	movs	r2, #1
 80010e0:	701a      	strb	r2, [r3, #0]
            XMC_GPIO_SetOutputLow(LED1);
 80010e2:	2101      	movs	r1, #1
 80010e4:	4802      	ldr	r0, [pc, #8]	; (80010f0 <main+0x19c>)
 80010e6:	f7ff f942 	bl	800036e <XMC_GPIO_SetOutputLow>
            break;
 80010ea:	e000      	b.n	80010ee <main+0x19a>
        }
   }//else {XMC_GPIO_SetOutputLow(LED1);}
 80010ec:	bf00      	nop
    if(XMC_GPIO_GetInput(GPIO_BUTTON1) == 0) { 
 80010ee:	e76c      	b.n	8000fca <main+0x76>
 80010f0:	48028100 	.word	0x48028100
 80010f4:	2000ffc0 	.word	0x2000ffc0
 80010f8:	10624dd3 	.word	0x10624dd3
 80010fc:	200007e1 	.word	0x200007e1
 8001100:	200007e0 	.word	0x200007e0
 8001104:	200007e4 	.word	0x200007e4
 8001108:	20000000 	.word	0x20000000
 800110c:	20000028 	.word	0x20000028
 8001110:	200007dc 	.word	0x200007dc
 8001114:	200007d8 	.word	0x200007d8
 8001118:	20000348 	.word	0x20000348
 800111c:	2000034c 	.word	0x2000034c

08001120 <XMC_GPIO_SetMode>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_GPIO_SetMode(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_MODE_t mode)
{
 8001120:	b480      	push	{r7}
 8001122:	b083      	sub	sp, #12
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
 8001128:	460b      	mov	r3, r1
 800112a:	70fb      	strb	r3, [r7, #3]
 800112c:	4613      	mov	r3, r2
 800112e:	70bb      	strb	r3, [r7, #2]
  XMC_ASSERT("XMC_GPIO_SetMode: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_SetMode: Invalid mode", XMC_GPIO_IsModeValid(mode));

  port->IOCR[(uint32_t)pin >> 2U] &= ~(uint32_t)((uint32_t)PORT_IOCR_PC_Msk << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U)));
 8001130:	78fb      	ldrb	r3, [r7, #3]
 8001132:	089b      	lsrs	r3, r3, #2
 8001134:	b2db      	uxtb	r3, r3
 8001136:	461a      	mov	r2, r3
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	3204      	adds	r2, #4
 800113c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001140:	78fb      	ldrb	r3, [r7, #3]
 8001142:	f003 0303 	and.w	r3, r3, #3
 8001146:	00db      	lsls	r3, r3, #3
 8001148:	21f8      	movs	r1, #248	; 0xf8
 800114a:	fa01 f303 	lsl.w	r3, r1, r3
 800114e:	43db      	mvns	r3, r3
 8001150:	78f9      	ldrb	r1, [r7, #3]
 8001152:	0889      	lsrs	r1, r1, #2
 8001154:	b2c9      	uxtb	r1, r1
 8001156:	4608      	mov	r0, r1
 8001158:	ea02 0103 	and.w	r1, r2, r3
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	1d02      	adds	r2, r0, #4
 8001160:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  port->IOCR[(uint32_t)pin >> 2U] |= (uint32_t)mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
 8001164:	78fb      	ldrb	r3, [r7, #3]
 8001166:	089b      	lsrs	r3, r3, #2
 8001168:	b2db      	uxtb	r3, r3
 800116a:	461a      	mov	r2, r3
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	3204      	adds	r2, #4
 8001170:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001174:	78b9      	ldrb	r1, [r7, #2]
 8001176:	78fb      	ldrb	r3, [r7, #3]
 8001178:	f003 0303 	and.w	r3, r3, #3
 800117c:	00db      	lsls	r3, r3, #3
 800117e:	fa01 f303 	lsl.w	r3, r1, r3
 8001182:	78f9      	ldrb	r1, [r7, #3]
 8001184:	0889      	lsrs	r1, r1, #2
 8001186:	b2c9      	uxtb	r1, r1
 8001188:	4608      	mov	r0, r1
 800118a:	ea42 0103 	orr.w	r1, r2, r3
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	1d02      	adds	r2, r0, #4
 8001192:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8001196:	bf00      	nop
 8001198:	370c      	adds	r7, #12
 800119a:	46bd      	mov	sp, r7
 800119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a0:	4770      	bx	lr

080011a2 <XMC_GPIO_SetHardwareControl>:

void XMC_GPIO_SetHardwareControl(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_HWCTRL_t hwctrl)
{
 80011a2:	b480      	push	{r7}
 80011a4:	b083      	sub	sp, #12
 80011a6:	af00      	add	r7, sp, #0
 80011a8:	6078      	str	r0, [r7, #4]
 80011aa:	460b      	mov	r3, r1
 80011ac:	70fb      	strb	r3, [r7, #3]
 80011ae:	4613      	mov	r3, r2
 80011b0:	70bb      	strb	r3, [r7, #2]
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid hwctrl", XMC_GPIO_CHECK_HWCTRL(hwctrl));

  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80011b6:	78fb      	ldrb	r3, [r7, #3]
 80011b8:	005b      	lsls	r3, r3, #1
 80011ba:	2103      	movs	r1, #3
 80011bc:	fa01 f303 	lsl.w	r3, r1, r3
 80011c0:	43db      	mvns	r3, r3
 80011c2:	401a      	ands	r2, r3
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	675a      	str	r2, [r3, #116]	; 0x74
  port->HWSEL |= (uint32_t)hwctrl << ((uint32_t)pin << 1U);
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80011cc:	78b9      	ldrb	r1, [r7, #2]
 80011ce:	78fb      	ldrb	r3, [r7, #3]
 80011d0:	005b      	lsls	r3, r3, #1
 80011d2:	fa01 f303 	lsl.w	r3, r1, r3
 80011d6:	431a      	orrs	r2, r3
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	675a      	str	r2, [r3, #116]	; 0x74
}
 80011dc:	bf00      	nop
 80011de:	370c      	adds	r7, #12
 80011e0:	46bd      	mov	sp, r7
 80011e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e6:	4770      	bx	lr

080011e8 <XMC_GPIO_Init>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_GPIO_Init(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_CONFIG_t *const config)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b085      	sub	sp, #20
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	60f8      	str	r0, [r7, #12]
 80011f0:	460b      	mov	r3, r1
 80011f2:	607a      	str	r2, [r7, #4]
 80011f4:	72fb      	strb	r3, [r7, #11]
  XMC_ASSERT("XMC_GPIO_Init: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_Init: Invalid mode", XMC_GPIO_IsModeValid(config->mode));
 
  /* Switch to input */
  port->IOCR[pin >> 2U] &= (uint32_t)~(PORT_IOCR_PC_Msk << (PORT_IOCR_PC_Size * (pin & 0x3U)));
 80011f6:	7afb      	ldrb	r3, [r7, #11]
 80011f8:	089b      	lsrs	r3, r3, #2
 80011fa:	b2db      	uxtb	r3, r3
 80011fc:	461a      	mov	r2, r3
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	3204      	adds	r2, #4
 8001202:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001206:	7afb      	ldrb	r3, [r7, #11]
 8001208:	f003 0303 	and.w	r3, r3, #3
 800120c:	00db      	lsls	r3, r3, #3
 800120e:	21f8      	movs	r1, #248	; 0xf8
 8001210:	fa01 f303 	lsl.w	r3, r1, r3
 8001214:	43db      	mvns	r3, r3
 8001216:	7af9      	ldrb	r1, [r7, #11]
 8001218:	0889      	lsrs	r1, r1, #2
 800121a:	b2c9      	uxtb	r1, r1
 800121c:	4608      	mov	r0, r1
 800121e:	ea02 0103 	and.w	r1, r2, r3
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	1d02      	adds	r2, r0, #4
 8001226:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* HW port control is disabled */
  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800122e:	7afb      	ldrb	r3, [r7, #11]
 8001230:	005b      	lsls	r3, r3, #1
 8001232:	2103      	movs	r1, #3
 8001234:	fa01 f303 	lsl.w	r3, r1, r3
 8001238:	43db      	mvns	r3, r3
 800123a:	401a      	ands	r2, r3
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	675a      	str	r2, [r3, #116]	; 0x74


  /* Enable digital input */
  if (XMC_GPIO_CHECK_ANALOG_PORT(port))
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	4a38      	ldr	r2, [pc, #224]	; (8001324 <XMC_GPIO_Init+0x13c>)
 8001244:	4293      	cmp	r3, r2
 8001246:	d003      	beq.n	8001250 <XMC_GPIO_Init+0x68>
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	4a37      	ldr	r2, [pc, #220]	; (8001328 <XMC_GPIO_Init+0x140>)
 800124c:	4293      	cmp	r3, r2
 800124e:	d10a      	bne.n	8001266 <XMC_GPIO_Init+0x7e>
  {
    port->PDISC &= ~(uint32_t)((uint32_t)0x1U << pin);
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001254:	7afb      	ldrb	r3, [r7, #11]
 8001256:	2101      	movs	r1, #1
 8001258:	fa01 f303 	lsl.w	r3, r1, r3
 800125c:	43db      	mvns	r3, r3
 800125e:	401a      	ands	r2, r3
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	661a      	str	r2, [r3, #96]	; 0x60
 8001264:	e03c      	b.n	80012e0 <XMC_GPIO_Init+0xf8>
  }
  else
  {
    /* Set output level */
    port->OMR = (uint32_t)config->output_level << pin;
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	685a      	ldr	r2, [r3, #4]
 800126a:	7afb      	ldrb	r3, [r7, #11]
 800126c:	409a      	lsls	r2, r3
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	605a      	str	r2, [r3, #4]

    /* Set output driver strength */
    port->PDR[pin >> 3U] &= (uint32_t)~(PORT_PDR_Msk << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U)));
 8001272:	7afb      	ldrb	r3, [r7, #11]
 8001274:	08db      	lsrs	r3, r3, #3
 8001276:	b2db      	uxtb	r3, r3
 8001278:	461a      	mov	r2, r3
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	3210      	adds	r2, #16
 800127e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001282:	7afb      	ldrb	r3, [r7, #11]
 8001284:	f003 0307 	and.w	r3, r3, #7
 8001288:	009b      	lsls	r3, r3, #2
 800128a:	2107      	movs	r1, #7
 800128c:	fa01 f303 	lsl.w	r3, r1, r3
 8001290:	43db      	mvns	r3, r3
 8001292:	7af9      	ldrb	r1, [r7, #11]
 8001294:	08c9      	lsrs	r1, r1, #3
 8001296:	b2c9      	uxtb	r1, r1
 8001298:	4608      	mov	r0, r1
 800129a:	ea02 0103 	and.w	r1, r2, r3
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	f100 0210 	add.w	r2, r0, #16
 80012a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    port->PDR[pin >> 3U] |= (uint32_t)config->output_strength << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U));
 80012a8:	7afb      	ldrb	r3, [r7, #11]
 80012aa:	08db      	lsrs	r3, r3, #3
 80012ac:	b2db      	uxtb	r3, r3
 80012ae:	461a      	mov	r2, r3
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	3210      	adds	r2, #16
 80012b4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	7a1b      	ldrb	r3, [r3, #8]
 80012bc:	4619      	mov	r1, r3
 80012be:	7afb      	ldrb	r3, [r7, #11]
 80012c0:	f003 0307 	and.w	r3, r3, #7
 80012c4:	009b      	lsls	r3, r3, #2
 80012c6:	fa01 f303 	lsl.w	r3, r1, r3
 80012ca:	7af9      	ldrb	r1, [r7, #11]
 80012cc:	08c9      	lsrs	r1, r1, #3
 80012ce:	b2c9      	uxtb	r1, r1
 80012d0:	4608      	mov	r0, r1
 80012d2:	ea42 0103 	orr.w	r1, r2, r3
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	f100 0210 	add.w	r2, r0, #16
 80012dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  /* Set mode */
  port->IOCR[pin >> 2U] |= (uint32_t)config->mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
 80012e0:	7afb      	ldrb	r3, [r7, #11]
 80012e2:	089b      	lsrs	r3, r3, #2
 80012e4:	b2db      	uxtb	r3, r3
 80012e6:	461a      	mov	r2, r3
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	3204      	adds	r2, #4
 80012ec:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	781b      	ldrb	r3, [r3, #0]
 80012f4:	4619      	mov	r1, r3
 80012f6:	7afb      	ldrb	r3, [r7, #11]
 80012f8:	f003 0303 	and.w	r3, r3, #3
 80012fc:	00db      	lsls	r3, r3, #3
 80012fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001302:	7af9      	ldrb	r1, [r7, #11]
 8001304:	0889      	lsrs	r1, r1, #2
 8001306:	b2c9      	uxtb	r1, r1
 8001308:	4608      	mov	r0, r1
 800130a:	ea42 0103 	orr.w	r1, r2, r3
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	1d02      	adds	r2, r0, #4
 8001312:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8001316:	bf00      	nop
 8001318:	3714      	adds	r7, #20
 800131a:	46bd      	mov	sp, r7
 800131c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001320:	4770      	bx	lr
 8001322:	bf00      	nop
 8001324:	48028e00 	.word	0x48028e00
 8001328:	48028f00 	.word	0x48028f00

0800132c <XMC_GPIO_SetOutputStrength>:

void XMC_GPIO_SetOutputStrength(XMC_GPIO_PORT_t *const port, const uint8_t pin, XMC_GPIO_OUTPUT_STRENGTH_t strength)
{
 800132c:	b480      	push	{r7}
 800132e:	b083      	sub	sp, #12
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
 8001334:	460b      	mov	r3, r1
 8001336:	70fb      	strb	r3, [r7, #3]
 8001338:	4613      	mov	r3, r2
 800133a:	70bb      	strb	r3, [r7, #2]
  XMC_ASSERT("XMC_GPIO_Init: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));
  XMC_ASSERT("XMC_GPIO_Init: Invalid output strength", XMC_GPIO_CHECK_OUTPUT_STRENGTH(strength));

  port->PDR[pin >> 3U] &= (uint32_t)~((uint32_t)PORT_PDR_Msk << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U)));
 800133c:	78fb      	ldrb	r3, [r7, #3]
 800133e:	08db      	lsrs	r3, r3, #3
 8001340:	b2db      	uxtb	r3, r3
 8001342:	461a      	mov	r2, r3
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	3210      	adds	r2, #16
 8001348:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800134c:	78fb      	ldrb	r3, [r7, #3]
 800134e:	f003 0307 	and.w	r3, r3, #7
 8001352:	009b      	lsls	r3, r3, #2
 8001354:	2107      	movs	r1, #7
 8001356:	fa01 f303 	lsl.w	r3, r1, r3
 800135a:	43db      	mvns	r3, r3
 800135c:	78f9      	ldrb	r1, [r7, #3]
 800135e:	08c9      	lsrs	r1, r1, #3
 8001360:	b2c9      	uxtb	r1, r1
 8001362:	4608      	mov	r0, r1
 8001364:	ea02 0103 	and.w	r1, r2, r3
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	f100 0210 	add.w	r2, r0, #16
 800136e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  port->PDR[pin >> 3U] |= (uint32_t)strength << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U));
 8001372:	78fb      	ldrb	r3, [r7, #3]
 8001374:	08db      	lsrs	r3, r3, #3
 8001376:	b2db      	uxtb	r3, r3
 8001378:	461a      	mov	r2, r3
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	3210      	adds	r2, #16
 800137e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001382:	78b9      	ldrb	r1, [r7, #2]
 8001384:	78fb      	ldrb	r3, [r7, #3]
 8001386:	f003 0307 	and.w	r3, r3, #7
 800138a:	009b      	lsls	r3, r3, #2
 800138c:	fa01 f303 	lsl.w	r3, r1, r3
 8001390:	78f9      	ldrb	r1, [r7, #3]
 8001392:	08c9      	lsrs	r1, r1, #3
 8001394:	b2c9      	uxtb	r1, r1
 8001396:	4608      	mov	r0, r1
 8001398:	ea42 0103 	orr.w	r1, r2, r3
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	f100 0210 	add.w	r2, r0, #16
 80013a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 80013a6:	bf00      	nop
 80013a8:	370c      	adds	r7, #12
 80013aa:	46bd      	mov	sp, r7
 80013ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b0:	4770      	bx	lr

080013b2 <delay>:

/*******************************************************************************
 * LOCAL FUNCTIONS
 *******************************************************************************/
static void delay(uint32_t cycles)
{
 80013b2:	b480      	push	{r7}
 80013b4:	b085      	sub	sp, #20
 80013b6:	af00      	add	r7, sp, #0
 80013b8:	6078      	str	r0, [r7, #4]
  volatile uint32_t i;

  for(i = 0UL; i < cycles ;++i)
 80013ba:	2300      	movs	r3, #0
 80013bc:	60fb      	str	r3, [r7, #12]
 80013be:	e003      	b.n	80013c8 <delay+0x16>
  {
    __NOP();
 80013c0:	bf00      	nop
  for(i = 0UL; i < cycles ;++i)
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	3301      	adds	r3, #1
 80013c6:	60fb      	str	r3, [r7, #12]
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	687a      	ldr	r2, [r7, #4]
 80013cc:	429a      	cmp	r2, r3
 80013ce:	d8f7      	bhi.n	80013c0 <delay+0xe>
  }
}
 80013d0:	bf00      	nop
 80013d2:	bf00      	nop
 80013d4:	3714      	adds	r7, #20
 80013d6:	46bd      	mov	sp, r7
 80013d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013dc:	4770      	bx	lr
	...

080013e0 <SystemInit>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

__WEAK void SystemInit(void)
{
 80013e0:	b598      	push	{r3, r4, r7, lr}
 80013e2:	af00      	add	r7, sp, #0
  memcpy(g_chipid, CHIPID_LOC, 16);
 80013e4:	4a06      	ldr	r2, [pc, #24]	; (8001400 <SystemInit+0x20>)
 80013e6:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80013ea:	4614      	mov	r4, r2
 80013ec:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80013ee:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  SystemCoreSetup();
 80013f2:	f000 f807 	bl	8001404 <SystemCoreSetup>
  SystemCoreClockSetup(); 
 80013f6:	f000 f83f 	bl	8001478 <SystemCoreClockSetup>
}
 80013fa:	bf00      	nop
 80013fc:	bd98      	pop	{r3, r4, r7, pc}
 80013fe:	bf00      	nop
 8001400:	2000ffc4 	.word	0x2000ffc4

08001404 <SystemCoreSetup>:

__WEAK void SystemCoreSetup(void)
{
 8001404:	b480      	push	{r7}
 8001406:	b083      	sub	sp, #12
 8001408:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800140a:	b672      	cpsid	i
}
 800140c:	bf00      	nop
  uint32_t temp;
	
  /* relocate vector table */
  __disable_irq();
  SCB->VTOR = (uint32_t)(&__Vectors);
 800140e:	4b17      	ldr	r3, [pc, #92]	; (800146c <SystemCoreSetup+0x68>)
 8001410:	4a17      	ldr	r2, [pc, #92]	; (8001470 <SystemCoreSetup+0x6c>)
 8001412:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001414:	f3bf 8f4f 	dsb	sy
}
 8001418:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
 800141a:	b662      	cpsie	i
}
 800141c:	bf00      	nop
  __DSB();
  __enable_irq();
    
#if ((__FPU_PRESENT == 1) && (__FPU_USED == 1))
  SCB->CPACR |= ((3UL << 10*2) |                 /* set CP10 Full Access */
 800141e:	4b13      	ldr	r3, [pc, #76]	; (800146c <SystemCoreSetup+0x68>)
 8001420:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001424:	4a11      	ldr	r2, [pc, #68]	; (800146c <SystemCoreSetup+0x68>)
 8001426:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800142a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
                 (3UL << 11*2)  );               /* set CP11 Full Access */
#endif

  /* Enable unaligned memory access - SCB_CCR.UNALIGN_TRP = 0 */
  SCB->CCR &= ~(SCB_CCR_UNALIGN_TRP_Msk);
 800142e:	4b0f      	ldr	r3, [pc, #60]	; (800146c <SystemCoreSetup+0x68>)
 8001430:	695b      	ldr	r3, [r3, #20]
 8001432:	4a0e      	ldr	r2, [pc, #56]	; (800146c <SystemCoreSetup+0x68>)
 8001434:	f023 0308 	bic.w	r3, r3, #8
 8001438:	6153      	str	r3, [r2, #20]

  temp = FLASH0->FCON;
 800143a:	4b0e      	ldr	r3, [pc, #56]	; (8001474 <SystemCoreSetup+0x70>)
 800143c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001440:	695b      	ldr	r3, [r3, #20]
 8001442:	607b      	str	r3, [r7, #4]
  temp &= ~FLASH_FCON_WSPFLASH_Msk;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	f023 030f 	bic.w	r3, r3, #15
 800144a:	607b      	str	r3, [r7, #4]
  temp |= PMU_FLASH_WS;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	f043 0303 	orr.w	r3, r3, #3
 8001452:	607b      	str	r3, [r7, #4]
  FLASH0->FCON = temp;
 8001454:	4b07      	ldr	r3, [pc, #28]	; (8001474 <SystemCoreSetup+0x70>)
 8001456:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800145a:	461a      	mov	r2, r3
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	6153      	str	r3, [r2, #20]
}
 8001460:	bf00      	nop
 8001462:	370c      	adds	r7, #12
 8001464:	46bd      	mov	sp, r7
 8001466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146a:	4770      	bx	lr
 800146c:	e000ed00 	.word	0xe000ed00
 8001470:	08000000 	.word	0x08000000
 8001474:	58001000 	.word	0x58001000

08001478 <SystemCoreClockSetup>:

__WEAK void SystemCoreClockSetup(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	af00      	add	r7, sp, #0
#else
  /* Automatic calibration uses the fSTDBY */

  /* Enable HIB domain */
  /* Power up HIB domain if and only if it is currently powered down */
  if((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0)
 800147c:	4b75      	ldr	r3, [pc, #468]	; (8001654 <SystemCoreClockSetup+0x1dc>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f003 0301 	and.w	r3, r3, #1
 8001484:	2b00      	cmp	r3, #0
 8001486:	d10c      	bne.n	80014a2 <SystemCoreClockSetup+0x2a>
  {
    SCU_POWER->PWRSET |= SCU_POWER_PWRSET_HIB_Msk;
 8001488:	4b72      	ldr	r3, [pc, #456]	; (8001654 <SystemCoreClockSetup+0x1dc>)
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	4a71      	ldr	r2, [pc, #452]	; (8001654 <SystemCoreClockSetup+0x1dc>)
 800148e:	f043 0301 	orr.w	r3, r3, #1
 8001492:	6053      	str	r3, [r2, #4]

    while((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0)
 8001494:	bf00      	nop
 8001496:	4b6f      	ldr	r3, [pc, #444]	; (8001654 <SystemCoreClockSetup+0x1dc>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f003 0301 	and.w	r3, r3, #1
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d0f9      	beq.n	8001496 <SystemCoreClockSetup+0x1e>
      /* wait until HIB domain is enabled */
    }
  }

  /* Remove the reset only if HIB domain were in a state of reset */
  if((SCU_RESET->RSTSTAT) & SCU_RESET_RSTSTAT_HIBRS_Msk)
 80014a2:	4b6d      	ldr	r3, [pc, #436]	; (8001658 <SystemCoreClockSetup+0x1e0>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d009      	beq.n	80014c2 <SystemCoreClockSetup+0x4a>
  {
    SCU_RESET->RSTCLR |= SCU_RESET_RSTCLR_HIBRS_Msk;
 80014ae:	4b6a      	ldr	r3, [pc, #424]	; (8001658 <SystemCoreClockSetup+0x1e0>)
 80014b0:	689b      	ldr	r3, [r3, #8]
 80014b2:	4a69      	ldr	r2, [pc, #420]	; (8001658 <SystemCoreClockSetup+0x1e0>)
 80014b4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80014b8:	6093      	str	r3, [r2, #8]
    delay(DELAY_CNT_150US_50MHZ);
 80014ba:	f641 504c 	movw	r0, #7500	; 0x1d4c
 80014be:	f7ff ff78 	bl	80013b2 <delay>
  SCU_HIBERNATE->HDCR |= SCU_HIBERNATE_HDCR_RCS_Msk | SCU_HIBERNATE_HDCR_STDBYSEL_Msk;

#endif /* STDBY_CLOCK_SRC == STDBY_CLOCK_SRC_OSCULP */

  /* Enable automatic calibration of internal fast oscillator */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_AOTREN_Msk;
 80014c2:	4b66      	ldr	r3, [pc, #408]	; (800165c <SystemCoreClockSetup+0x1e4>)
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	4a65      	ldr	r2, [pc, #404]	; (800165c <SystemCoreClockSetup+0x1e4>)
 80014c8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80014cc:	6053      	str	r3, [r2, #4]
#endif /* FOFI_CALIBRATION_MODE == FOFI_CALIBRATION_MODE_AUTOMATIC */

  delay(DELAY_CNT_50US_50MHZ);
 80014ce:	f640 10c4 	movw	r0, #2500	; 0x9c4
 80014d2:	f7ff ff6e 	bl	80013b2 <delay>

#if ENABLE_PLL

  /* enable PLL */
  SCU_PLL->PLLCON0 &= ~(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 80014d6:	4b61      	ldr	r3, [pc, #388]	; (800165c <SystemCoreClockSetup+0x1e4>)
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	4a60      	ldr	r2, [pc, #384]	; (800165c <SystemCoreClockSetup+0x1e4>)
 80014dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014e0:	f023 0302 	bic.w	r3, r3, #2
 80014e4:	6053      	str	r3, [r2, #4]

#if PLL_CLOCK_SRC != PLL_CLOCK_SRC_OFI
  /* enable OSC_HP */
  if ((SCU_OSC->OSCHPCTRL & SCU_OSC_OSCHPCTRL_MODE_Msk) != 0U)
 80014e6:	4b5e      	ldr	r3, [pc, #376]	; (8001660 <SystemCoreClockSetup+0x1e8>)
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d029      	beq.n	8001546 <SystemCoreClockSetup+0xce>
  {
    SCU_OSC->OSCHPCTRL &= ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk);
 80014f2:	4b5b      	ldr	r3, [pc, #364]	; (8001660 <SystemCoreClockSetup+0x1e8>)
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	4a5a      	ldr	r2, [pc, #360]	; (8001660 <SystemCoreClockSetup+0x1e8>)
 80014f8:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 80014fc:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001500:	6053      	str	r3, [r2, #4]
    SCU_OSC->OSCHPCTRL |= ((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos;
 8001502:	f000 f927 	bl	8001754 <OSCHP_GetFrequency>
 8001506:	4603      	mov	r3, r0
 8001508:	4a56      	ldr	r2, [pc, #344]	; (8001664 <SystemCoreClockSetup+0x1ec>)
 800150a:	fba2 2303 	umull	r2, r3, r2, r3
 800150e:	0d1b      	lsrs	r3, r3, #20
 8001510:	3b01      	subs	r3, #1
 8001512:	041a      	lsls	r2, r3, #16
 8001514:	4b52      	ldr	r3, [pc, #328]	; (8001660 <SystemCoreClockSetup+0x1e8>)
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	4951      	ldr	r1, [pc, #324]	; (8001660 <SystemCoreClockSetup+0x1e8>)
 800151a:	4313      	orrs	r3, r2
 800151c:	604b      	str	r3, [r1, #4]

    /* select OSC_HP clock as PLL input */
    SCU_PLL->PLLCON2 &= ~SCU_PLL_PLLCON2_PINSEL_Msk;
 800151e:	4b4f      	ldr	r3, [pc, #316]	; (800165c <SystemCoreClockSetup+0x1e4>)
 8001520:	68db      	ldr	r3, [r3, #12]
 8001522:	4a4e      	ldr	r2, [pc, #312]	; (800165c <SystemCoreClockSetup+0x1e4>)
 8001524:	f023 0301 	bic.w	r3, r3, #1
 8001528:	60d3      	str	r3, [r2, #12]

    /* restart OSC Watchdog */
    SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_OSCRES_Msk;
 800152a:	4b4c      	ldr	r3, [pc, #304]	; (800165c <SystemCoreClockSetup+0x1e4>)
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	4a4b      	ldr	r2, [pc, #300]	; (800165c <SystemCoreClockSetup+0x1e4>)
 8001530:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001534:	6053      	str	r3, [r2, #4]

    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_OSC_USABLE) != SCU_PLL_PLLSTAT_OSC_USABLE)
 8001536:	bf00      	nop
 8001538:	4b48      	ldr	r3, [pc, #288]	; (800165c <SystemCoreClockSetup+0x1e4>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f403 7360 	and.w	r3, r3, #896	; 0x380
 8001540:	f5b3 7f60 	cmp.w	r3, #896	; 0x380
 8001544:	d1f8      	bne.n	8001538 <SystemCoreClockSetup+0xc0>
  /* select backup clock as PLL input */
  SCU_PLL->PLLCON2 |= SCU_PLL_PLLCON2_PINSEL_Msk;
#endif

  /* Go to bypass the Main PLL */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_VCOBYP_Msk;
 8001546:	4b45      	ldr	r3, [pc, #276]	; (800165c <SystemCoreClockSetup+0x1e4>)
 8001548:	685b      	ldr	r3, [r3, #4]
 800154a:	4a44      	ldr	r2, [pc, #272]	; (800165c <SystemCoreClockSetup+0x1e4>)
 800154c:	f043 0301 	orr.w	r3, r3, #1
 8001550:	6053      	str	r3, [r2, #4]

  /* disconnect Oscillator from PLL */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_FINDIS_Msk;
 8001552:	4b42      	ldr	r3, [pc, #264]	; (800165c <SystemCoreClockSetup+0x1e4>)
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	4a41      	ldr	r2, [pc, #260]	; (800165c <SystemCoreClockSetup+0x1e4>)
 8001558:	f043 0310 	orr.w	r3, r3, #16
 800155c:	6053      	str	r3, [r2, #4]

  /* Setup divider settings for main PLL */
  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 800155e:	4b3f      	ldr	r3, [pc, #252]	; (800165c <SystemCoreClockSetup+0x1e4>)
 8001560:	4a41      	ldr	r2, [pc, #260]	; (8001668 <SystemCoreClockSetup+0x1f0>)
 8001562:	609a      	str	r2, [r3, #8]
                      (PLL_K2DIV_0 << SCU_PLL_PLLCON1_K2DIV_Pos) |
                      (PLL_PDIV << SCU_PLL_PLLCON1_PDIV_Pos));

  /* Set OSCDISCDIS */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_OSCDISCDIS_Msk;
 8001564:	4b3d      	ldr	r3, [pc, #244]	; (800165c <SystemCoreClockSetup+0x1e4>)
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	4a3c      	ldr	r2, [pc, #240]	; (800165c <SystemCoreClockSetup+0x1e4>)
 800156a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800156e:	6053      	str	r3, [r2, #4]

  /* connect Oscillator to PLL */
  SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_FINDIS_Msk;
 8001570:	4b3a      	ldr	r3, [pc, #232]	; (800165c <SystemCoreClockSetup+0x1e4>)
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	4a39      	ldr	r2, [pc, #228]	; (800165c <SystemCoreClockSetup+0x1e4>)
 8001576:	f023 0310 	bic.w	r3, r3, #16
 800157a:	6053      	str	r3, [r2, #4]

  /* restart PLL Lock detection */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_RESLD_Msk;
 800157c:	4b37      	ldr	r3, [pc, #220]	; (800165c <SystemCoreClockSetup+0x1e4>)
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	4a36      	ldr	r2, [pc, #216]	; (800165c <SystemCoreClockSetup+0x1e4>)
 8001582:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001586:	6053      	str	r3, [r2, #4]

  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 8001588:	bf00      	nop
 800158a:	4b34      	ldr	r3, [pc, #208]	; (800165c <SystemCoreClockSetup+0x1e4>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f003 0304 	and.w	r3, r3, #4
 8001592:	2b00      	cmp	r3, #0
 8001594:	d0f9      	beq.n	800158a <SystemCoreClockSetup+0x112>
  {
    /* wait for PLL Lock */
  }

  /* Disable bypass- put PLL clock back */
  SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_VCOBYP_Msk;
 8001596:	4b31      	ldr	r3, [pc, #196]	; (800165c <SystemCoreClockSetup+0x1e4>)
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	4a30      	ldr	r2, [pc, #192]	; (800165c <SystemCoreClockSetup+0x1e4>)
 800159c:	f023 0301 	bic.w	r3, r3, #1
 80015a0:	6053      	str	r3, [r2, #4]
  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) != 0U)
 80015a2:	bf00      	nop
 80015a4:	4b2d      	ldr	r3, [pc, #180]	; (800165c <SystemCoreClockSetup+0x1e4>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f003 0301 	and.w	r3, r3, #1
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d1f9      	bne.n	80015a4 <SystemCoreClockSetup+0x12c>
  }
#endif /* ENABLE_PLL */

#if (SYS_CLOCK_SRC == SYS_CLOCK_SRC_PLL)
  /* Switch system clock to PLL */
  SCU_CLK->SYSCLKCR |= SCU_CLK_SYSCLKCR_SYSSEL_Msk;
 80015b0:	4b2e      	ldr	r3, [pc, #184]	; (800166c <SystemCoreClockSetup+0x1f4>)
 80015b2:	68db      	ldr	r3, [r3, #12]
 80015b4:	4a2d      	ldr	r2, [pc, #180]	; (800166c <SystemCoreClockSetup+0x1f4>)
 80015b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015ba:	60d3      	str	r3, [r2, #12]
  /* Switch system clock to backup clock */
  SCU_CLK->SYSCLKCR &= ~SCU_CLK_SYSCLKCR_SYSSEL_Msk;
#endif

  /* Before scaling to final frequency we need to setup the clock dividers */
  SCU_CLK->PBCLKCR = PBCLKDIV;
 80015bc:	4b2b      	ldr	r3, [pc, #172]	; (800166c <SystemCoreClockSetup+0x1f4>)
 80015be:	2200      	movs	r2, #0
 80015c0:	615a      	str	r2, [r3, #20]
  SCU_CLK->CPUCLKCR = CPUCLKDIV;
 80015c2:	4b2a      	ldr	r3, [pc, #168]	; (800166c <SystemCoreClockSetup+0x1f4>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	611a      	str	r2, [r3, #16]
  SCU_CLK->CCUCLKCR = CCUCLKDIV;
 80015c8:	4b28      	ldr	r3, [pc, #160]	; (800166c <SystemCoreClockSetup+0x1f4>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	621a      	str	r2, [r3, #32]
  SCU_CLK->WDTCLKCR = WDTCLKDIV;
 80015ce:	4b27      	ldr	r3, [pc, #156]	; (800166c <SystemCoreClockSetup+0x1f4>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	625a      	str	r2, [r3, #36]	; 0x24
  SCU_CLK->EBUCLKCR = EBUCLKDIV;
 80015d4:	4b25      	ldr	r3, [pc, #148]	; (800166c <SystemCoreClockSetup+0x1f4>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	61da      	str	r2, [r3, #28]
  SCU_CLK->USBCLKCR = USBCLKDIV;
 80015da:	4b24      	ldr	r3, [pc, #144]	; (800166c <SystemCoreClockSetup+0x1f4>)
 80015dc:	2203      	movs	r2, #3
 80015de:	619a      	str	r2, [r3, #24]

#if ENABLE_PLL
  /* PLL frequency stepping...*/
  /* Reset OSCDISCDIS */
  SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_OSCDISCDIS_Msk;
 80015e0:	4b1e      	ldr	r3, [pc, #120]	; (800165c <SystemCoreClockSetup+0x1e4>)
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	4a1d      	ldr	r2, [pc, #116]	; (800165c <SystemCoreClockSetup+0x1e4>)
 80015e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80015ea:	6053      	str	r3, [r2, #4]

  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 80015ec:	4b1b      	ldr	r3, [pc, #108]	; (800165c <SystemCoreClockSetup+0x1e4>)
 80015ee:	4a20      	ldr	r2, [pc, #128]	; (8001670 <SystemCoreClockSetup+0x1f8>)
 80015f0:	609a      	str	r2, [r3, #8]
	                    (PLL_K2DIV_1 << SCU_PLL_PLLCON1_K2DIV_Pos) |
	                    (PLL_PDIV << SCU_PLL_PLLCON1_PDIV_Pos));


  delay(DELAY_CNT_50US_60MHZ);
 80015f2:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80015f6:	f7ff fedc 	bl	80013b2 <delay>
  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 80015fa:	bf00      	nop
 80015fc:	4b17      	ldr	r3, [pc, #92]	; (800165c <SystemCoreClockSetup+0x1e4>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f003 0304 	and.w	r3, r3, #4
 8001604:	2b00      	cmp	r3, #0
 8001606:	d0f9      	beq.n	80015fc <SystemCoreClockSetup+0x184>
  {
    /* wait for PLL Lock */
  }

  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 8001608:	4b14      	ldr	r3, [pc, #80]	; (800165c <SystemCoreClockSetup+0x1e4>)
 800160a:	4a1a      	ldr	r2, [pc, #104]	; (8001674 <SystemCoreClockSetup+0x1fc>)
 800160c:	609a      	str	r2, [r3, #8]
	                    (PLL_K2DIV_2 << SCU_PLL_PLLCON1_K2DIV_Pos) |
	                    (PLL_PDIV << SCU_PLL_PLLCON1_PDIV_Pos));


  delay(DELAY_CNT_50US_90MHZ);
 800160e:	f241 1094 	movw	r0, #4500	; 0x1194
 8001612:	f7ff fece 	bl	80013b2 <delay>
  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 8001616:	bf00      	nop
 8001618:	4b10      	ldr	r3, [pc, #64]	; (800165c <SystemCoreClockSetup+0x1e4>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f003 0304 	and.w	r3, r3, #4
 8001620:	2b00      	cmp	r3, #0
 8001622:	d0f9      	beq.n	8001618 <SystemCoreClockSetup+0x1a0>
  {
    /* wait for PLL Lock */
  }

  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 8001624:	4b0d      	ldr	r3, [pc, #52]	; (800165c <SystemCoreClockSetup+0x1e4>)
 8001626:	4a14      	ldr	r2, [pc, #80]	; (8001678 <SystemCoreClockSetup+0x200>)
 8001628:	609a      	str	r2, [r3, #8]
	                    (PLL_K2DIV << SCU_PLL_PLLCON1_K2DIV_Pos) |
	                    (PLL_PDIV << SCU_PLL_PLLCON1_PDIV_Pos));


  delay(DELAY_CNT_50US_120MHZ);
 800162a:	f241 7070 	movw	r0, #6000	; 0x1770
 800162e:	f7ff fec0 	bl	80013b2 <delay>
  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 8001632:	bf00      	nop
 8001634:	4b09      	ldr	r3, [pc, #36]	; (800165c <SystemCoreClockSetup+0x1e4>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f003 0304 	and.w	r3, r3, #4
 800163c:	2b00      	cmp	r3, #0
 800163e:	d0f9      	beq.n	8001634 <SystemCoreClockSetup+0x1bc>
  {
    /* wait for PLL Lock */
  }

  SCU_TRAP->TRAPCLR = SCU_TRAP_TRAPCLR_SOSCWDGT_Msk | SCU_TRAP_TRAPCLR_SVCOLCKT_Msk;
 8001640:	4b0e      	ldr	r3, [pc, #56]	; (800167c <SystemCoreClockSetup+0x204>)
 8001642:	2205      	movs	r2, #5
 8001644:	60da      	str	r2, [r3, #12]
    /* wait for PLL Lock */
  }
#endif /* (USBCLKDIV & SCU_CLK_USBCLKCR_USBSEL_Msk) */

  /* Enable selected clocks */
  SCU_CLK->CLKSET = ENABLE_SCUCLK;
 8001646:	4b09      	ldr	r3, [pc, #36]	; (800166c <SystemCoreClockSetup+0x1f4>)
 8001648:	2200      	movs	r2, #0
 800164a:	605a      	str	r2, [r3, #4]
  PORT0->IOCR8 = (PORT0->IOCR8 & ~PORT0_IOCR8_PC8_Msk) | (0x11U << PORT0_IOCR8_PC8_Pos);
#endif

#endif  /* ENABLE_EXTCLK == 1  */

  SystemCoreClockUpdate();
 800164c:	f000 f818 	bl	8001680 <SystemCoreClockUpdate>
}
 8001650:	bf00      	nop
 8001652:	bd80      	pop	{r7, pc}
 8001654:	50004200 	.word	0x50004200
 8001658:	50004400 	.word	0x50004400
 800165c:	50004710 	.word	0x50004710
 8001660:	50004700 	.word	0x50004700
 8001664:	6b5fca6b 	.word	0x6b5fca6b
 8001668:	01134f00 	.word	0x01134f00
 800166c:	50004600 	.word	0x50004600
 8001670:	01074f00 	.word	0x01074f00
 8001674:	01044f00 	.word	0x01044f00
 8001678:	01034f00 	.word	0x01034f00
 800167c:	50004160 	.word	0x50004160

08001680 <SystemCoreClockUpdate>:

__WEAK void SystemCoreClockUpdate(void)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b084      	sub	sp, #16
 8001684:	af00      	add	r7, sp, #0
  uint32_t pdiv;
  uint32_t ndiv;
  uint32_t kdiv;
  uint32_t temp;

  if (SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSSEL_Msk)
 8001686:	4b2f      	ldr	r3, [pc, #188]	; (8001744 <SystemCoreClockUpdate+0xc4>)
 8001688:	68db      	ldr	r3, [r3, #12]
 800168a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800168e:	2b00      	cmp	r3, #0
 8001690:	d03e      	beq.n	8001710 <SystemCoreClockUpdate+0x90>
  {
    /* fPLL is clock source for fSYS */
    if(SCU_PLL->PLLCON2 & SCU_PLL_PLLCON2_PINSEL_Msk)
 8001692:	4b2d      	ldr	r3, [pc, #180]	; (8001748 <SystemCoreClockUpdate+0xc8>)
 8001694:	68db      	ldr	r3, [r3, #12]
 8001696:	f003 0301 	and.w	r3, r3, #1
 800169a:	2b00      	cmp	r3, #0
 800169c:	d002      	beq.n	80016a4 <SystemCoreClockUpdate+0x24>
    {
      /* PLL input clock is the backup clock (fOFI) */
      temp = OFI_FREQUENCY;
 800169e:	4b2b      	ldr	r3, [pc, #172]	; (800174c <SystemCoreClockUpdate+0xcc>)
 80016a0:	60fb      	str	r3, [r7, #12]
 80016a2:	e002      	b.n	80016aa <SystemCoreClockUpdate+0x2a>
    }
    else
    {
      /* PLL input clock is the high performance osicllator (fOSCHP) */
      temp = OSCHP_GetFrequency();
 80016a4:	f000 f856 	bl	8001754 <OSCHP_GetFrequency>
 80016a8:	60f8      	str	r0, [r7, #12]
    }

    /* check if PLL is locked */
    if (SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk)
 80016aa:	4b27      	ldr	r3, [pc, #156]	; (8001748 <SystemCoreClockUpdate+0xc8>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f003 0304 	and.w	r3, r3, #4
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d020      	beq.n	80016f8 <SystemCoreClockUpdate+0x78>
    {
      /* PLL normal mode */
      /* read back divider settings */
      pdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_PDIV_Msk) >> SCU_PLL_PLLCON1_PDIV_Pos) + 1;
 80016b6:	4b24      	ldr	r3, [pc, #144]	; (8001748 <SystemCoreClockUpdate+0xc8>)
 80016b8:	689b      	ldr	r3, [r3, #8]
 80016ba:	0e1b      	lsrs	r3, r3, #24
 80016bc:	f003 030f 	and.w	r3, r3, #15
 80016c0:	3301      	adds	r3, #1
 80016c2:	607b      	str	r3, [r7, #4]
      ndiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_NDIV_Msk) >> SCU_PLL_PLLCON1_NDIV_Pos) + 1;
 80016c4:	4b20      	ldr	r3, [pc, #128]	; (8001748 <SystemCoreClockUpdate+0xc8>)
 80016c6:	689b      	ldr	r3, [r3, #8]
 80016c8:	0a1b      	lsrs	r3, r3, #8
 80016ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80016ce:	3301      	adds	r3, #1
 80016d0:	603b      	str	r3, [r7, #0]
      kdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K2DIV_Msk) >> SCU_PLL_PLLCON1_K2DIV_Pos) + 1;
 80016d2:	4b1d      	ldr	r3, [pc, #116]	; (8001748 <SystemCoreClockUpdate+0xc8>)
 80016d4:	689b      	ldr	r3, [r3, #8]
 80016d6:	0c1b      	lsrs	r3, r3, #16
 80016d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80016dc:	3301      	adds	r3, #1
 80016de:	60bb      	str	r3, [r7, #8]

      temp = (temp / (pdiv * kdiv)) * ndiv;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	68ba      	ldr	r2, [r7, #8]
 80016e4:	fb02 f303 	mul.w	r3, r2, r3
 80016e8:	68fa      	ldr	r2, [r7, #12]
 80016ea:	fbb2 f2f3 	udiv	r2, r2, r3
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	fb02 f303 	mul.w	r3, r2, r3
 80016f4:	60fb      	str	r3, [r7, #12]
 80016f6:	e00d      	b.n	8001714 <SystemCoreClockUpdate+0x94>
    }
    else
    {
      /* PLL prescalar mode */
      /* read back divider settings */
      kdiv  = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K1DIV_Msk) >> SCU_PLL_PLLCON1_K1DIV_Pos) + 1;
 80016f8:	4b13      	ldr	r3, [pc, #76]	; (8001748 <SystemCoreClockUpdate+0xc8>)
 80016fa:	689b      	ldr	r3, [r3, #8]
 80016fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001700:	3301      	adds	r3, #1
 8001702:	60bb      	str	r3, [r7, #8]
      
      temp = (temp / kdiv);
 8001704:	68fa      	ldr	r2, [r7, #12]
 8001706:	68bb      	ldr	r3, [r7, #8]
 8001708:	fbb2 f3f3 	udiv	r3, r2, r3
 800170c:	60fb      	str	r3, [r7, #12]
 800170e:	e001      	b.n	8001714 <SystemCoreClockUpdate+0x94>
    }
  }
  else
  {
    /* fOFI is clock source for fSYS */    
    temp = OFI_FREQUENCY;
 8001710:	4b0e      	ldr	r3, [pc, #56]	; (800174c <SystemCoreClockUpdate+0xcc>)
 8001712:	60fb      	str	r3, [r7, #12]
  }

  temp = temp / ((SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSDIV_Msk) + 1);
 8001714:	4b0b      	ldr	r3, [pc, #44]	; (8001744 <SystemCoreClockUpdate+0xc4>)
 8001716:	68db      	ldr	r3, [r3, #12]
 8001718:	b2db      	uxtb	r3, r3
 800171a:	3301      	adds	r3, #1
 800171c:	68fa      	ldr	r2, [r7, #12]
 800171e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001722:	60fb      	str	r3, [r7, #12]
  temp = temp / ((SCU_CLK->CPUCLKCR & SCU_CLK_CPUCLKCR_CPUDIV_Msk) + 1);
 8001724:	4b07      	ldr	r3, [pc, #28]	; (8001744 <SystemCoreClockUpdate+0xc4>)
 8001726:	691b      	ldr	r3, [r3, #16]
 8001728:	f003 0301 	and.w	r3, r3, #1
 800172c:	3301      	adds	r3, #1
 800172e:	68fa      	ldr	r2, [r7, #12]
 8001730:	fbb2 f3f3 	udiv	r3, r2, r3
 8001734:	60fb      	str	r3, [r7, #12]

  SystemCoreClock = temp;
 8001736:	4a06      	ldr	r2, [pc, #24]	; (8001750 <SystemCoreClockUpdate+0xd0>)
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	6013      	str	r3, [r2, #0]
}
 800173c:	bf00      	nop
 800173e:	3710      	adds	r7, #16
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}
 8001744:	50004600 	.word	0x50004600
 8001748:	50004710 	.word	0x50004710
 800174c:	016e3600 	.word	0x016e3600
 8001750:	2000ffc0 	.word	0x2000ffc0

08001754 <OSCHP_GetFrequency>:

__WEAK uint32_t OSCHP_GetFrequency(void)
{
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0
  return OSCHP_FREQUENCY;
 8001758:	4b02      	ldr	r3, [pc, #8]	; (8001764 <OSCHP_GetFrequency+0x10>)
}
 800175a:	4618      	mov	r0, r3
 800175c:	46bd      	mov	sp, r7
 800175e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001762:	4770      	bx	lr
 8001764:	00b71b00 	.word	0x00b71b00

08001768 <_sbrk>:

// defined in linker script
extern caddr_t Heap_Bank1_Start;
extern caddr_t Heap_Bank1_End;
caddr_t _sbrk(int nbytes)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b084      	sub	sp, #16
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  static caddr_t heap_ptr = NULL;
  caddr_t base;

  if (heap_ptr == NULL) {
 8001770:	4b14      	ldr	r3, [pc, #80]	; (80017c4 <_sbrk+0x5c>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	2b00      	cmp	r3, #0
 8001776:	d102      	bne.n	800177e <_sbrk+0x16>
    heap_ptr = (caddr_t)&Heap_Bank1_Start;
 8001778:	4b12      	ldr	r3, [pc, #72]	; (80017c4 <_sbrk+0x5c>)
 800177a:	4a13      	ldr	r2, [pc, #76]	; (80017c8 <_sbrk+0x60>)
 800177c:	601a      	str	r2, [r3, #0]
  }

  base = heap_ptr;
 800177e:	4b11      	ldr	r3, [pc, #68]	; (80017c4 <_sbrk+0x5c>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	60fb      	str	r3, [r7, #12]

  /* heap word alignment */
  nbytes = (nbytes + 3) & ~0x3U;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	3303      	adds	r3, #3
 8001788:	f023 0303 	bic.w	r3, r3, #3
 800178c:	607b      	str	r3, [r7, #4]
  if ((caddr_t)&Heap_Bank1_End > (heap_ptr + nbytes))
 800178e:	4b0d      	ldr	r3, [pc, #52]	; (80017c4 <_sbrk+0x5c>)
 8001790:	681a      	ldr	r2, [r3, #0]
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	4413      	add	r3, r2
 8001796:	4a0d      	ldr	r2, [pc, #52]	; (80017cc <_sbrk+0x64>)
 8001798:	4293      	cmp	r3, r2
 800179a:	d207      	bcs.n	80017ac <_sbrk+0x44>
  {
    heap_ptr += nbytes;
 800179c:	4b09      	ldr	r3, [pc, #36]	; (80017c4 <_sbrk+0x5c>)
 800179e:	681a      	ldr	r2, [r3, #0]
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	4413      	add	r3, r2
 80017a4:	4a07      	ldr	r2, [pc, #28]	; (80017c4 <_sbrk+0x5c>)
 80017a6:	6013      	str	r3, [r2, #0]
    return (base);
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	e006      	b.n	80017ba <_sbrk+0x52>
  }
  else
  {
    /* Heap overflow */
    errno = ENOMEM;
 80017ac:	f000 f818 	bl	80017e0 <__errno>
 80017b0:	4603      	mov	r3, r0
 80017b2:	220c      	movs	r2, #12
 80017b4:	601a      	str	r2, [r3, #0]
    return ((caddr_t)-1);
 80017b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  }
}
 80017ba:	4618      	mov	r0, r3
 80017bc:	3710      	adds	r7, #16
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	200007ec 	.word	0x200007ec
 80017c8:	200007f0 	.word	0x200007f0
 80017cc:	2000ffc0 	.word	0x2000ffc0

080017d0 <_init>:

/* Init */
void _init(void)
{}
 80017d0:	b480      	push	{r7}
 80017d2:	af00      	add	r7, sp, #0
 80017d4:	bf00      	nop
 80017d6:	46bd      	mov	sp, r7
 80017d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017dc:	4770      	bx	lr
	...

080017e0 <__errno>:
 80017e0:	4b01      	ldr	r3, [pc, #4]	; (80017e8 <__errno+0x8>)
 80017e2:	6818      	ldr	r0, [r3, #0]
 80017e4:	4770      	bx	lr
 80017e6:	bf00      	nop
 80017e8:	200003ac 	.word	0x200003ac

080017ec <__libc_init_array>:
 80017ec:	b570      	push	{r4, r5, r6, lr}
 80017ee:	4e0d      	ldr	r6, [pc, #52]	; (8001824 <__libc_init_array+0x38>)
 80017f0:	4d0d      	ldr	r5, [pc, #52]	; (8001828 <__libc_init_array+0x3c>)
 80017f2:	1b76      	subs	r6, r6, r5
 80017f4:	10b6      	asrs	r6, r6, #2
 80017f6:	d006      	beq.n	8001806 <__libc_init_array+0x1a>
 80017f8:	2400      	movs	r4, #0
 80017fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80017fe:	3401      	adds	r4, #1
 8001800:	4798      	blx	r3
 8001802:	42a6      	cmp	r6, r4
 8001804:	d1f9      	bne.n	80017fa <__libc_init_array+0xe>
 8001806:	4e09      	ldr	r6, [pc, #36]	; (800182c <__libc_init_array+0x40>)
 8001808:	4d09      	ldr	r5, [pc, #36]	; (8001830 <__libc_init_array+0x44>)
 800180a:	1b76      	subs	r6, r6, r5
 800180c:	f7ff ffe0 	bl	80017d0 <_init>
 8001810:	10b6      	asrs	r6, r6, #2
 8001812:	d006      	beq.n	8001822 <__libc_init_array+0x36>
 8001814:	2400      	movs	r4, #0
 8001816:	f855 3b04 	ldr.w	r3, [r5], #4
 800181a:	3401      	adds	r4, #1
 800181c:	4798      	blx	r3
 800181e:	42a6      	cmp	r6, r4
 8001820:	d1f9      	bne.n	8001816 <__libc_init_array+0x2a>
 8001822:	bd70      	pop	{r4, r5, r6, pc}
 8001824:	200007d8 	.word	0x200007d8
 8001828:	200007d8 	.word	0x200007d8
 800182c:	200007d8 	.word	0x200007d8
 8001830:	200007d8 	.word	0x200007d8

08001834 <_global_impure_ptr>:
 8001834:	200003b0                                ... 
