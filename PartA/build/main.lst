
build/main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002ba8  08000000  0c000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 Stack         00000800  10000000  10000000  00030000  2**0
                  ALLOC
  2 .ram_code     00000000  10000800  10000800  00020438  2**0
                  CONTENTS
  3 PSRAM_DATA    00000000  10000800  10000800  00020438  2**0
                  CONTENTS
  4 PSRAM_BSS     00000000  10000800  10000800  00020438  2**0
                  CONTENTS
  5 .data         00000438  20000000  0c002ba8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000090  20000438  0c002fe0  00020438  2**2
                  ALLOC
  7 .no_init      00000014  2000ffc0  2000ffc0  0002ffc0  2**2
                  ALLOC
  8 DSRAM2_DATA   00000000  30000000  30000000  00020438  2**0
                  CONTENTS
  9 DSRAM2_BSS    00000000  30000000  30000000  00020438  2**0
                  CONTENTS
 10 .debug_aranges 00000638  00000000  00000000  00020438  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_info   0000b036  00000000  00000000  00020a70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 0000198c  00000000  00000000  0002baa6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_line   00003c19  00000000  00000000  0002d432  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_frame  00001750  00000000  00000000  0003104c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00078c21  00000000  00000000  0003279c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_loc    0000322c  00000000  00000000  000ab3bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00000540  00000000  00000000  000ae5e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .build_attributes 00000256  00000000  00000000  000aeb29  2**0
                  CONTENTS, READONLY
 19 .debug_macro  0001905f  00000000  00000000  000aed7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000000 <__Vectors>:
 8000000:	00 08 00 10 01 02 00 08 b1 02 00 08 b1 02 00 08     ................
 8000010:	b1 02 00 08 b1 02 00 08 b1 02 00 08 00 00 00 00     ................
	...
 800002c:	b1 02 00 08 b1 02 00 08 00 00 00 00 b1 02 00 08     ................
 800003c:	95 03 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800004c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800005c:	b1 02 00 08 b1 02 00 08 00 00 00 00 00 00 00 00     ................
 800006c:	00 00 00 00 b1 02 00 08 00 00 00 00 b1 02 00 08     ................
 800007c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800008c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800009c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000ac:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000bc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000cc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000dc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000ec:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000fc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800010c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800011c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800012c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800013c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800014c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800015c:	b1 02 00 08 00 00 00 00 00 00 00 00 00 00 00 00     ................
 800016c:	00 00 00 00 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800017c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800018c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800019c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001ac:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001bc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001cc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001dc:	00 00 00 00 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001ec:	b1 02 00 08 b1 02 00 08 00 00 00 00 b1 02 00 08     ................
 80001fc:	00 00 00 00                                         ....

08000200 <Reset_Handler>:
 8000200:	f8df d08c 	ldr.w	sp, [pc, #140]	; 8000290 <__zero_table_end__>
 8000204:	4823      	ldr	r0, [pc, #140]	; (8000294 <__zero_table_end__+0x4>)
 8000206:	4780      	blx	r0
 8000208:	4c23      	ldr	r4, [pc, #140]	; (8000298 <__zero_table_end__+0x8>)
 800020a:	4d24      	ldr	r5, [pc, #144]	; (800029c <__zero_table_end__+0xc>)
 800020c:	42ac      	cmp	r4, r5
 800020e:	da09      	bge.n	8000224 <Reset_Handler+0x24>
 8000210:	6821      	ldr	r1, [r4, #0]
 8000212:	6862      	ldr	r2, [r4, #4]
 8000214:	68a3      	ldr	r3, [r4, #8]
 8000216:	3b04      	subs	r3, #4
 8000218:	bfa2      	ittt	ge
 800021a:	58c8      	ldrge	r0, [r1, r3]
 800021c:	50d0      	strge	r0, [r2, r3]
 800021e:	e7fa      	bge.n	8000216 <Reset_Handler+0x16>
 8000220:	340c      	adds	r4, #12
 8000222:	e7f3      	b.n	800020c <Reset_Handler+0xc>
 8000224:	4b1e      	ldr	r3, [pc, #120]	; (80002a0 <__zero_table_end__+0x10>)
 8000226:	4c1f      	ldr	r4, [pc, #124]	; (80002a4 <__zero_table_end__+0x14>)
 8000228:	42a3      	cmp	r3, r4
 800022a:	da08      	bge.n	800023e <Reset_Handler+0x3e>
 800022c:	6819      	ldr	r1, [r3, #0]
 800022e:	685a      	ldr	r2, [r3, #4]
 8000230:	2000      	movs	r0, #0
 8000232:	3a04      	subs	r2, #4
 8000234:	bfa4      	itt	ge
 8000236:	5088      	strge	r0, [r1, r2]
 8000238:	e7fb      	bge.n	8000232 <Reset_Handler+0x32>
 800023a:	3308      	adds	r3, #8
 800023c:	e7f4      	b.n	8000228 <Reset_Handler+0x28>
 800023e:	481a      	ldr	r0, [pc, #104]	; (80002a8 <__zero_table_end__+0x18>)
 8000240:	4780      	blx	r0
 8000242:	481a      	ldr	r0, [pc, #104]	; (80002ac <__zero_table_end__+0x1c>)
 8000244:	4780      	blx	r0
	...

08000248 <__copy_table_start__>:
 8000248:	0c002ba8 	.word	0x0c002ba8
 800024c:	20000000 	.word	0x20000000
 8000250:	00000438 	.word	0x00000438
 8000254:	0c002fe0 	.word	0x0c002fe0
 8000258:	30000000 	.word	0x30000000
 800025c:	00000000 	.word	0x00000000
 8000260:	0c002ba8 	.word	0x0c002ba8
 8000264:	10000800 	.word	0x10000800
 8000268:	00000000 	.word	0x00000000
 800026c:	0c002ba8 	.word	0x0c002ba8
 8000270:	10000800 	.word	0x10000800
 8000274:	00000000 	.word	0x00000000

08000278 <__copy_table_end__>:
 8000278:	20000438 	.word	0x20000438
 800027c:	0000008c 	.word	0x0000008c
 8000280:	30000000 	.word	0x30000000
 8000284:	00000000 	.word	0x00000000
 8000288:	10000800 	.word	0x10000800
 800028c:	00000000 	.word	0x00000000

08000290 <__zero_table_end__>:
 8000290:	10000800 	.word	0x10000800
 8000294:	080025b9 	.word	0x080025b9
 8000298:	08000248 	.word	0x08000248
 800029c:	08000278 	.word	0x08000278
 80002a0:	08000278 	.word	0x08000278
 80002a4:	08000290 	.word	0x08000290
 80002a8:	080029c9 	.word	0x080029c9
 80002ac:	080003d9 	.word	0x080003d9

080002b0 <BusFault_Handler>:
 80002b0:	e7fe      	b.n	80002b0 <BusFault_Handler>
	...

080002b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80002b4:	b480      	push	{r7}
 80002b6:	b083      	sub	sp, #12
 80002b8:	af00      	add	r7, sp, #0
 80002ba:	4603      	mov	r3, r0
 80002bc:	6039      	str	r1, [r7, #0]
 80002be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	db0a      	blt.n	80002de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002c8:	683b      	ldr	r3, [r7, #0]
 80002ca:	b2da      	uxtb	r2, r3
 80002cc:	490c      	ldr	r1, [pc, #48]	; (8000300 <__NVIC_SetPriority+0x4c>)
 80002ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002d2:	0092      	lsls	r2, r2, #2
 80002d4:	b2d2      	uxtb	r2, r2
 80002d6:	440b      	add	r3, r1
 80002d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80002dc:	e00a      	b.n	80002f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002de:	683b      	ldr	r3, [r7, #0]
 80002e0:	b2da      	uxtb	r2, r3
 80002e2:	4908      	ldr	r1, [pc, #32]	; (8000304 <__NVIC_SetPriority+0x50>)
 80002e4:	79fb      	ldrb	r3, [r7, #7]
 80002e6:	f003 030f 	and.w	r3, r3, #15
 80002ea:	3b04      	subs	r3, #4
 80002ec:	0092      	lsls	r2, r2, #2
 80002ee:	b2d2      	uxtb	r2, r2
 80002f0:	440b      	add	r3, r1
 80002f2:	761a      	strb	r2, [r3, #24]
}
 80002f4:	bf00      	nop
 80002f6:	370c      	adds	r7, #12
 80002f8:	46bd      	mov	sp, r7
 80002fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002fe:	4770      	bx	lr
 8000300:	e000e100 	.word	0xe000e100
 8000304:	e000ed00 	.word	0xe000ed00

08000308 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000308:	b580      	push	{r7, lr}
 800030a:	b082      	sub	sp, #8
 800030c:	af00      	add	r7, sp, #0
 800030e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	3b01      	subs	r3, #1
 8000314:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000318:	d301      	bcc.n	800031e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800031a:	2301      	movs	r3, #1
 800031c:	e00f      	b.n	800033e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800031e:	4a0a      	ldr	r2, [pc, #40]	; (8000348 <SysTick_Config+0x40>)
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	3b01      	subs	r3, #1
 8000324:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000326:	213f      	movs	r1, #63	; 0x3f
 8000328:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800032c:	f7ff ffc2 	bl	80002b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000330:	4b05      	ldr	r3, [pc, #20]	; (8000348 <SysTick_Config+0x40>)
 8000332:	2200      	movs	r2, #0
 8000334:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000336:	4b04      	ldr	r3, [pc, #16]	; (8000348 <SysTick_Config+0x40>)
 8000338:	2207      	movs	r2, #7
 800033a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800033c:	2300      	movs	r3, #0
}
 800033e:	4618      	mov	r0, r3
 8000340:	3708      	adds	r7, #8
 8000342:	46bd      	mov	sp, r7
 8000344:	bd80      	pop	{r7, pc}
 8000346:	bf00      	nop
 8000348:	e000e010 	.word	0xe000e010

0800034c <XMC_GPIO_SetOutputHigh>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputHigh(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 800034c:	b480      	push	{r7}
 800034e:	b083      	sub	sp, #12
 8000350:	af00      	add	r7, sp, #0
 8000352:	6078      	str	r0, [r7, #4]
 8000354:	460b      	mov	r3, r1
 8000356:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_SetOutputHigh: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = (uint32_t)0x1U << pin;
 8000358:	78fb      	ldrb	r3, [r7, #3]
 800035a:	2201      	movs	r2, #1
 800035c:	409a      	lsls	r2, r3
 800035e:	687b      	ldr	r3, [r7, #4]
 8000360:	605a      	str	r2, [r3, #4]
}
 8000362:	bf00      	nop
 8000364:	370c      	adds	r7, #12
 8000366:	46bd      	mov	sp, r7
 8000368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800036c:	4770      	bx	lr

0800036e <XMC_GPIO_SetOutputLow>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.\n
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputLow(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 800036e:	b480      	push	{r7}
 8000370:	b083      	sub	sp, #12
 8000372:	af00      	add	r7, sp, #0
 8000374:	6078      	str	r0, [r7, #4]
 8000376:	460b      	mov	r3, r1
 8000378:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_SetOutputLow: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = 0x10000U << pin;
 800037a:	78fb      	ldrb	r3, [r7, #3]
 800037c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000380:	409a      	lsls	r2, r3
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	605a      	str	r2, [r3, #4]
}
 8000386:	bf00      	nop
 8000388:	370c      	adds	r7, #12
 800038a:	46bd      	mov	sp, r7
 800038c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000390:	4770      	bx	lr
	...

08000394 <SysTick_Handler>:
 8000394:	b480      	push	{r7}
 8000396:	af00      	add	r7, sp, #0
 8000398:	4b0d      	ldr	r3, [pc, #52]	; (80003d0 <SysTick_Handler+0x3c>)
 800039a:	681b      	ldr	r3, [r3, #0]
 800039c:	3301      	adds	r3, #1
 800039e:	4a0c      	ldr	r2, [pc, #48]	; (80003d0 <SysTick_Handler+0x3c>)
 80003a0:	6013      	str	r3, [r2, #0]
 80003a2:	4b0b      	ldr	r3, [pc, #44]	; (80003d0 <SysTick_Handler+0x3c>)
 80003a4:	681b      	ldr	r3, [r3, #0]
 80003a6:	2b3c      	cmp	r3, #60	; 0x3c
 80003a8:	d90c      	bls.n	80003c4 <SysTick_Handler+0x30>
 80003aa:	4b0a      	ldr	r3, [pc, #40]	; (80003d4 <SysTick_Handler+0x40>)
 80003ac:	681b      	ldr	r3, [r3, #0]
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	d103      	bne.n	80003ba <SysTick_Handler+0x26>
 80003b2:	4b08      	ldr	r3, [pc, #32]	; (80003d4 <SysTick_Handler+0x40>)
 80003b4:	2201      	movs	r2, #1
 80003b6:	601a      	str	r2, [r3, #0]
 80003b8:	e004      	b.n	80003c4 <SysTick_Handler+0x30>
 80003ba:	4b06      	ldr	r3, [pc, #24]	; (80003d4 <SysTick_Handler+0x40>)
 80003bc:	681b      	ldr	r3, [r3, #0]
 80003be:	3301      	adds	r3, #1
 80003c0:	4a04      	ldr	r2, [pc, #16]	; (80003d4 <SysTick_Handler+0x40>)
 80003c2:	6013      	str	r3, [r2, #0]
 80003c4:	bf00      	nop
 80003c6:	46bd      	mov	sp, r7
 80003c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003cc:	4770      	bx	lr
 80003ce:	bf00      	nop
 80003d0:	20000000 	.word	0x20000000
 80003d4:	20000438 	.word	0x20000438

080003d8 <main>:
 80003d8:	b580      	push	{r7, lr}
 80003da:	b09c      	sub	sp, #112	; 0x70
 80003dc:	af00      	add	r7, sp, #0
 80003de:	4a26      	ldr	r2, [pc, #152]	; (8000478 <main+0xa0>)
 80003e0:	f107 030c 	add.w	r3, r7, #12
 80003e4:	4611      	mov	r1, r2
 80003e6:	225a      	movs	r2, #90	; 0x5a
 80003e8:	4618      	mov	r0, r3
 80003ea:	f002 fb11 	bl	8002a10 <memcpy>
 80003ee:	f107 0366 	add.w	r3, r7, #102	; 0x66
 80003f2:	2200      	movs	r2, #0
 80003f4:	601a      	str	r2, [r3, #0]
 80003f6:	711a      	strb	r2, [r3, #4]
 80003f8:	2380      	movs	r3, #128	; 0x80
 80003fa:	703b      	strb	r3, [r7, #0]
 80003fc:	2301      	movs	r3, #1
 80003fe:	607b      	str	r3, [r7, #4]
 8000400:	2304      	movs	r3, #4
 8000402:	723b      	strb	r3, [r7, #8]
 8000404:	463b      	mov	r3, r7
 8000406:	461a      	mov	r2, r3
 8000408:	2101      	movs	r1, #1
 800040a:	481c      	ldr	r0, [pc, #112]	; (800047c <main+0xa4>)
 800040c:	f000 f8a4 	bl	8000558 <XMC_GPIO_Init>
 8000410:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000414:	607b      	str	r3, [r7, #4]
 8000416:	463b      	mov	r3, r7
 8000418:	461a      	mov	r2, r3
 800041a:	2100      	movs	r1, #0
 800041c:	4817      	ldr	r0, [pc, #92]	; (800047c <main+0xa4>)
 800041e:	f000 f89b 	bl	8000558 <XMC_GPIO_Init>
 8000422:	4b17      	ldr	r3, [pc, #92]	; (8000480 <main+0xa8>)
 8000424:	681b      	ldr	r3, [r3, #0]
 8000426:	4a17      	ldr	r2, [pc, #92]	; (8000484 <main+0xac>)
 8000428:	fba2 2303 	umull	r2, r3, r2, r3
 800042c:	08db      	lsrs	r3, r3, #3
 800042e:	4618      	mov	r0, r3
 8000430:	f7ff ff6a 	bl	8000308 <SysTick_Config>
 8000434:	66f8      	str	r0, [r7, #108]	; 0x6c
 8000436:	4b14      	ldr	r3, [pc, #80]	; (8000488 <main+0xb0>)
 8000438:	681b      	ldr	r3, [r3, #0]
 800043a:	f107 0270 	add.w	r2, r7, #112	; 0x70
 800043e:	4413      	add	r3, r2
 8000440:	f813 3c64 	ldrb.w	r3, [r3, #-100]
 8000444:	2b03      	cmp	r3, #3
 8000446:	d00f      	beq.n	8000468 <main+0x90>
 8000448:	2b03      	cmp	r3, #3
 800044a:	dcf4      	bgt.n	8000436 <main+0x5e>
 800044c:	2b00      	cmp	r3, #0
 800044e:	d006      	beq.n	800045e <main+0x86>
 8000450:	2b01      	cmp	r3, #1
 8000452:	d1f0      	bne.n	8000436 <main+0x5e>
 8000454:	2101      	movs	r1, #1
 8000456:	4809      	ldr	r0, [pc, #36]	; (800047c <main+0xa4>)
 8000458:	f7ff ff78 	bl	800034c <XMC_GPIO_SetOutputHigh>
 800045c:	e00b      	b.n	8000476 <main+0x9e>
 800045e:	2101      	movs	r1, #1
 8000460:	4806      	ldr	r0, [pc, #24]	; (800047c <main+0xa4>)
 8000462:	f7ff ff84 	bl	800036e <XMC_GPIO_SetOutputLow>
 8000466:	e006      	b.n	8000476 <main+0x9e>
 8000468:	4b07      	ldr	r3, [pc, #28]	; (8000488 <main+0xb0>)
 800046a:	2200      	movs	r2, #0
 800046c:	601a      	str	r2, [r3, #0]
 800046e:	4b07      	ldr	r3, [pc, #28]	; (800048c <main+0xb4>)
 8000470:	2200      	movs	r2, #0
 8000472:	601a      	str	r2, [r3, #0]
 8000474:	bf00      	nop
 8000476:	e7de      	b.n	8000436 <main+0x5e>
 8000478:	08002b44 	.word	0x08002b44
 800047c:	48028100 	.word	0x48028100
 8000480:	2000ffc0 	.word	0x2000ffc0
 8000484:	cccccccd 	.word	0xcccccccd
 8000488:	20000438 	.word	0x20000438
 800048c:	20000000 	.word	0x20000000

08000490 <XMC_GPIO_SetMode>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_GPIO_SetMode(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_MODE_t mode)
{
 8000490:	b480      	push	{r7}
 8000492:	b083      	sub	sp, #12
 8000494:	af00      	add	r7, sp, #0
 8000496:	6078      	str	r0, [r7, #4]
 8000498:	460b      	mov	r3, r1
 800049a:	70fb      	strb	r3, [r7, #3]
 800049c:	4613      	mov	r3, r2
 800049e:	70bb      	strb	r3, [r7, #2]
  XMC_ASSERT("XMC_GPIO_SetMode: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_SetMode: Invalid mode", XMC_GPIO_IsModeValid(mode));

  port->IOCR[(uint32_t)pin >> 2U] &= ~(uint32_t)((uint32_t)PORT_IOCR_PC_Msk << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U)));
 80004a0:	78fb      	ldrb	r3, [r7, #3]
 80004a2:	089b      	lsrs	r3, r3, #2
 80004a4:	b2db      	uxtb	r3, r3
 80004a6:	461a      	mov	r2, r3
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	3204      	adds	r2, #4
 80004ac:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80004b0:	78fb      	ldrb	r3, [r7, #3]
 80004b2:	f003 0303 	and.w	r3, r3, #3
 80004b6:	00db      	lsls	r3, r3, #3
 80004b8:	21f8      	movs	r1, #248	; 0xf8
 80004ba:	fa01 f303 	lsl.w	r3, r1, r3
 80004be:	43db      	mvns	r3, r3
 80004c0:	78f9      	ldrb	r1, [r7, #3]
 80004c2:	0889      	lsrs	r1, r1, #2
 80004c4:	b2c9      	uxtb	r1, r1
 80004c6:	4608      	mov	r0, r1
 80004c8:	ea02 0103 	and.w	r1, r2, r3
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	1d02      	adds	r2, r0, #4
 80004d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  port->IOCR[(uint32_t)pin >> 2U] |= (uint32_t)mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
 80004d4:	78fb      	ldrb	r3, [r7, #3]
 80004d6:	089b      	lsrs	r3, r3, #2
 80004d8:	b2db      	uxtb	r3, r3
 80004da:	461a      	mov	r2, r3
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	3204      	adds	r2, #4
 80004e0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80004e4:	78b9      	ldrb	r1, [r7, #2]
 80004e6:	78fb      	ldrb	r3, [r7, #3]
 80004e8:	f003 0303 	and.w	r3, r3, #3
 80004ec:	00db      	lsls	r3, r3, #3
 80004ee:	fa01 f303 	lsl.w	r3, r1, r3
 80004f2:	78f9      	ldrb	r1, [r7, #3]
 80004f4:	0889      	lsrs	r1, r1, #2
 80004f6:	b2c9      	uxtb	r1, r1
 80004f8:	4608      	mov	r0, r1
 80004fa:	ea42 0103 	orr.w	r1, r2, r3
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	1d02      	adds	r2, r0, #4
 8000502:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8000506:	bf00      	nop
 8000508:	370c      	adds	r7, #12
 800050a:	46bd      	mov	sp, r7
 800050c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000510:	4770      	bx	lr

08000512 <XMC_GPIO_SetHardwareControl>:

void XMC_GPIO_SetHardwareControl(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_HWCTRL_t hwctrl)
{
 8000512:	b480      	push	{r7}
 8000514:	b083      	sub	sp, #12
 8000516:	af00      	add	r7, sp, #0
 8000518:	6078      	str	r0, [r7, #4]
 800051a:	460b      	mov	r3, r1
 800051c:	70fb      	strb	r3, [r7, #3]
 800051e:	4613      	mov	r3, r2
 8000520:	70bb      	strb	r3, [r7, #2]
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid hwctrl", XMC_GPIO_CHECK_HWCTRL(hwctrl));

  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8000526:	78fb      	ldrb	r3, [r7, #3]
 8000528:	005b      	lsls	r3, r3, #1
 800052a:	2103      	movs	r1, #3
 800052c:	fa01 f303 	lsl.w	r3, r1, r3
 8000530:	43db      	mvns	r3, r3
 8000532:	401a      	ands	r2, r3
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	675a      	str	r2, [r3, #116]	; 0x74
  port->HWSEL |= (uint32_t)hwctrl << ((uint32_t)pin << 1U);
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800053c:	78b9      	ldrb	r1, [r7, #2]
 800053e:	78fb      	ldrb	r3, [r7, #3]
 8000540:	005b      	lsls	r3, r3, #1
 8000542:	fa01 f303 	lsl.w	r3, r1, r3
 8000546:	431a      	orrs	r2, r3
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	675a      	str	r2, [r3, #116]	; 0x74
}
 800054c:	bf00      	nop
 800054e:	370c      	adds	r7, #12
 8000550:	46bd      	mov	sp, r7
 8000552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000556:	4770      	bx	lr

08000558 <XMC_GPIO_Init>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_GPIO_Init(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_CONFIG_t *const config)
{
 8000558:	b480      	push	{r7}
 800055a:	b085      	sub	sp, #20
 800055c:	af00      	add	r7, sp, #0
 800055e:	60f8      	str	r0, [r7, #12]
 8000560:	460b      	mov	r3, r1
 8000562:	607a      	str	r2, [r7, #4]
 8000564:	72fb      	strb	r3, [r7, #11]
  XMC_ASSERT("XMC_GPIO_Init: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_Init: Invalid mode", XMC_GPIO_IsModeValid(config->mode));
 
  /* Switch to input */
  port->IOCR[pin >> 2U] &= (uint32_t)~(PORT_IOCR_PC_Msk << (PORT_IOCR_PC_Size * (pin & 0x3U)));
 8000566:	7afb      	ldrb	r3, [r7, #11]
 8000568:	089b      	lsrs	r3, r3, #2
 800056a:	b2db      	uxtb	r3, r3
 800056c:	461a      	mov	r2, r3
 800056e:	68fb      	ldr	r3, [r7, #12]
 8000570:	3204      	adds	r2, #4
 8000572:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000576:	7afb      	ldrb	r3, [r7, #11]
 8000578:	f003 0303 	and.w	r3, r3, #3
 800057c:	00db      	lsls	r3, r3, #3
 800057e:	21f8      	movs	r1, #248	; 0xf8
 8000580:	fa01 f303 	lsl.w	r3, r1, r3
 8000584:	43db      	mvns	r3, r3
 8000586:	7af9      	ldrb	r1, [r7, #11]
 8000588:	0889      	lsrs	r1, r1, #2
 800058a:	b2c9      	uxtb	r1, r1
 800058c:	4608      	mov	r0, r1
 800058e:	ea02 0103 	and.w	r1, r2, r3
 8000592:	68fb      	ldr	r3, [r7, #12]
 8000594:	1d02      	adds	r2, r0, #4
 8000596:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* HW port control is disabled */
  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
 800059a:	68fb      	ldr	r3, [r7, #12]
 800059c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800059e:	7afb      	ldrb	r3, [r7, #11]
 80005a0:	005b      	lsls	r3, r3, #1
 80005a2:	2103      	movs	r1, #3
 80005a4:	fa01 f303 	lsl.w	r3, r1, r3
 80005a8:	43db      	mvns	r3, r3
 80005aa:	401a      	ands	r2, r3
 80005ac:	68fb      	ldr	r3, [r7, #12]
 80005ae:	675a      	str	r2, [r3, #116]	; 0x74


  /* Enable digital input */
  if (XMC_GPIO_CHECK_ANALOG_PORT(port))
 80005b0:	68fb      	ldr	r3, [r7, #12]
 80005b2:	4a38      	ldr	r2, [pc, #224]	; (8000694 <XMC_GPIO_Init+0x13c>)
 80005b4:	4293      	cmp	r3, r2
 80005b6:	d003      	beq.n	80005c0 <XMC_GPIO_Init+0x68>
 80005b8:	68fb      	ldr	r3, [r7, #12]
 80005ba:	4a37      	ldr	r2, [pc, #220]	; (8000698 <XMC_GPIO_Init+0x140>)
 80005bc:	4293      	cmp	r3, r2
 80005be:	d10a      	bne.n	80005d6 <XMC_GPIO_Init+0x7e>
  {
    port->PDISC &= ~(uint32_t)((uint32_t)0x1U << pin);
 80005c0:	68fb      	ldr	r3, [r7, #12]
 80005c2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80005c4:	7afb      	ldrb	r3, [r7, #11]
 80005c6:	2101      	movs	r1, #1
 80005c8:	fa01 f303 	lsl.w	r3, r1, r3
 80005cc:	43db      	mvns	r3, r3
 80005ce:	401a      	ands	r2, r3
 80005d0:	68fb      	ldr	r3, [r7, #12]
 80005d2:	661a      	str	r2, [r3, #96]	; 0x60
 80005d4:	e03c      	b.n	8000650 <XMC_GPIO_Init+0xf8>
  }
  else
  {
    /* Set output level */
    port->OMR = (uint32_t)config->output_level << pin;
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	685a      	ldr	r2, [r3, #4]
 80005da:	7afb      	ldrb	r3, [r7, #11]
 80005dc:	409a      	lsls	r2, r3
 80005de:	68fb      	ldr	r3, [r7, #12]
 80005e0:	605a      	str	r2, [r3, #4]

    /* Set output driver strength */
    port->PDR[pin >> 3U] &= (uint32_t)~(PORT_PDR_Msk << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U)));
 80005e2:	7afb      	ldrb	r3, [r7, #11]
 80005e4:	08db      	lsrs	r3, r3, #3
 80005e6:	b2db      	uxtb	r3, r3
 80005e8:	461a      	mov	r2, r3
 80005ea:	68fb      	ldr	r3, [r7, #12]
 80005ec:	3210      	adds	r2, #16
 80005ee:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80005f2:	7afb      	ldrb	r3, [r7, #11]
 80005f4:	f003 0307 	and.w	r3, r3, #7
 80005f8:	009b      	lsls	r3, r3, #2
 80005fa:	2107      	movs	r1, #7
 80005fc:	fa01 f303 	lsl.w	r3, r1, r3
 8000600:	43db      	mvns	r3, r3
 8000602:	7af9      	ldrb	r1, [r7, #11]
 8000604:	08c9      	lsrs	r1, r1, #3
 8000606:	b2c9      	uxtb	r1, r1
 8000608:	4608      	mov	r0, r1
 800060a:	ea02 0103 	and.w	r1, r2, r3
 800060e:	68fb      	ldr	r3, [r7, #12]
 8000610:	f100 0210 	add.w	r2, r0, #16
 8000614:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    port->PDR[pin >> 3U] |= (uint32_t)config->output_strength << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U));
 8000618:	7afb      	ldrb	r3, [r7, #11]
 800061a:	08db      	lsrs	r3, r3, #3
 800061c:	b2db      	uxtb	r3, r3
 800061e:	461a      	mov	r2, r3
 8000620:	68fb      	ldr	r3, [r7, #12]
 8000622:	3210      	adds	r2, #16
 8000624:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	7a1b      	ldrb	r3, [r3, #8]
 800062c:	4619      	mov	r1, r3
 800062e:	7afb      	ldrb	r3, [r7, #11]
 8000630:	f003 0307 	and.w	r3, r3, #7
 8000634:	009b      	lsls	r3, r3, #2
 8000636:	fa01 f303 	lsl.w	r3, r1, r3
 800063a:	7af9      	ldrb	r1, [r7, #11]
 800063c:	08c9      	lsrs	r1, r1, #3
 800063e:	b2c9      	uxtb	r1, r1
 8000640:	4608      	mov	r0, r1
 8000642:	ea42 0103 	orr.w	r1, r2, r3
 8000646:	68fb      	ldr	r3, [r7, #12]
 8000648:	f100 0210 	add.w	r2, r0, #16
 800064c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  /* Set mode */
  port->IOCR[pin >> 2U] |= (uint32_t)config->mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
 8000650:	7afb      	ldrb	r3, [r7, #11]
 8000652:	089b      	lsrs	r3, r3, #2
 8000654:	b2db      	uxtb	r3, r3
 8000656:	461a      	mov	r2, r3
 8000658:	68fb      	ldr	r3, [r7, #12]
 800065a:	3204      	adds	r2, #4
 800065c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	4619      	mov	r1, r3
 8000666:	7afb      	ldrb	r3, [r7, #11]
 8000668:	f003 0303 	and.w	r3, r3, #3
 800066c:	00db      	lsls	r3, r3, #3
 800066e:	fa01 f303 	lsl.w	r3, r1, r3
 8000672:	7af9      	ldrb	r1, [r7, #11]
 8000674:	0889      	lsrs	r1, r1, #2
 8000676:	b2c9      	uxtb	r1, r1
 8000678:	4608      	mov	r0, r1
 800067a:	ea42 0103 	orr.w	r1, r2, r3
 800067e:	68fb      	ldr	r3, [r7, #12]
 8000680:	1d02      	adds	r2, r0, #4
 8000682:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8000686:	bf00      	nop
 8000688:	3714      	adds	r7, #20
 800068a:	46bd      	mov	sp, r7
 800068c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop
 8000694:	48028e00 	.word	0x48028e00
 8000698:	48028f00 	.word	0x48028f00

0800069c <XMC_GPIO_SetOutputStrength>:

void XMC_GPIO_SetOutputStrength(XMC_GPIO_PORT_t *const port, const uint8_t pin, XMC_GPIO_OUTPUT_STRENGTH_t strength)
{
 800069c:	b480      	push	{r7}
 800069e:	b083      	sub	sp, #12
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
 80006a4:	460b      	mov	r3, r1
 80006a6:	70fb      	strb	r3, [r7, #3]
 80006a8:	4613      	mov	r3, r2
 80006aa:	70bb      	strb	r3, [r7, #2]
  XMC_ASSERT("XMC_GPIO_Init: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));
  XMC_ASSERT("XMC_GPIO_Init: Invalid output strength", XMC_GPIO_CHECK_OUTPUT_STRENGTH(strength));

  port->PDR[pin >> 3U] &= (uint32_t)~((uint32_t)PORT_PDR_Msk << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U)));
 80006ac:	78fb      	ldrb	r3, [r7, #3]
 80006ae:	08db      	lsrs	r3, r3, #3
 80006b0:	b2db      	uxtb	r3, r3
 80006b2:	461a      	mov	r2, r3
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	3210      	adds	r2, #16
 80006b8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80006bc:	78fb      	ldrb	r3, [r7, #3]
 80006be:	f003 0307 	and.w	r3, r3, #7
 80006c2:	009b      	lsls	r3, r3, #2
 80006c4:	2107      	movs	r1, #7
 80006c6:	fa01 f303 	lsl.w	r3, r1, r3
 80006ca:	43db      	mvns	r3, r3
 80006cc:	78f9      	ldrb	r1, [r7, #3]
 80006ce:	08c9      	lsrs	r1, r1, #3
 80006d0:	b2c9      	uxtb	r1, r1
 80006d2:	4608      	mov	r0, r1
 80006d4:	ea02 0103 	and.w	r1, r2, r3
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	f100 0210 	add.w	r2, r0, #16
 80006de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  port->PDR[pin >> 3U] |= (uint32_t)strength << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U));
 80006e2:	78fb      	ldrb	r3, [r7, #3]
 80006e4:	08db      	lsrs	r3, r3, #3
 80006e6:	b2db      	uxtb	r3, r3
 80006e8:	461a      	mov	r2, r3
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	3210      	adds	r2, #16
 80006ee:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80006f2:	78b9      	ldrb	r1, [r7, #2]
 80006f4:	78fb      	ldrb	r3, [r7, #3]
 80006f6:	f003 0307 	and.w	r3, r3, #7
 80006fa:	009b      	lsls	r3, r3, #2
 80006fc:	fa01 f303 	lsl.w	r3, r1, r3
 8000700:	78f9      	ldrb	r1, [r7, #3]
 8000702:	08c9      	lsrs	r1, r1, #3
 8000704:	b2c9      	uxtb	r1, r1
 8000706:	4608      	mov	r0, r1
 8000708:	ea42 0103 	orr.w	r1, r2, r3
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	f100 0210 	add.w	r2, r0, #16
 8000712:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8000716:	bf00      	nop
 8000718:	370c      	adds	r7, #12
 800071a:	46bd      	mov	sp, r7
 800071c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000720:	4770      	bx	lr
	...

08000724 <XMC_SCU_GetMirrorStatus>:
 * that a corresponding register of the hibernate domain is ready to accept a write or that the communication interface
 * is busy with executing the previous operation.\n
 * Note: There is no hibernate domain in XMC1x devices. This register is retained for legacy purpose.
 */
__STATIC_INLINE uint32_t XMC_SCU_GetMirrorStatus(void)
{
 8000724:	b480      	push	{r7}
 8000726:	af00      	add	r7, sp, #0
  return(SCU_GENERAL->MIRRSTS);
 8000728:	4b03      	ldr	r3, [pc, #12]	; (8000738 <XMC_SCU_GetMirrorStatus+0x14>)
 800072a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
}
 800072e:	4618      	mov	r0, r3
 8000730:	46bd      	mov	sp, r7
 8000732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000736:	4770      	bx	lr
 8000738:	50004000 	.word	0x50004000

0800073c <XMC_RTC_Start>:

/*
 * Enables RTC peripheral to start counting time
 */
void XMC_RTC_Start(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0
  while((XMC_SCU_GetMirrorStatus() & SCU_GENERAL_MIRRSTS_RTC_CTR_Msk) != 0U)
 8000740:	bf00      	nop
 8000742:	f7ff ffef 	bl	8000724 <XMC_SCU_GetMirrorStatus>
 8000746:	4603      	mov	r3, r0
 8000748:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800074c:	2b00      	cmp	r3, #0
 800074e:	d1f8      	bne.n	8000742 <XMC_RTC_Start+0x6>
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  RTC->CTR |= (uint32_t)RTC_CTR_ENB_Msk;
 8000750:	4b03      	ldr	r3, [pc, #12]	; (8000760 <XMC_RTC_Start+0x24>)
 8000752:	685b      	ldr	r3, [r3, #4]
 8000754:	4a02      	ldr	r2, [pc, #8]	; (8000760 <XMC_RTC_Start+0x24>)
 8000756:	f043 0301 	orr.w	r3, r3, #1
 800075a:	6053      	str	r3, [r2, #4]
}
 800075c:	bf00      	nop
 800075e:	bd80      	pop	{r7, pc}
 8000760:	50004a00 	.word	0x50004a00

08000764 <XMC_RTC_Stop>:

/*
 * Disables RTC peripheral to start counting time
 */
void XMC_RTC_Stop(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0
  while((XMC_SCU_GetMirrorStatus() & SCU_GENERAL_MIRRSTS_RTC_CTR_Msk) != 0U)
 8000768:	bf00      	nop
 800076a:	f7ff ffdb 	bl	8000724 <XMC_SCU_GetMirrorStatus>
 800076e:	4603      	mov	r3, r0
 8000770:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000774:	2b00      	cmp	r3, #0
 8000776:	d1f8      	bne.n	800076a <XMC_RTC_Stop+0x6>
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  RTC->CTR &= ~(uint32_t)RTC_CTR_ENB_Msk;
 8000778:	4b03      	ldr	r3, [pc, #12]	; (8000788 <XMC_RTC_Stop+0x24>)
 800077a:	685b      	ldr	r3, [r3, #4]
 800077c:	4a02      	ldr	r2, [pc, #8]	; (8000788 <XMC_RTC_Stop+0x24>)
 800077e:	f023 0301 	bic.w	r3, r3, #1
 8000782:	6053      	str	r3, [r2, #4]
}
 8000784:	bf00      	nop
 8000786:	bd80      	pop	{r7, pc}
 8000788:	50004a00 	.word	0x50004a00

0800078c <XMC_RTC_SetPrescaler>:

/*
 * Sets the RTC module prescaler value
 */
void XMC_RTC_SetPrescaler(uint16_t prescaler)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b082      	sub	sp, #8
 8000790:	af00      	add	r7, sp, #0
 8000792:	4603      	mov	r3, r0
 8000794:	80fb      	strh	r3, [r7, #6]
  XMC_ASSERT("XMC_RTC_SetPrescaler:Wrong prescaler value", (prescaler < XMC_RTC_MAXPRESCALER));
  
  while((XMC_SCU_GetMirrorStatus() & SCU_GENERAL_MIRRSTS_RTC_CTR_Msk) != 0U)
 8000796:	bf00      	nop
 8000798:	f7ff ffc4 	bl	8000724 <XMC_SCU_GetMirrorStatus>
 800079c:	4603      	mov	r3, r0
 800079e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d1f8      	bne.n	8000798 <XMC_RTC_SetPrescaler+0xc>
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  RTC->CTR = (RTC->CTR & ~(uint32_t)RTC_CTR_DIV_Msk) |
 80007a6:	4b06      	ldr	r3, [pc, #24]	; (80007c0 <XMC_RTC_SetPrescaler+0x34>)
 80007a8:	685b      	ldr	r3, [r3, #4]
 80007aa:	b29a      	uxth	r2, r3
             ((uint32_t)prescaler << (uint32_t)RTC_CTR_DIV_Pos);
 80007ac:	88fb      	ldrh	r3, [r7, #6]
 80007ae:	041b      	lsls	r3, r3, #16
  RTC->CTR = (RTC->CTR & ~(uint32_t)RTC_CTR_DIV_Msk) |
 80007b0:	4903      	ldr	r1, [pc, #12]	; (80007c0 <XMC_RTC_SetPrescaler+0x34>)
 80007b2:	4313      	orrs	r3, r2
 80007b4:	604b      	str	r3, [r1, #4]
}
 80007b6:	bf00      	nop
 80007b8:	3708      	adds	r7, #8
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	50004a00 	.word	0x50004a00

080007c4 <XMC_RTC_SetTime>:

/*
 * Sets the RTC_TIM0, RTC_TIM1 registers with time values
 */
void XMC_RTC_SetTime(const XMC_RTC_TIME_t *const time)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b082      	sub	sp, #8
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_RTC_SetTime:Wrong week day value", ((uint32_t)time->daysofweek < XMC_RTC_MAXDAYSOFWEEK));
  XMC_ASSERT("XMC_RTC_SetTime:Wrong month value", ((uint32_t)time->month < XMC_RTC_MAXMONTH));
  XMC_ASSERT("XMC_RTC_SetTime:Wrong year value", ((uint32_t)time->year < XMC_RTC_MAXYEAR));

  #if (XMC_RTC_INIT_SEQUENCE == 1U)
      while ((XMC_SCU_GetMirrorStatus() & SCU_GENERAL_MIRRSTS_RTC_TIM0_Msk) != 0U)
 80007cc:	bf00      	nop
 80007ce:	f7ff ffa9 	bl	8000724 <XMC_SCU_GetMirrorStatus>
 80007d2:	4603      	mov	r3, r0
 80007d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d1f8      	bne.n	80007ce <XMC_RTC_SetTime+0xa>
      { 
         /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
      }
      RTC->TIM0 = time->raw0;
 80007dc:	4a09      	ldr	r2, [pc, #36]	; (8000804 <XMC_RTC_SetTime+0x40>)
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	6213      	str	r3, [r2, #32]
      
      while ((XMC_SCU_GetMirrorStatus() & SCU_GENERAL_MIRRSTS_RTC_TIM1_Msk) != 0U)
 80007e4:	bf00      	nop
 80007e6:	f7ff ff9d 	bl	8000724 <XMC_SCU_GetMirrorStatus>
 80007ea:	4603      	mov	r3, r0
 80007ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d1f8      	bne.n	80007e6 <XMC_RTC_SetTime+0x22>
      {
        /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
      }
      RTC->TIM1 = time->raw1;	     
 80007f4:	4a03      	ldr	r2, [pc, #12]	; (8000804 <XMC_RTC_SetTime+0x40>)
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	685b      	ldr	r3, [r3, #4]
 80007fa:	6253      	str	r3, [r2, #36]	; 0x24
        /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
      }
      RTC->TIM0 = time->raw0;
      RTC->TIM1 = time->raw1;	; 
  #endif  
}
 80007fc:	bf00      	nop
 80007fe:	3708      	adds	r7, #8
 8000800:	46bd      	mov	sp, r7
 8000802:	bd80      	pop	{r7, pc}
 8000804:	50004a00 	.word	0x50004a00

08000808 <XMC_RTC_GetTime>:

/*
 * Gets the RTC module time value
 */
void XMC_RTC_GetTime(XMC_RTC_TIME_t *const time)
{
 8000808:	b480      	push	{r7}
 800080a:	b083      	sub	sp, #12
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
  time->raw0 = RTC->TIM0;
 8000810:	4b06      	ldr	r3, [pc, #24]	; (800082c <XMC_RTC_GetTime+0x24>)
 8000812:	6a1a      	ldr	r2, [r3, #32]
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	601a      	str	r2, [r3, #0]
  time->raw1 = RTC->TIM1;
 8000818:	4b04      	ldr	r3, [pc, #16]	; (800082c <XMC_RTC_GetTime+0x24>)
 800081a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	605a      	str	r2, [r3, #4]
}
 8000820:	bf00      	nop
 8000822:	370c      	adds	r7, #12
 8000824:	46bd      	mov	sp, r7
 8000826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082a:	4770      	bx	lr
 800082c:	50004a00 	.word	0x50004a00

08000830 <XMC_RTC_SetTimeStdFormat>:

/*
 * Sets the RTC module time values in standard format
 */
void XMC_RTC_SetTimeStdFormat(const struct tm *const stdtime)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b084      	sub	sp, #16
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]

  XMC_RTC_TIME_t time;

  time.seconds = stdtime->tm_sec;
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000840:	b2da      	uxtb	r2, r3
 8000842:	7a3b      	ldrb	r3, [r7, #8]
 8000844:	f362 0305 	bfi	r3, r2, #0, #6
 8000848:	723b      	strb	r3, [r7, #8]
  time.minutes = stdtime->tm_min;
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	685b      	ldr	r3, [r3, #4]
 800084e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000852:	b2da      	uxtb	r2, r3
 8000854:	7a7b      	ldrb	r3, [r7, #9]
 8000856:	f362 0305 	bfi	r3, r2, #0, #6
 800085a:	727b      	strb	r3, [r7, #9]
  time.hours = stdtime->tm_hour;
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	689b      	ldr	r3, [r3, #8]
 8000860:	f003 031f 	and.w	r3, r3, #31
 8000864:	b2da      	uxtb	r2, r3
 8000866:	7abb      	ldrb	r3, [r7, #10]
 8000868:	f362 0304 	bfi	r3, r2, #0, #5
 800086c:	72bb      	strb	r3, [r7, #10]
  time.days = stdtime->tm_mday - 1;
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	68db      	ldr	r3, [r3, #12]
 8000872:	b2db      	uxtb	r3, r3
 8000874:	3b01      	subs	r3, #1
 8000876:	b2db      	uxtb	r3, r3
 8000878:	f003 031f 	and.w	r3, r3, #31
 800087c:	b2da      	uxtb	r2, r3
 800087e:	7afb      	ldrb	r3, [r7, #11]
 8000880:	f362 0304 	bfi	r3, r2, #0, #5
 8000884:	72fb      	strb	r3, [r7, #11]
  time.month = stdtime->tm_mon;
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	691b      	ldr	r3, [r3, #16]
 800088a:	f003 030f 	and.w	r3, r3, #15
 800088e:	b2da      	uxtb	r2, r3
 8000890:	7b7b      	ldrb	r3, [r7, #13]
 8000892:	f362 0303 	bfi	r3, r2, #0, #4
 8000896:	737b      	strb	r3, [r7, #13]
  time.year = stdtime->tm_year + XMC_RTC_YEAR_OFFSET;
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	695b      	ldr	r3, [r3, #20]
 800089c:	b29b      	uxth	r3, r3
 800089e:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 80008a2:	b29b      	uxth	r3, r3
 80008a4:	81fb      	strh	r3, [r7, #14]
  time.daysofweek = stdtime->tm_wday;
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	699b      	ldr	r3, [r3, #24]
 80008aa:	f003 0307 	and.w	r3, r3, #7
 80008ae:	b2da      	uxtb	r2, r3
 80008b0:	7b3b      	ldrb	r3, [r7, #12]
 80008b2:	f362 0302 	bfi	r3, r2, #0, #3
 80008b6:	733b      	strb	r3, [r7, #12]

  XMC_RTC_SetTime(&time);
 80008b8:	f107 0308 	add.w	r3, r7, #8
 80008bc:	4618      	mov	r0, r3
 80008be:	f7ff ff81 	bl	80007c4 <XMC_RTC_SetTime>
}
 80008c2:	bf00      	nop
 80008c4:	3710      	adds	r7, #16
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}
	...

080008cc <XMC_RTC_GetTimeStdFormat>:

/*
 * Gets the RTC module time values in standard format
 */
void XMC_RTC_GetTimeStdFormat(struct tm *const stdtime)
{
 80008cc:	b480      	push	{r7}
 80008ce:	b085      	sub	sp, #20
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
  XMC_RTC_TIME_t time;
  time.raw0 = RTC->TIM0;
 80008d4:	4b1d      	ldr	r3, [pc, #116]	; (800094c <XMC_RTC_GetTimeStdFormat+0x80>)
 80008d6:	6a1b      	ldr	r3, [r3, #32]
 80008d8:	60bb      	str	r3, [r7, #8]
  time.raw1 = RTC->TIM1;
 80008da:	4b1c      	ldr	r3, [pc, #112]	; (800094c <XMC_RTC_GetTimeStdFormat+0x80>)
 80008dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008de:	60fb      	str	r3, [r7, #12]
  
  stdtime->tm_sec = (int8_t)time.seconds;
 80008e0:	7a3b      	ldrb	r3, [r7, #8]
 80008e2:	f3c3 0305 	ubfx	r3, r3, #0, #6
 80008e6:	b2db      	uxtb	r3, r3
 80008e8:	461a      	mov	r2, r3
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	601a      	str	r2, [r3, #0]
  stdtime->tm_min = (int8_t)time.minutes;
 80008ee:	7a7b      	ldrb	r3, [r7, #9]
 80008f0:	f3c3 0305 	ubfx	r3, r3, #0, #6
 80008f4:	b2db      	uxtb	r3, r3
 80008f6:	461a      	mov	r2, r3
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	605a      	str	r2, [r3, #4]
  stdtime->tm_hour = (int8_t)time.hours;
 80008fc:	7abb      	ldrb	r3, [r7, #10]
 80008fe:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8000902:	b2db      	uxtb	r3, r3
 8000904:	461a      	mov	r2, r3
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	609a      	str	r2, [r3, #8]
  stdtime->tm_mday = ((int8_t)time.days + (int8_t)1);
 800090a:	7afb      	ldrb	r3, [r7, #11]
 800090c:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8000910:	b2db      	uxtb	r3, r3
 8000912:	1c5a      	adds	r2, r3, #1
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	60da      	str	r2, [r3, #12]
  stdtime->tm_mon = (int8_t)time.month;
 8000918:	7b7b      	ldrb	r3, [r7, #13]
 800091a:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800091e:	b2db      	uxtb	r3, r3
 8000920:	461a      	mov	r2, r3
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	611a      	str	r2, [r3, #16]
  stdtime->tm_year = (int32_t)time.year - (int32_t)XMC_RTC_YEAR_OFFSET;
 8000926:	89fb      	ldrh	r3, [r7, #14]
 8000928:	f2a3 726c 	subw	r2, r3, #1900	; 0x76c
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	615a      	str	r2, [r3, #20]
  stdtime->tm_wday = (int8_t)time.daysofweek;
 8000930:	7b3b      	ldrb	r3, [r7, #12]
 8000932:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8000936:	b2db      	uxtb	r3, r3
 8000938:	461a      	mov	r2, r3
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	619a      	str	r2, [r3, #24]
}
 800093e:	bf00      	nop
 8000940:	3714      	adds	r7, #20
 8000942:	46bd      	mov	sp, r7
 8000944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000948:	4770      	bx	lr
 800094a:	bf00      	nop
 800094c:	50004a00 	.word	0x50004a00

08000950 <XMC_RTC_SetAlarm>:

/*
 * Sets the RTC module alarm time value
 */
void XMC_RTC_SetAlarm(const XMC_RTC_ALARM_t *const alarm)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b082      	sub	sp, #8
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_RTC_SetAlarm:Wrong days value", ((uint32_t)alarm->days < XMC_RTC_MAXDAYS));
  XMC_ASSERT("XMC_RTC_SetAlarm:Wrong month value", ((uint32_t)alarm->month < XMC_RTC_MAXMONTH));
  XMC_ASSERT("XMC_RTC_SetAlarm:Wrong year value", ((uint32_t)alarm->year < XMC_RTC_MAXYEAR));

  #if (XMC_RTC_INIT_SEQUENCE == 1U)
      while ((XMC_SCU_GetMirrorStatus() & SCU_GENERAL_MIRRSTS_RTC_ATIM0_Msk) != 0U)
 8000958:	bf00      	nop
 800095a:	f7ff fee3 	bl	8000724 <XMC_SCU_GetMirrorStatus>
 800095e:	4603      	mov	r3, r0
 8000960:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000964:	2b00      	cmp	r3, #0
 8000966:	d1f8      	bne.n	800095a <XMC_RTC_SetAlarm+0xa>
      {
        /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
      }
      RTC->ATIM0 = alarm->raw0;
 8000968:	4a09      	ldr	r2, [pc, #36]	; (8000990 <XMC_RTC_SetAlarm+0x40>)
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	6193      	str	r3, [r2, #24]
      
      while ((XMC_SCU_GetMirrorStatus() & SCU_GENERAL_MIRRSTS_RTC_ATIM1_Msk) != 0U)
 8000970:	bf00      	nop
 8000972:	f7ff fed7 	bl	8000724 <XMC_SCU_GetMirrorStatus>
 8000976:	4603      	mov	r3, r0
 8000978:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800097c:	2b00      	cmp	r3, #0
 800097e:	d1f8      	bne.n	8000972 <XMC_RTC_SetAlarm+0x22>
      {
        /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
      }
      RTC->ATIM1 = alarm->raw1; 
 8000980:	4a03      	ldr	r2, [pc, #12]	; (8000990 <XMC_RTC_SetAlarm+0x40>)
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	685b      	ldr	r3, [r3, #4]
 8000986:	61d3      	str	r3, [r2, #28]
        /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
      }
      RTC->ATIM0 = alarm->raw0;
      RTC->ATIM1 = alarm->raw1; 
  #endif  
}
 8000988:	bf00      	nop
 800098a:	3708      	adds	r7, #8
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}
 8000990:	50004a00 	.word	0x50004a00

08000994 <XMC_RTC_GetAlarm>:

/*
 * Gets the RTC module alarm time value
 */
void XMC_RTC_GetAlarm(XMC_RTC_ALARM_t *const alarm)
{
 8000994:	b480      	push	{r7}
 8000996:	b083      	sub	sp, #12
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
  alarm->raw0 = RTC->ATIM0;
 800099c:	4b06      	ldr	r3, [pc, #24]	; (80009b8 <XMC_RTC_GetAlarm+0x24>)
 800099e:	699a      	ldr	r2, [r3, #24]
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	601a      	str	r2, [r3, #0]
  alarm->raw1 = RTC->ATIM1;
 80009a4:	4b04      	ldr	r3, [pc, #16]	; (80009b8 <XMC_RTC_GetAlarm+0x24>)
 80009a6:	69da      	ldr	r2, [r3, #28]
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	605a      	str	r2, [r3, #4]
}
 80009ac:	bf00      	nop
 80009ae:	370c      	adds	r7, #12
 80009b0:	46bd      	mov	sp, r7
 80009b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b6:	4770      	bx	lr
 80009b8:	50004a00 	.word	0x50004a00

080009bc <XMC_RTC_SetAlarmStdFormat>:

/*
 * Sets the RTC module alarm time value in standard format
 */
void XMC_RTC_SetAlarmStdFormat(const struct tm *const stdtime)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b084      	sub	sp, #16
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
  XMC_RTC_ALARM_t alarm;
  

  alarm.seconds = stdtime->tm_sec;
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80009cc:	b2da      	uxtb	r2, r3
 80009ce:	7a3b      	ldrb	r3, [r7, #8]
 80009d0:	f362 0305 	bfi	r3, r2, #0, #6
 80009d4:	723b      	strb	r3, [r7, #8]
  alarm.minutes = stdtime->tm_min;
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	685b      	ldr	r3, [r3, #4]
 80009da:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80009de:	b2da      	uxtb	r2, r3
 80009e0:	7a7b      	ldrb	r3, [r7, #9]
 80009e2:	f362 0305 	bfi	r3, r2, #0, #6
 80009e6:	727b      	strb	r3, [r7, #9]
  alarm.hours = stdtime->tm_hour;
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	689b      	ldr	r3, [r3, #8]
 80009ec:	f003 031f 	and.w	r3, r3, #31
 80009f0:	b2da      	uxtb	r2, r3
 80009f2:	7abb      	ldrb	r3, [r7, #10]
 80009f4:	f362 0304 	bfi	r3, r2, #0, #5
 80009f8:	72bb      	strb	r3, [r7, #10]
  alarm.days = stdtime->tm_mday - 1;
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	68db      	ldr	r3, [r3, #12]
 80009fe:	b2db      	uxtb	r3, r3
 8000a00:	3b01      	subs	r3, #1
 8000a02:	b2db      	uxtb	r3, r3
 8000a04:	f003 031f 	and.w	r3, r3, #31
 8000a08:	b2da      	uxtb	r2, r3
 8000a0a:	7afb      	ldrb	r3, [r7, #11]
 8000a0c:	f362 0304 	bfi	r3, r2, #0, #5
 8000a10:	72fb      	strb	r3, [r7, #11]
  alarm.month = stdtime->tm_mon;
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	691b      	ldr	r3, [r3, #16]
 8000a16:	f003 030f 	and.w	r3, r3, #15
 8000a1a:	b2da      	uxtb	r2, r3
 8000a1c:	7b7b      	ldrb	r3, [r7, #13]
 8000a1e:	f362 0303 	bfi	r3, r2, #0, #4
 8000a22:	737b      	strb	r3, [r7, #13]
  alarm.year = stdtime->tm_year + XMC_RTC_YEAR_OFFSET;
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	695b      	ldr	r3, [r3, #20]
 8000a28:	b29b      	uxth	r3, r3
 8000a2a:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 8000a2e:	b29b      	uxth	r3, r3
 8000a30:	81fb      	strh	r3, [r7, #14]

  XMC_RTC_SetAlarm(&alarm);
 8000a32:	f107 0308 	add.w	r3, r7, #8
 8000a36:	4618      	mov	r0, r3
 8000a38:	f7ff ff8a 	bl	8000950 <XMC_RTC_SetAlarm>
}
 8000a3c:	bf00      	nop
 8000a3e:	3710      	adds	r7, #16
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}

08000a44 <XMC_RTC_GetAlarmStdFormat>:

/*
 * Gets the RTC module alarm time value in standard format
 */
void XMC_RTC_GetAlarmStdFormat(struct tm *const stdtime)
{
 8000a44:	b480      	push	{r7}
 8000a46:	b085      	sub	sp, #20
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
  XMC_RTC_ALARM_t alarm;
  
  alarm.raw0 = RTC->ATIM0;
 8000a4c:	4b19      	ldr	r3, [pc, #100]	; (8000ab4 <XMC_RTC_GetAlarmStdFormat+0x70>)
 8000a4e:	699b      	ldr	r3, [r3, #24]
 8000a50:	60bb      	str	r3, [r7, #8]
  alarm.raw1 = RTC->ATIM1;
 8000a52:	4b18      	ldr	r3, [pc, #96]	; (8000ab4 <XMC_RTC_GetAlarmStdFormat+0x70>)
 8000a54:	69db      	ldr	r3, [r3, #28]
 8000a56:	60fb      	str	r3, [r7, #12]

  stdtime->tm_sec = (int8_t)alarm.seconds;
 8000a58:	7a3b      	ldrb	r3, [r7, #8]
 8000a5a:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8000a5e:	b2db      	uxtb	r3, r3
 8000a60:	461a      	mov	r2, r3
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	601a      	str	r2, [r3, #0]
  stdtime->tm_min = (int8_t)alarm.minutes;
 8000a66:	7a7b      	ldrb	r3, [r7, #9]
 8000a68:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8000a6c:	b2db      	uxtb	r3, r3
 8000a6e:	461a      	mov	r2, r3
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	605a      	str	r2, [r3, #4]
  stdtime->tm_hour = (int8_t)alarm.hours;
 8000a74:	7abb      	ldrb	r3, [r7, #10]
 8000a76:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8000a7a:	b2db      	uxtb	r3, r3
 8000a7c:	461a      	mov	r2, r3
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	609a      	str	r2, [r3, #8]
  stdtime->tm_mday = ((int8_t)alarm.days + (int8_t)1);
 8000a82:	7afb      	ldrb	r3, [r7, #11]
 8000a84:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8000a88:	b2db      	uxtb	r3, r3
 8000a8a:	1c5a      	adds	r2, r3, #1
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	60da      	str	r2, [r3, #12]
  stdtime->tm_mon = (int8_t)alarm.month;
 8000a90:	7b7b      	ldrb	r3, [r7, #13]
 8000a92:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8000a96:	b2db      	uxtb	r3, r3
 8000a98:	461a      	mov	r2, r3
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	611a      	str	r2, [r3, #16]
  stdtime->tm_year = (int32_t)alarm.year - (int32_t)XMC_RTC_YEAR_OFFSET;
 8000a9e:	89fb      	ldrh	r3, [r7, #14]
 8000aa0:	f2a3 726c 	subw	r2, r3, #1900	; 0x76c
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	615a      	str	r2, [r3, #20]
}
 8000aa8:	bf00      	nop
 8000aaa:	3714      	adds	r7, #20
 8000aac:	46bd      	mov	sp, r7
 8000aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab2:	4770      	bx	lr
 8000ab4:	50004a00 	.word	0x50004a00

08000ab8 <XMC_RTC_GetEventStatus>:

/*
 * Gets the RTC periodic and alarm event(s) status
 */
uint32_t XMC_RTC_GetEventStatus(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0
  return RTC->STSSR;
 8000abc:	4b03      	ldr	r3, [pc, #12]	; (8000acc <XMC_RTC_GetEventStatus+0x14>)
 8000abe:	68db      	ldr	r3, [r3, #12]
}
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop
 8000acc:	50004a00 	.word	0x50004a00

08000ad0 <XMC_RTC_IsRunning>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_RTC_Start(), XMC_RTC_Stop()
 */ 
__STATIC_INLINE bool XMC_RTC_IsRunning(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0
  return (bool)(RTC->CTR & RTC_CTR_ENB_Msk);
 8000ad4:	4b06      	ldr	r3, [pc, #24]	; (8000af0 <XMC_RTC_IsRunning+0x20>)
 8000ad6:	685b      	ldr	r3, [r3, #4]
 8000ad8:	f003 0301 	and.w	r3, r3, #1
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	bf14      	ite	ne
 8000ae0:	2301      	movne	r3, #1
 8000ae2:	2300      	moveq	r3, #0
 8000ae4:	b2db      	uxtb	r3, r3
}
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aee:	4770      	bx	lr
 8000af0:	50004a00 	.word	0x50004a00

08000af4 <XMC_SCU_GetMirrorStatus>:
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0
  return(SCU_GENERAL->MIRRSTS);
 8000af8:	4b03      	ldr	r3, [pc, #12]	; (8000b08 <XMC_SCU_GetMirrorStatus+0x14>)
 8000afa:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
}
 8000afe:	4618      	mov	r0, r3
 8000b00:	46bd      	mov	sp, r7
 8000b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b06:	4770      	bx	lr
 8000b08:	50004000 	.word	0x50004000

08000b0c <XMC_RTC_Enable>:

/*
 * Enables RTC peripheral for programming its registers
 */
void XMC_RTC_Enable(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	af00      	add	r7, sp, #0
  XMC_SCU_HIB_EnableHibernateDomain();
 8000b10:	f001 f8b8 	bl	8001c84 <XMC_SCU_HIB_EnableHibernateDomain>
}
 8000b14:	bf00      	nop
 8000b16:	bd80      	pop	{r7, pc}

08000b18 <XMC_RTC_Disable>:

/*
 * Disables RTC peripheral for programming its registers
 */
void XMC_RTC_Disable(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0
  /*
   * Empty because disabling the hibernate
   * domain is not done intentionally.
   */
}
 8000b1c:	bf00      	nop
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b24:	4770      	bx	lr

08000b26 <XMC_RTC_IsEnabled>:

/*
 * Checks RTC peripheral is enabled for programming to its registers
 */
bool XMC_RTC_IsEnabled(void)
{
 8000b26:	b580      	push	{r7, lr}
 8000b28:	af00      	add	r7, sp, #0
  return XMC_SCU_HIB_IsHibernateDomainEnabled();
 8000b2a:	f001 f8e9 	bl	8001d00 <XMC_SCU_HIB_IsHibernateDomainEnabled>
 8000b2e:	4603      	mov	r3, r0
}
 8000b30:	4618      	mov	r0, r3
 8000b32:	bd80      	pop	{r7, pc}

08000b34 <XMC_RTC_Init>:

/*
 * Initialize the RTC peripheral
 */
XMC_RTC_STATUS_t XMC_RTC_Init(const XMC_RTC_CONFIG_t *const config)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b082      	sub	sp, #8
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
  if (XMC_RTC_IsRunning() == false)
 8000b3c:	f7ff ffc8 	bl	8000ad0 <XMC_RTC_IsRunning>
 8000b40:	4603      	mov	r3, r0
 8000b42:	f083 0301 	eor.w	r3, r3, #1
 8000b46:	b2db      	uxtb	r3, r3
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d03e      	beq.n	8000bca <XMC_RTC_Init+0x96>
  {
    if (XMC_SCU_HIB_IsHibernateDomainEnabled() == false)
 8000b4c:	f001 f8d8 	bl	8001d00 <XMC_SCU_HIB_IsHibernateDomainEnabled>
 8000b50:	4603      	mov	r3, r0
 8000b52:	f083 0301 	eor.w	r3, r3, #1
 8000b56:	b2db      	uxtb	r3, r3
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d001      	beq.n	8000b60 <XMC_RTC_Init+0x2c>
    {
      XMC_SCU_HIB_EnableHibernateDomain();
 8000b5c:	f001 f892 	bl	8001c84 <XMC_SCU_HIB_EnableHibernateDomain>
    }
    
    XMC_RTC_SetPrescaler(config->prescaler);
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	8a1b      	ldrh	r3, [r3, #16]
 8000b64:	4618      	mov	r0, r3
 8000b66:	f7ff fe11 	bl	800078c <XMC_RTC_SetPrescaler>
    
    while ((XMC_SCU_GetMirrorStatus() & SCU_GENERAL_MIRRSTS_RTC_TIM0_Msk) != 0U)
 8000b6a:	bf00      	nop
 8000b6c:	f7ff ffc2 	bl	8000af4 <XMC_SCU_GetMirrorStatus>
 8000b70:	4603      	mov	r3, r0
 8000b72:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d1f8      	bne.n	8000b6c <XMC_RTC_Init+0x38>
    {
      /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
    }
    RTC->TIM0 = config->time.raw0;
 8000b7a:	4a16      	ldr	r2, [pc, #88]	; (8000bd4 <XMC_RTC_Init+0xa0>)
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	6213      	str	r3, [r2, #32]
    
    while ((XMC_SCU_GetMirrorStatus() & SCU_GENERAL_MIRRSTS_RTC_TIM1_Msk) != 0U)
 8000b82:	bf00      	nop
 8000b84:	f7ff ffb6 	bl	8000af4 <XMC_SCU_GetMirrorStatus>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d1f8      	bne.n	8000b84 <XMC_RTC_Init+0x50>
    {
      /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
    }
    RTC->TIM1 = config->time.raw1;
 8000b92:	4a10      	ldr	r2, [pc, #64]	; (8000bd4 <XMC_RTC_Init+0xa0>)
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	685b      	ldr	r3, [r3, #4]
 8000b98:	6253      	str	r3, [r2, #36]	; 0x24
    
    while ((XMC_SCU_GetMirrorStatus() & SCU_GENERAL_MIRRSTS_RTC_ATIM0_Msk) != 0U)
 8000b9a:	bf00      	nop
 8000b9c:	f7ff ffaa 	bl	8000af4 <XMC_SCU_GetMirrorStatus>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d1f8      	bne.n	8000b9c <XMC_RTC_Init+0x68>
    {
      /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
    }
    RTC->ATIM0 = config->alarm.raw0;
 8000baa:	4a0a      	ldr	r2, [pc, #40]	; (8000bd4 <XMC_RTC_Init+0xa0>)
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	689b      	ldr	r3, [r3, #8]
 8000bb0:	6193      	str	r3, [r2, #24]
    
    while ((XMC_SCU_GetMirrorStatus() & SCU_GENERAL_MIRRSTS_RTC_ATIM1_Msk) != 0U)
 8000bb2:	bf00      	nop
 8000bb4:	f7ff ff9e 	bl	8000af4 <XMC_SCU_GetMirrorStatus>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d1f8      	bne.n	8000bb4 <XMC_RTC_Init+0x80>
    {
      /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
    }
    RTC->ATIM1 = config->alarm.raw1;    
 8000bc2:	4a04      	ldr	r2, [pc, #16]	; (8000bd4 <XMC_RTC_Init+0xa0>)
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	68db      	ldr	r3, [r3, #12]
 8000bc8:	61d3      	str	r3, [r2, #28]
  }  
  return XMC_RTC_STATUS_OK;
 8000bca:	2300      	movs	r3, #0
}
 8000bcc:	4618      	mov	r0, r3
 8000bce:	3708      	adds	r7, #8
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	50004a00 	.word	0x50004a00

08000bd8 <XMC_RTC_EnableEvent>:

/*
 * Enable RTC periodic and alarm event(s)
 */ 
void XMC_RTC_EnableEvent(const uint32_t event)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b082      	sub	sp, #8
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  while ((XMC_SCU_GetMirrorStatus() & SCU_GENERAL_MIRRSTS_RTC_MSKSR_Msk) != 0U)
 8000be0:	bf00      	nop
 8000be2:	f7ff ff87 	bl	8000af4 <XMC_SCU_GetMirrorStatus>
 8000be6:	4603      	mov	r3, r0
 8000be8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d1f8      	bne.n	8000be2 <XMC_RTC_EnableEvent+0xa>
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  RTC->MSKSR |= event;
 8000bf0:	4b04      	ldr	r3, [pc, #16]	; (8000c04 <XMC_RTC_EnableEvent+0x2c>)
 8000bf2:	691a      	ldr	r2, [r3, #16]
 8000bf4:	4903      	ldr	r1, [pc, #12]	; (8000c04 <XMC_RTC_EnableEvent+0x2c>)
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	4313      	orrs	r3, r2
 8000bfa:	610b      	str	r3, [r1, #16]
}
 8000bfc:	bf00      	nop
 8000bfe:	3708      	adds	r7, #8
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	50004a00 	.word	0x50004a00

08000c08 <XMC_RTC_DisableEvent>:

/*
 * Disable RTC periodic and alarm event(s)
 */ 
void XMC_RTC_DisableEvent(const uint32_t event)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b082      	sub	sp, #8
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
  while ((XMC_SCU_GetMirrorStatus() & SCU_GENERAL_MIRRSTS_RTC_MSKSR_Msk) != 0U)
 8000c10:	bf00      	nop
 8000c12:	f7ff ff6f 	bl	8000af4 <XMC_SCU_GetMirrorStatus>
 8000c16:	4603      	mov	r3, r0
 8000c18:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d1f8      	bne.n	8000c12 <XMC_RTC_DisableEvent+0xa>
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  RTC->MSKSR &= ~event;
 8000c20:	4b05      	ldr	r3, [pc, #20]	; (8000c38 <XMC_RTC_DisableEvent+0x30>)
 8000c22:	691a      	ldr	r2, [r3, #16]
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	43db      	mvns	r3, r3
 8000c28:	4903      	ldr	r1, [pc, #12]	; (8000c38 <XMC_RTC_DisableEvent+0x30>)
 8000c2a:	4013      	ands	r3, r2
 8000c2c:	610b      	str	r3, [r1, #16]
}
 8000c2e:	bf00      	nop
 8000c30:	3708      	adds	r7, #8
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	50004a00 	.word	0x50004a00

08000c3c <XMC_RTC_ClearEvent>:

/*
 * Clear RTC periodic and alarm event(s)
 */ 
void XMC_RTC_ClearEvent(const uint32_t event)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b082      	sub	sp, #8
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  while ((XMC_SCU_GetMirrorStatus() & SCU_GENERAL_MIRRSTS_RTC_CLRSR_Msk) != 0U)
 8000c44:	bf00      	nop
 8000c46:	f7ff ff55 	bl	8000af4 <XMC_SCU_GetMirrorStatus>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d1f8      	bne.n	8000c46 <XMC_RTC_ClearEvent+0xa>
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  RTC->CLRSR = event;
 8000c54:	4a03      	ldr	r2, [pc, #12]	; (8000c64 <XMC_RTC_ClearEvent+0x28>)
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	6153      	str	r3, [r2, #20]
}
 8000c5a:	bf00      	nop
 8000c5c:	3708      	adds	r7, #8
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	50004a00 	.word	0x50004a00

08000c68 <XMC_RTC_EnableHibernationWakeUp>:

void XMC_RTC_EnableHibernationWakeUp(const uint32_t event)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b082      	sub	sp, #8
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  while((XMC_SCU_GetMirrorStatus() & SCU_GENERAL_MIRRSTS_RTC_CTR_Msk) != 0U)
 8000c70:	bf00      	nop
 8000c72:	f7ff ff3f 	bl	8000af4 <XMC_SCU_GetMirrorStatus>
 8000c76:	4603      	mov	r3, r0
 8000c78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d1f8      	bne.n	8000c72 <XMC_RTC_EnableHibernationWakeUp+0xa>
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  RTC->CTR |= event;
 8000c80:	4b04      	ldr	r3, [pc, #16]	; (8000c94 <XMC_RTC_EnableHibernationWakeUp+0x2c>)
 8000c82:	685a      	ldr	r2, [r3, #4]
 8000c84:	4903      	ldr	r1, [pc, #12]	; (8000c94 <XMC_RTC_EnableHibernationWakeUp+0x2c>)
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	4313      	orrs	r3, r2
 8000c8a:	604b      	str	r3, [r1, #4]
}
 8000c8c:	bf00      	nop
 8000c8e:	3708      	adds	r7, #8
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd80      	pop	{r7, pc}
 8000c94:	50004a00 	.word	0x50004a00

08000c98 <XMC_RTC_DisableHibernationWakeUp>:

void XMC_RTC_DisableHibernationWakeUp(const uint32_t event)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b082      	sub	sp, #8
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  while((XMC_SCU_GetMirrorStatus() & SCU_GENERAL_MIRRSTS_RTC_CTR_Msk) != 0U)
 8000ca0:	bf00      	nop
 8000ca2:	f7ff ff27 	bl	8000af4 <XMC_SCU_GetMirrorStatus>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d1f8      	bne.n	8000ca2 <XMC_RTC_DisableHibernationWakeUp+0xa>
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  RTC->CTR &= ~event;
 8000cb0:	4b05      	ldr	r3, [pc, #20]	; (8000cc8 <XMC_RTC_DisableHibernationWakeUp+0x30>)
 8000cb2:	685a      	ldr	r2, [r3, #4]
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	43db      	mvns	r3, r3
 8000cb8:	4903      	ldr	r1, [pc, #12]	; (8000cc8 <XMC_RTC_DisableHibernationWakeUp+0x30>)
 8000cba:	4013      	ands	r3, r2
 8000cbc:	604b      	str	r3, [r1, #4]
}
 8000cbe:	bf00      	nop
 8000cc0:	3708      	adds	r7, #8
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	50004a00 	.word	0x50004a00

08000ccc <XMC_SCU_CLOCK_GetUsbClockSource>:
 * The clock source is read from from the \a USBSEL bits of \a USBCLKCR register.
 * \par<b>Related APIs:</b><BR>
 * XMC_SCU_CLOCK_SetUsbClockDivider(), XMC_SCU_CLOCK_GetUsbPllClockFrequency() \n\n\n
 */
__STATIC_INLINE XMC_SCU_CLOCK_USBCLKSRC_t XMC_SCU_CLOCK_GetUsbClockSource(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
  return (XMC_SCU_CLOCK_USBCLKSRC_t)(SCU_CLK->USBCLKCR & SCU_CLK_USBCLKCR_USBSEL_Msk);
 8000cd0:	4b04      	ldr	r3, [pc, #16]	; (8000ce4 <XMC_SCU_CLOCK_GetUsbClockSource+0x18>)
 8000cd2:	699b      	ldr	r3, [r3, #24]
 8000cd4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
 8000cd8:	4618      	mov	r0, r3
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce0:	4770      	bx	lr
 8000ce2:	bf00      	nop
 8000ce4:	50004600 	.word	0x50004600

08000ce8 <XMC_SCU_CLOCK_GetWdtClockSource>:
 * the clock source selected.
 * \par<b>Related APIs:</b><BR>
 * XMC_SCU_CLOCK_SetWdtClockDivider(), XMC_SCU_CLOCK_SetWdtClockSource() \n\n\n
 */
__STATIC_INLINE XMC_SCU_CLOCK_WDTCLKSRC_t XMC_SCU_CLOCK_GetWdtClockSource(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
  return (XMC_SCU_CLOCK_WDTCLKSRC_t)(SCU_CLK->WDTCLKCR & SCU_CLK_WDTCLKCR_WDTSEL_Msk);
 8000cec:	4b04      	ldr	r3, [pc, #16]	; (8000d00 <XMC_SCU_CLOCK_GetWdtClockSource+0x18>)
 8000cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cf0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfc:	4770      	bx	lr
 8000cfe:	bf00      	nop
 8000d00:	50004600 	.word	0x50004600

08000d04 <XMC_SCU_CLOCK_GetExternalOutputClockSource>:
 * The value is obtained by reading \a ECKSEL bits of \a EXTCLKCR register.
 * \par<b>Related APIs:</b><BR>
 * XMC_SCU_CLOCK_SetExternalOutputClockSource(), XMC_SCU_CLOCK_SetExternalOutputClockDivider() \n\n\n
 */
__STATIC_INLINE XMC_SCU_CLOCK_EXTOUTCLKSRC_t XMC_SCU_CLOCK_GetExternalOutputClockSource(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  return (XMC_SCU_CLOCK_EXTOUTCLKSRC_t)(SCU_CLK->EXTCLKCR & SCU_CLK_EXTCLKCR_ECKSEL_Msk);
 8000d08:	4b05      	ldr	r3, [pc, #20]	; (8000d20 <XMC_SCU_CLOCK_GetExternalOutputClockSource+0x1c>)
 8000d0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d0c:	b2db      	uxtb	r3, r3
 8000d0e:	f003 0303 	and.w	r3, r3, #3
 8000d12:	b2db      	uxtb	r3, r3
}
 8000d14:	4618      	mov	r0, r3
 8000d16:	46bd      	mov	sp, r7
 8000d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1c:	4770      	bx	lr
 8000d1e:	bf00      	nop
 8000d20:	50004600 	.word	0x50004600

08000d24 <XMC_SCU_CLOCK_GetSystemClockFrequency>:
 * fSYS = fCPU << CPUDIV.
 * \par<b>Related APIs:</b><BR>
 * XMC_SCU_CLOCK_GetUsbPllClockFrequency() \n\n\n
 */
__STATIC_INLINE uint32_t XMC_SCU_CLOCK_GetSystemClockFrequency(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0
  return SystemCoreClock << ((SCU_CLK->CPUCLKCR & SCU_CLK_CPUCLKCR_CPUDIV_Msk) >> SCU_CLK_CPUCLKCR_CPUDIV_Pos);
 8000d28:	4b06      	ldr	r3, [pc, #24]	; (8000d44 <XMC_SCU_CLOCK_GetSystemClockFrequency+0x20>)
 8000d2a:	681a      	ldr	r2, [r3, #0]
 8000d2c:	4b06      	ldr	r3, [pc, #24]	; (8000d48 <XMC_SCU_CLOCK_GetSystemClockFrequency+0x24>)
 8000d2e:	691b      	ldr	r3, [r3, #16]
 8000d30:	f003 0301 	and.w	r3, r3, #1
 8000d34:	fa02 f303 	lsl.w	r3, r2, r3
}
 8000d38:	4618      	mov	r0, r3
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d40:	4770      	bx	lr
 8000d42:	bf00      	nop
 8000d44:	2000ffc0 	.word	0x2000ffc0
 8000d48:	50004600 	.word	0x50004600

08000d4c <XMC_SCU_CLOCK_GetCpuClockFrequency>:
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8000d50:	4b03      	ldr	r3, [pc, #12]	; (8000d60 <XMC_SCU_CLOCK_GetCpuClockFrequency+0x14>)
 8000d52:	681b      	ldr	r3, [r3, #0]
}
 8000d54:	4618      	mov	r0, r3
 8000d56:	46bd      	mov	sp, r7
 8000d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5c:	4770      	bx	lr
 8000d5e:	bf00      	nop
 8000d60:	2000ffc0 	.word	0x2000ffc0

08000d64 <XMC_SCU_GetMirrorStatus>:
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
  return(SCU_GENERAL->MIRRSTS);
 8000d68:	4b03      	ldr	r3, [pc, #12]	; (8000d78 <XMC_SCU_GetMirrorStatus+0x14>)
 8000d6a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
}
 8000d6e:	4618      	mov	r0, r3
 8000d70:	46bd      	mov	sp, r7
 8000d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d76:	4770      	bx	lr
 8000d78:	50004000 	.word	0x50004000

08000d7c <XMC_SCU_lDelay>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 ********************************************************************************************************************/
/* This is a local function used to generate the delay until register get updated with new configured value.  */
void XMC_SCU_lDelay(uint32_t delay)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b084      	sub	sp, #16
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  uint32_t i;

  SystemCoreClockUpdate();
 8000d84:	f001 fd6a 	bl	800285c <SystemCoreClockUpdate>
  delay =  delay * (uint32_t)(SystemCoreClock / FREQ_1MHZ);
 8000d88:	4b0c      	ldr	r3, [pc, #48]	; (8000dbc <XMC_SCU_lDelay+0x40>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	4a0c      	ldr	r2, [pc, #48]	; (8000dc0 <XMC_SCU_lDelay+0x44>)
 8000d8e:	fba2 2303 	umull	r2, r3, r2, r3
 8000d92:	0c9a      	lsrs	r2, r3, #18
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	fb02 f303 	mul.w	r3, r2, r3
 8000d9a:	607b      	str	r3, [r7, #4]

  for (i = 0U; i < delay; ++i)
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	60fb      	str	r3, [r7, #12]
 8000da0:	e003      	b.n	8000daa <XMC_SCU_lDelay+0x2e>
  {
    __NOP();
 8000da2:	bf00      	nop
  for (i = 0U; i < delay; ++i)
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	3301      	adds	r3, #1
 8000da8:	60fb      	str	r3, [r7, #12]
 8000daa:	68fa      	ldr	r2, [r7, #12]
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	429a      	cmp	r2, r3
 8000db0:	d3f7      	bcc.n	8000da2 <XMC_SCU_lDelay+0x26>
  }
}
 8000db2:	bf00      	nop
 8000db4:	bf00      	nop
 8000db6:	3710      	adds	r7, #16
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	2000ffc0 	.word	0x2000ffc0
 8000dc0:	431bde83 	.word	0x431bde83

08000dc4 <XMC_SCU_INTERRUPT_EnableEvent>:

/* API to enable the SCU event */
void XMC_SCU_INTERRUPT_EnableEvent(const XMC_SCU_INTERRUPT_EVENT_t event)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b083      	sub	sp, #12
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  SCU_INTERRUPT->SRMSK |= (uint32_t)event;
 8000dcc:	4b05      	ldr	r3, [pc, #20]	; (8000de4 <XMC_SCU_INTERRUPT_EnableEvent+0x20>)
 8000dce:	689a      	ldr	r2, [r3, #8]
 8000dd0:	4904      	ldr	r1, [pc, #16]	; (8000de4 <XMC_SCU_INTERRUPT_EnableEvent+0x20>)
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	4313      	orrs	r3, r2
 8000dd6:	608b      	str	r3, [r1, #8]
}
 8000dd8:	bf00      	nop
 8000dda:	370c      	adds	r7, #12
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de2:	4770      	bx	lr
 8000de4:	50004074 	.word	0x50004074

08000de8 <XMC_SCU_INTERRUPT_DisableEvent>:

/* API to disable the SCU event */
void XMC_SCU_INTERRUPT_DisableEvent(const XMC_SCU_INTERRUPT_EVENT_t event)
{
 8000de8:	b480      	push	{r7}
 8000dea:	b083      	sub	sp, #12
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  SCU_INTERRUPT->SRMSK &= (uint32_t)~event;
 8000df0:	4b06      	ldr	r3, [pc, #24]	; (8000e0c <XMC_SCU_INTERRUPT_DisableEvent+0x24>)
 8000df2:	689a      	ldr	r2, [r3, #8]
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	43db      	mvns	r3, r3
 8000df8:	4904      	ldr	r1, [pc, #16]	; (8000e0c <XMC_SCU_INTERRUPT_DisableEvent+0x24>)
 8000dfa:	4013      	ands	r3, r2
 8000dfc:	608b      	str	r3, [r1, #8]
}
 8000dfe:	bf00      	nop
 8000e00:	370c      	adds	r7, #12
 8000e02:	46bd      	mov	sp, r7
 8000e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e08:	4770      	bx	lr
 8000e0a:	bf00      	nop
 8000e0c:	50004074 	.word	0x50004074

08000e10 <XMC_SCU_INTERRUPT_TriggerEvent>:

/* API to trigger the SCU event */
void XMC_SCU_INTERRUPT_TriggerEvent(const XMC_SCU_INTERRUPT_EVENT_t event)
{
 8000e10:	b480      	push	{r7}
 8000e12:	b083      	sub	sp, #12
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  SCU_INTERRUPT->SRSET |= (uint32_t)event;
 8000e18:	4b05      	ldr	r3, [pc, #20]	; (8000e30 <XMC_SCU_INTERRUPT_TriggerEvent+0x20>)
 8000e1a:	691a      	ldr	r2, [r3, #16]
 8000e1c:	4904      	ldr	r1, [pc, #16]	; (8000e30 <XMC_SCU_INTERRUPT_TriggerEvent+0x20>)
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	4313      	orrs	r3, r2
 8000e22:	610b      	str	r3, [r1, #16]
}
 8000e24:	bf00      	nop
 8000e26:	370c      	adds	r7, #12
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2e:	4770      	bx	lr
 8000e30:	50004074 	.word	0x50004074

08000e34 <XMC_SCU_INTERUPT_GetEventStatus>:

/* API to retrieve the SCU event status */
XMC_SCU_INTERRUPT_EVENT_t XMC_SCU_INTERUPT_GetEventStatus(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0
  return (SCU_INTERRUPT->SRRAW);
 8000e38:	4b03      	ldr	r3, [pc, #12]	; (8000e48 <XMC_SCU_INTERUPT_GetEventStatus+0x14>)
 8000e3a:	685b      	ldr	r3, [r3, #4]
}
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e44:	4770      	bx	lr
 8000e46:	bf00      	nop
 8000e48:	50004074 	.word	0x50004074

08000e4c <XMC_SCU_INTERRUPT_ClearEventStatus>:

/* API to clear the SCU event status */
void XMC_SCU_INTERRUPT_ClearEventStatus(const XMC_SCU_INTERRUPT_EVENT_t event)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b083      	sub	sp, #12
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  SCU_INTERRUPT->SRCLR = (uint32_t)event;
 8000e54:	4a04      	ldr	r2, [pc, #16]	; (8000e68 <XMC_SCU_INTERRUPT_ClearEventStatus+0x1c>)
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	60d3      	str	r3, [r2, #12]
}
 8000e5a:	bf00      	nop
 8000e5c:	370c      	adds	r7, #12
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e64:	4770      	bx	lr
 8000e66:	bf00      	nop
 8000e68:	50004074 	.word	0x50004074

08000e6c <XMC_SCU_GetBootMode>:


/* API to retrieve the currently deployed device bootmode */
uint32_t XMC_SCU_GetBootMode(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0
  return (uint32_t)(SCU_GENERAL->STCON & SCU_GENERAL_STCON_SWCON_Msk);
 8000e70:	4b04      	ldr	r3, [pc, #16]	; (8000e84 <XMC_SCU_GetBootMode+0x18>)
 8000e72:	691b      	ldr	r3, [r3, #16]
 8000e74:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8000e78:	4618      	mov	r0, r3
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e80:	4770      	bx	lr
 8000e82:	bf00      	nop
 8000e84:	50004000 	.word	0x50004000

08000e88 <XMC_SCU_SetBootMode>:

/* API to program a new device bootmode */
void XMC_SCU_SetBootMode(const XMC_SCU_BOOTMODE_t bootmode)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	b083      	sub	sp, #12
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	4603      	mov	r3, r0
 8000e90:	80fb      	strh	r3, [r7, #6]
  SCU_GENERAL->STCON = (uint32_t)bootmode;
 8000e92:	4a04      	ldr	r2, [pc, #16]	; (8000ea4 <XMC_SCU_SetBootMode+0x1c>)
 8000e94:	88fb      	ldrh	r3, [r7, #6]
 8000e96:	6113      	str	r3, [r2, #16]
}
 8000e98:	bf00      	nop
 8000e9a:	370c      	adds	r7, #12
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea2:	4770      	bx	lr
 8000ea4:	50004000 	.word	0x50004000

08000ea8 <XMC_SCU_ReadGPR>:

/* API to read from General purpose register */
uint32_t XMC_SCU_ReadGPR(const uint32_t index)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b083      	sub	sp, #12
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  return (SCU_GENERAL->GPR[index]);
 8000eb0:	4a05      	ldr	r2, [pc, #20]	; (8000ec8 <XMC_SCU_ReadGPR+0x20>)
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	330a      	adds	r3, #10
 8000eb6:	009b      	lsls	r3, r3, #2
 8000eb8:	4413      	add	r3, r2
 8000eba:	685b      	ldr	r3, [r3, #4]
}
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	370c      	adds	r7, #12
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec6:	4770      	bx	lr
 8000ec8:	50004000 	.word	0x50004000

08000ecc <XMC_SCU_WriteGPR>:

/* API to write to GPR */
void XMC_SCU_WriteGPR(const uint32_t index, const uint32_t data)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b083      	sub	sp, #12
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
 8000ed4:	6039      	str	r1, [r7, #0]
  SCU_GENERAL->GPR[index] = data;
 8000ed6:	4a06      	ldr	r2, [pc, #24]	; (8000ef0 <XMC_SCU_WriteGPR+0x24>)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	330a      	adds	r3, #10
 8000edc:	009b      	lsls	r3, r3, #2
 8000ede:	4413      	add	r3, r2
 8000ee0:	683a      	ldr	r2, [r7, #0]
 8000ee2:	605a      	str	r2, [r3, #4]
}
 8000ee4:	bf00      	nop
 8000ee6:	370c      	adds	r7, #12
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eee:	4770      	bx	lr
 8000ef0:	50004000 	.word	0x50004000

08000ef4 <XMC_SCU_EnableOutOfRangeComparator>:

/* API to enable Out of Range Comparator(ORC) for a desired group and a desired channel input */
void XMC_SCU_EnableOutOfRangeComparator(const uint32_t group, const uint32_t channel)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	b083      	sub	sp, #12
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
 8000efc:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_SCU_EnableOutOfangeComparator:Wrong Group Number",XMC_SCU_CHECK_GRPNUM(group));
  XMC_ASSERT("XMC_SCU_EnableOutOfangeComparator:Wrong Channel Number",XMC_SCU_CHECK_CHNUM(channel));
   
  SCU_GENERAL->GORCEN[group] |= (uint32_t)(1UL << channel);
 8000efe:	4a0a      	ldr	r2, [pc, #40]	; (8000f28 <XMC_SCU_EnableOutOfRangeComparator+0x34>)
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	3328      	adds	r3, #40	; 0x28
 8000f04:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000f08:	2101      	movs	r1, #1
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	fa01 f303 	lsl.w	r3, r1, r3
 8000f10:	4905      	ldr	r1, [pc, #20]	; (8000f28 <XMC_SCU_EnableOutOfRangeComparator+0x34>)
 8000f12:	431a      	orrs	r2, r3
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	3328      	adds	r3, #40	; 0x28
 8000f18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000f1c:	bf00      	nop
 8000f1e:	370c      	adds	r7, #12
 8000f20:	46bd      	mov	sp, r7
 8000f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f26:	4770      	bx	lr
 8000f28:	50004000 	.word	0x50004000

08000f2c <XMC_SCU_DisableOutOfRangeComparator>:

/* API to enable Out of Range Comparator(ORC) for a desired group and a desired channel input */
void XMC_SCU_DisableOutOfRangeComparator(const uint32_t group, const uint32_t channel)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b083      	sub	sp, #12
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
 8000f34:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_SCU_DisableOutOfRangeComparator:Wrong Group Number",XMC_SCU_CHECK_GRPNUM(group));
  XMC_ASSERT("XMC_SCU_DisableOutOfRangeComparator:Wrong Channel Number",XMC_SCU_CHECK_CHNUM(channel));
   
  SCU_GENERAL->GORCEN[group] &= (uint32_t)~(1UL << channel);
 8000f36:	4a0b      	ldr	r2, [pc, #44]	; (8000f64 <XMC_SCU_DisableOutOfRangeComparator+0x38>)
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	3328      	adds	r3, #40	; 0x28
 8000f3c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000f40:	2101      	movs	r1, #1
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	fa01 f303 	lsl.w	r3, r1, r3
 8000f48:	43db      	mvns	r3, r3
 8000f4a:	4906      	ldr	r1, [pc, #24]	; (8000f64 <XMC_SCU_DisableOutOfRangeComparator+0x38>)
 8000f4c:	401a      	ands	r2, r3
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	3328      	adds	r3, #40	; 0x28
 8000f52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000f56:	bf00      	nop
 8000f58:	370c      	adds	r7, #12
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f60:	4770      	bx	lr
 8000f62:	bf00      	nop
 8000f64:	50004000 	.word	0x50004000

08000f68 <XMC_SCU_CalibrateTemperatureSensor>:

/* API to calibrate temperature sensor */
void XMC_SCU_CalibrateTemperatureSensor(uint32_t offset, uint32_t gain)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b083      	sub	sp, #12
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
 8000f70:	6039      	str	r1, [r7, #0]
  SCU_GENERAL->DTSCON = ((uint32_t)(offset << SCU_GENERAL_DTSCON_OFFSET_Pos) |
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	011a      	lsls	r2, r3, #4
                        (uint32_t)(gain << SCU_GENERAL_DTSCON_GAIN_Pos) |
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	02db      	lsls	r3, r3, #11
  SCU_GENERAL->DTSCON = ((uint32_t)(offset << SCU_GENERAL_DTSCON_OFFSET_Pos) |
 8000f7a:	4313      	orrs	r3, r2
 8000f7c:	4a05      	ldr	r2, [pc, #20]	; (8000f94 <XMC_SCU_CalibrateTemperatureSensor+0x2c>)
                        (uint32_t)(0x4UL << SCU_GENERAL_DTSCON_REFTRIM_Pos) |
 8000f7e:	f443 0308 	orr.w	r3, r3, #8912896	; 0x880000
  SCU_GENERAL->DTSCON = ((uint32_t)(offset << SCU_GENERAL_DTSCON_OFFSET_Pos) |
 8000f82:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                        (uint32_t)(0x8UL << SCU_GENERAL_DTSCON_BGTRIM_Pos));
}
 8000f86:	bf00      	nop
 8000f88:	370c      	adds	r7, #12
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop
 8000f94:	50004000 	.word	0x50004000

08000f98 <XMC_SCU_EnableTemperatureSensor>:
/* API to enable die temperature measurement by powering the DTS module. */
void XMC_SCU_EnableTemperatureSensor(void)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	af00      	add	r7, sp, #0
  SCU_GENERAL->DTSCON &= (uint32_t)~(SCU_GENERAL_DTSCON_PWD_Msk);
 8000f9c:	4b06      	ldr	r3, [pc, #24]	; (8000fb8 <XMC_SCU_EnableTemperatureSensor+0x20>)
 8000f9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000fa2:	4a05      	ldr	r2, [pc, #20]	; (8000fb8 <XMC_SCU_EnableTemperatureSensor+0x20>)
 8000fa4:	f023 0301 	bic.w	r3, r3, #1
 8000fa8:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
}
 8000fac:	bf00      	nop
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop
 8000fb8:	50004000 	.word	0x50004000

08000fbc <XMC_SCU_DisableTemperatureSensor>:

/* API to disable die temperature measurement by powering the DTS module off. */
void XMC_SCU_DisableTemperatureSensor(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
  SCU_GENERAL->DTSCON |= (uint32_t)SCU_GENERAL_DTSCON_PWD_Msk;
 8000fc0:	4b06      	ldr	r3, [pc, #24]	; (8000fdc <XMC_SCU_DisableTemperatureSensor+0x20>)
 8000fc2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000fc6:	4a05      	ldr	r2, [pc, #20]	; (8000fdc <XMC_SCU_DisableTemperatureSensor+0x20>)
 8000fc8:	f043 0301 	orr.w	r3, r3, #1
 8000fcc:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
}
 8000fd0:	bf00      	nop
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd8:	4770      	bx	lr
 8000fda:	bf00      	nop
 8000fdc:	50004000 	.word	0x50004000

08000fe0 <XMC_SCU_IsTemperatureSensorEnabled>:

/* API to provide the die temperature sensor power status. */
bool XMC_SCU_IsTemperatureSensorEnabled(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0
  return ((SCU_GENERAL->DTSCON & SCU_GENERAL_DTSCON_PWD_Msk) == 0U);
 8000fe4:	4b07      	ldr	r3, [pc, #28]	; (8001004 <XMC_SCU_IsTemperatureSensorEnabled+0x24>)
 8000fe6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000fea:	f003 0301 	and.w	r3, r3, #1
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	bf0c      	ite	eq
 8000ff2:	2301      	moveq	r3, #1
 8000ff4:	2300      	movne	r3, #0
 8000ff6:	b2db      	uxtb	r3, r3
}
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop
 8001004:	50004000 	.word	0x50004000

08001008 <XMC_SCU_IsTemperatureSensorReady>:

/* API to check if the die temperature sensor is ready to start a measurement. */
bool XMC_SCU_IsTemperatureSensorReady(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
  return ((SCU_GENERAL->DTSSTAT & SCU_GENERAL_DTSSTAT_RDY_Msk) != 0U);
 800100c:	4b07      	ldr	r3, [pc, #28]	; (800102c <XMC_SCU_IsTemperatureSensorReady+0x24>)
 800100e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001012:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001016:	2b00      	cmp	r3, #0
 8001018:	bf14      	ite	ne
 800101a:	2301      	movne	r3, #1
 800101c:	2300      	moveq	r3, #0
 800101e:	b2db      	uxtb	r3, r3
}
 8001020:	4618      	mov	r0, r3
 8001022:	46bd      	mov	sp, r7
 8001024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop
 800102c:	50004000 	.word	0x50004000

08001030 <XMC_SCU_StartTemperatureMeasurement>:
/* API to start device temperature measurements */
XMC_SCU_STATUS_t XMC_SCU_StartTemperatureMeasurement(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af00      	add	r7, sp, #0
  XMC_SCU_STATUS_t status = XMC_SCU_STATUS_OK;
 8001036:	2300      	movs	r3, #0
 8001038:	71fb      	strb	r3, [r7, #7]

  if (XMC_SCU_IsTemperatureSensorEnabled() == false)
 800103a:	f7ff ffd1 	bl	8000fe0 <XMC_SCU_IsTemperatureSensorEnabled>
 800103e:	4603      	mov	r3, r0
 8001040:	f083 0301 	eor.w	r3, r3, #1
 8001044:	b2db      	uxtb	r3, r3
 8001046:	2b00      	cmp	r3, #0
 8001048:	d001      	beq.n	800104e <XMC_SCU_StartTemperatureMeasurement+0x1e>
  {
    status = XMC_SCU_STATUS_ERROR;
 800104a:	2301      	movs	r3, #1
 800104c:	71fb      	strb	r3, [r7, #7]
  }
   
  if (XMC_SCU_IsTemperatureSensorBusy() == true)
 800104e:	f000 f831 	bl	80010b4 <XMC_SCU_IsTemperatureSensorBusy>
 8001052:	4603      	mov	r3, r0
 8001054:	2b00      	cmp	r3, #0
 8001056:	d001      	beq.n	800105c <XMC_SCU_StartTemperatureMeasurement+0x2c>
  {
    status = XMC_SCU_STATUS_BUSY;
 8001058:	2302      	movs	r3, #2
 800105a:	71fb      	strb	r3, [r7, #7]
  }

  /* And start the measurement */
  SCU_GENERAL->DTSCON |= (uint32_t)SCU_GENERAL_DTSCON_START_Msk;
 800105c:	4b06      	ldr	r3, [pc, #24]	; (8001078 <XMC_SCU_StartTemperatureMeasurement+0x48>)
 800105e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001062:	4a05      	ldr	r2, [pc, #20]	; (8001078 <XMC_SCU_StartTemperatureMeasurement+0x48>)
 8001064:	f043 0302 	orr.w	r3, r3, #2
 8001068:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
  
  return (status);
 800106c:	79fb      	ldrb	r3, [r7, #7]
}
 800106e:	4618      	mov	r0, r3
 8001070:	3708      	adds	r7, #8
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	50004000 	.word	0x50004000

0800107c <XMC_SCU_GetTemperatureMeasurement>:

/* API to retrieve the temperature measured */
uint32_t XMC_SCU_GetTemperatureMeasurement(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b082      	sub	sp, #8
 8001080:	af00      	add	r7, sp, #0
  uint32_t temperature;

  if (XMC_SCU_IsTemperatureSensorEnabled() == false)
 8001082:	f7ff ffad 	bl	8000fe0 <XMC_SCU_IsTemperatureSensorEnabled>
 8001086:	4603      	mov	r3, r0
 8001088:	f083 0301 	eor.w	r3, r3, #1
 800108c:	b2db      	uxtb	r3, r3
 800108e:	2b00      	cmp	r3, #0
 8001090:	d003      	beq.n	800109a <XMC_SCU_GetTemperatureMeasurement+0x1e>
  {
    temperature = 0x7FFFFFFFUL;
 8001092:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8001096:	607b      	str	r3, [r7, #4]
 8001098:	e005      	b.n	80010a6 <XMC_SCU_GetTemperatureMeasurement+0x2a>
  }
  else
  {
    temperature = (uint32_t)((SCU_GENERAL->DTSSTAT & SCU_GENERAL_DTSSTAT_RESULT_Msk) >> SCU_GENERAL_DTSSTAT_RESULT_Pos);
 800109a:	4b05      	ldr	r3, [pc, #20]	; (80010b0 <XMC_SCU_GetTemperatureMeasurement+0x34>)
 800109c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80010a0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80010a4:	607b      	str	r3, [r7, #4]
  }
  
  return ((uint32_t)temperature);
 80010a6:	687b      	ldr	r3, [r7, #4]
}
 80010a8:	4618      	mov	r0, r3
 80010aa:	3708      	adds	r7, #8
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	50004000 	.word	0x50004000

080010b4 <XMC_SCU_IsTemperatureSensorBusy>:

/* API to know whether Die temperature sensor is busy */
bool XMC_SCU_IsTemperatureSensorBusy(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0
  return ((SCU_GENERAL->DTSSTAT & SCU_GENERAL_DTSSTAT_BUSY_Msk) != 0U);
 80010b8:	4b07      	ldr	r3, [pc, #28]	; (80010d8 <XMC_SCU_IsTemperatureSensorBusy+0x24>)
 80010ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80010be:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	bf14      	ite	ne
 80010c6:	2301      	movne	r3, #1
 80010c8:	2300      	moveq	r3, #0
 80010ca:	b2db      	uxtb	r3, r3
}
 80010cc:	4618      	mov	r0, r3
 80010ce:	46bd      	mov	sp, r7
 80010d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d4:	4770      	bx	lr
 80010d6:	bf00      	nop
 80010d8:	50004000 	.word	0x50004000

080010dc <XMC_SCU_WriteToRetentionMemory>:
}
#endif  

/* API to write into Retention memory in hibernate domain */
void XMC_SCU_WriteToRetentionMemory(uint32_t address, uint32_t data)
{
 80010dc:	b480      	push	{r7}
 80010de:	b085      	sub	sp, #20
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
 80010e4:	6039      	str	r1, [r7, #0]
  uint32_t rmacr;
  
  /* Get the address right */  
  rmacr = (uint32_t)((address << SCU_GENERAL_RMACR_ADDR_Pos) & (uint32_t)SCU_GENERAL_RMACR_ADDR_Msk);
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	041b      	lsls	r3, r3, #16
 80010ea:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80010ee:	60fb      	str	r3, [r7, #12]
  
  /* Transfer from RMDATA to Retention memory */
  rmacr |= (uint32_t)(SCU_GENERAL_RMACR_RDWR_Msk);
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	f043 0301 	orr.w	r3, r3, #1
 80010f6:	60fb      	str	r3, [r7, #12]
  
  /* Write desired data into RMDATA register */  
  SCU_GENERAL->RMDATA = data;
 80010f8:	4a0b      	ldr	r2, [pc, #44]	; (8001128 <XMC_SCU_WriteToRetentionMemory+0x4c>)
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	f8c2 30cc 	str.w	r3, [r2, #204]	; 0xcc
  
  /* Write address & direction of transfer into RMACR register */  
  SCU_GENERAL->RMACR = rmacr;
 8001100:	4a09      	ldr	r2, [pc, #36]	; (8001128 <XMC_SCU_WriteToRetentionMemory+0x4c>)
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
  
  /* Wait until the update of RMX register in hibernate domain is completed */
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_RMX_Msk)
 8001108:	bf00      	nop
 800110a:	4b07      	ldr	r3, [pc, #28]	; (8001128 <XMC_SCU_WriteToRetentionMemory+0x4c>)
 800110c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8001110:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001114:	2b00      	cmp	r3, #0
 8001116:	d1f8      	bne.n	800110a <XMC_SCU_WriteToRetentionMemory+0x2e>
  {
  }
}
 8001118:	bf00      	nop
 800111a:	bf00      	nop
 800111c:	3714      	adds	r7, #20
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr
 8001126:	bf00      	nop
 8001128:	50004000 	.word	0x50004000

0800112c <XMC_SCU_ReadFromRetentionMemory>:

/* API to read from Retention memory in hibernate domain */
uint32_t XMC_SCU_ReadFromRetentionMemory(uint32_t address)
{
 800112c:	b480      	push	{r7}
 800112e:	b085      	sub	sp, #20
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  uint32_t rmacr;

  /* Get the address right */  
  rmacr = ((uint32_t)(address << SCU_GENERAL_RMACR_ADDR_Pos) & (uint32_t)SCU_GENERAL_RMACR_ADDR_Msk);
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	041b      	lsls	r3, r3, #16
 8001138:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800113c:	60fb      	str	r3, [r7, #12]
  
  /* Transfer from RMDATA to Retention memory */
  rmacr &= ~((uint32_t)(SCU_GENERAL_RMACR_RDWR_Msk));
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	f023 0301 	bic.w	r3, r3, #1
 8001144:	60fb      	str	r3, [r7, #12]
  
  /* Writing an adress & direction of transfer into RMACR register */  
  SCU_GENERAL->RMACR = rmacr;
 8001146:	4a0a      	ldr	r2, [pc, #40]	; (8001170 <XMC_SCU_ReadFromRetentionMemory+0x44>)
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
  
  /* Wait until the update of RMX register in hibernate domain is completed */
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_RMX_Msk)
 800114e:	bf00      	nop
 8001150:	4b07      	ldr	r3, [pc, #28]	; (8001170 <XMC_SCU_ReadFromRetentionMemory+0x44>)
 8001152:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8001156:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800115a:	2b00      	cmp	r3, #0
 800115c:	d1f8      	bne.n	8001150 <XMC_SCU_ReadFromRetentionMemory+0x24>
  {
  }

  return (SCU_GENERAL->RMDATA);
 800115e:	4b04      	ldr	r3, [pc, #16]	; (8001170 <XMC_SCU_ReadFromRetentionMemory+0x44>)
 8001160:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
}
 8001164:	4618      	mov	r0, r3
 8001166:	3714      	adds	r7, #20
 8001168:	46bd      	mov	sp, r7
 800116a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116e:	4770      	bx	lr
 8001170:	50004000 	.word	0x50004000

08001174 <XMC_SCU_CLOCK_Init>:

/* API to initialize the clock tree */
void XMC_SCU_CLOCK_Init(const XMC_SCU_CLOCK_CONFIG_t *const config)
{
 8001174:	b590      	push	{r4, r7, lr}
 8001176:	b085      	sub	sp, #20
 8001178:	af02      	add	r7, sp, #8
 800117a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("", ((config->fstdby_clksrc == XMC_SCU_HIB_STDBYCLKSRC_OSCULP) && (config->enable_osculp == true)) ||
                 (config->fstdby_clksrc != XMC_SCU_HIB_STDBYCLKSRC_OSCULP));
  XMC_ASSERT("", ((config->syspll_config.clksrc == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP) &&
                 (config->enable_oschp == true)) || (config->syspll_config.clksrc != XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP));

  XMC_SCU_CLOCK_SetSystemClockSource(XMC_SCU_CLOCK_SYSCLKSRC_OFI);
 800117c:	2000      	movs	r0, #0
 800117e:	f000 faf1 	bl	8001764 <XMC_SCU_CLOCK_SetSystemClockSource>

  XMC_SCU_HIB_EnableHibernateDomain();
 8001182:	f000 fd7f 	bl	8001c84 <XMC_SCU_HIB_EnableHibernateDomain>

  if (config->enable_osculp == true)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	79db      	ldrb	r3, [r3, #7]
 800118a:	2b00      	cmp	r3, #0
 800118c:	d00a      	beq.n	80011a4 <XMC_SCU_CLOCK_Init+0x30>
  {
    XMC_SCU_CLOCK_EnableLowPowerOscillator();
 800118e:	f000 ff77 	bl	8002080 <XMC_SCU_CLOCK_EnableLowPowerOscillator>
    while (XMC_SCU_CLOCK_IsLowPowerOscillatorStable() == false);
 8001192:	bf00      	nop
 8001194:	f000 ff62 	bl	800205c <XMC_SCU_CLOCK_IsLowPowerOscillatorStable>
 8001198:	4603      	mov	r3, r0
 800119a:	f083 0301 	eor.w	r3, r3, #1
 800119e:	b2db      	uxtb	r3, r3
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d1f7      	bne.n	8001194 <XMC_SCU_CLOCK_Init+0x20>
  }
  
  XMC_SCU_HIB_SetStandbyClockSource(config->fstdby_clksrc);  
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	7a5b      	ldrb	r3, [r3, #9]
 80011a8:	4618      	mov	r0, r3
 80011aa:	f000 fb6f 	bl	800188c <XMC_SCU_HIB_SetStandbyClockSource>
  while (XMC_SCU_GetMirrorStatus() != 0)
 80011ae:	bf00      	nop
 80011b0:	f7ff fdd8 	bl	8000d64 <XMC_SCU_GetMirrorStatus>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d1fa      	bne.n	80011b0 <XMC_SCU_CLOCK_Init+0x3c>
  {
    /* Wait until update of the stanby clock source is done in the HIB domain */    
  }

  XMC_SCU_CLOCK_SetBackupClockCalibrationMode(config->calibration_mode);
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	7a1b      	ldrb	r3, [r3, #8]
 80011be:	4618      	mov	r0, r3
 80011c0:	f000 fd0c 	bl	8001bdc <XMC_SCU_CLOCK_SetBackupClockCalibrationMode>

  XMC_SCU_CLOCK_SetSystemClockDivider((uint32_t)config->fsys_clkdiv);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	7c1b      	ldrb	r3, [r3, #16]
 80011c8:	4618      	mov	r0, r3
 80011ca:	f000 fb7f 	bl	80018cc <XMC_SCU_CLOCK_SetSystemClockDivider>
  XMC_SCU_CLOCK_SetCpuClockDivider((uint32_t)config->fcpu_clkdiv);
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	7c5b      	ldrb	r3, [r3, #17]
 80011d2:	4618      	mov	r0, r3
 80011d4:	f000 fba6 	bl	8001924 <XMC_SCU_CLOCK_SetCpuClockDivider>
  XMC_SCU_CLOCK_SetCcuClockDivider((uint32_t)config->fccu_clkdiv);
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	7c9b      	ldrb	r3, [r3, #18]
 80011dc:	4618      	mov	r0, r3
 80011de:	f000 fb8b 	bl	80018f8 <XMC_SCU_CLOCK_SetCcuClockDivider>
  XMC_SCU_CLOCK_SetPeripheralClockDivider((uint32_t)config->fperipheral_clkdiv);
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	7cdb      	ldrb	r3, [r3, #19]
 80011e6:	4618      	mov	r0, r3
 80011e8:	f000 fbb2 	bl	8001950 <XMC_SCU_CLOCK_SetPeripheralClockDivider>

  if (config->enable_oschp == true)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	799b      	ldrb	r3, [r3, #6]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d00a      	beq.n	800120a <XMC_SCU_CLOCK_Init+0x96>
  {
    XMC_SCU_CLOCK_EnableHighPerformanceOscillator();
 80011f4:	f000 ffd8 	bl	80021a8 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator>
    while(XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable() == false);
 80011f8:	bf00      	nop
 80011fa:	f000 fffd 	bl	80021f8 <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable>
 80011fe:	4603      	mov	r3, r0
 8001200:	f083 0301 	eor.w	r3, r3, #1
 8001204:	b2db      	uxtb	r3, r3
 8001206:	2b00      	cmp	r3, #0
 8001208:	d1f7      	bne.n	80011fa <XMC_SCU_CLOCK_Init+0x86>
  }

  if (config->syspll_config.mode == XMC_SCU_CLOCK_SYSPLL_MODE_DISABLED)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	78db      	ldrb	r3, [r3, #3]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d102      	bne.n	8001218 <XMC_SCU_CLOCK_Init+0xa4>
  {
    XMC_SCU_CLOCK_DisableSystemPll();
 8001212:	f001 f855 	bl	80022c0 <XMC_SCU_CLOCK_DisableSystemPll>
 8001216:	e011      	b.n	800123c <XMC_SCU_CLOCK_Init+0xc8>
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
 8001218:	f001 f840 	bl	800229c <XMC_SCU_CLOCK_EnableSystemPll>
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	8898      	ldrh	r0, [r3, #4]
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	78d9      	ldrb	r1, [r3, #3]
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	785b      	ldrb	r3, [r3, #1]
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 8001228:	461a      	mov	r2, r3
                                 (uint32_t)config->syspll_config.n_div,
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	781b      	ldrb	r3, [r3, #0]
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 800122e:	461c      	mov	r4, r3
                                 (uint32_t)config->syspll_config.k_div);
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	789b      	ldrb	r3, [r3, #2]
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 8001234:	9300      	str	r3, [sp, #0]
 8001236:	4623      	mov	r3, r4
 8001238:	f001 f854 	bl	80022e4 <XMC_SCU_CLOCK_StartSystemPll>
  }

  /* use SYSPLL? */
  if (config->fsys_clksrc == XMC_SCU_CLOCK_SYSCLKSRC_PLL)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	68db      	ldr	r3, [r3, #12]
 8001240:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001244:	d103      	bne.n	800124e <XMC_SCU_CLOCK_Init+0xda>
  {
    XMC_SCU_CLOCK_SetSystemClockSource(XMC_SCU_CLOCK_SYSCLKSRC_PLL);    
 8001246:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800124a:	f000 fa8b 	bl	8001764 <XMC_SCU_CLOCK_SetSystemClockSource>
  }
  SystemCoreClockUpdate();
 800124e:	f001 fb05 	bl	800285c <SystemCoreClockUpdate>
}
 8001252:	bf00      	nop
 8001254:	370c      	adds	r7, #12
 8001256:	46bd      	mov	sp, r7
 8001258:	bd90      	pop	{r4, r7, pc}
	...

0800125c <XMC_SCU_TRAP_Enable>:

/* API to enable a trap source */
void XMC_SCU_TRAP_Enable(const uint32_t trap)
{
 800125c:	b480      	push	{r7}
 800125e:	b083      	sub	sp, #12
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  SCU_TRAP->TRAPDIS &= (uint32_t)~trap;
 8001264:	4b06      	ldr	r3, [pc, #24]	; (8001280 <XMC_SCU_TRAP_Enable+0x24>)
 8001266:	689a      	ldr	r2, [r3, #8]
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	43db      	mvns	r3, r3
 800126c:	4904      	ldr	r1, [pc, #16]	; (8001280 <XMC_SCU_TRAP_Enable+0x24>)
 800126e:	4013      	ands	r3, r2
 8001270:	608b      	str	r3, [r1, #8]
}
 8001272:	bf00      	nop
 8001274:	370c      	adds	r7, #12
 8001276:	46bd      	mov	sp, r7
 8001278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127c:	4770      	bx	lr
 800127e:	bf00      	nop
 8001280:	50004160 	.word	0x50004160

08001284 <XMC_SCU_TRAP_Disable>:

/* API to disable a trap source */
void XMC_SCU_TRAP_Disable(const uint32_t trap)
{
 8001284:	b480      	push	{r7}
 8001286:	b083      	sub	sp, #12
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  SCU_TRAP->TRAPDIS |= (uint32_t)trap;
 800128c:	4b05      	ldr	r3, [pc, #20]	; (80012a4 <XMC_SCU_TRAP_Disable+0x20>)
 800128e:	689a      	ldr	r2, [r3, #8]
 8001290:	4904      	ldr	r1, [pc, #16]	; (80012a4 <XMC_SCU_TRAP_Disable+0x20>)
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	4313      	orrs	r3, r2
 8001296:	608b      	str	r3, [r1, #8]
}
 8001298:	bf00      	nop
 800129a:	370c      	adds	r7, #12
 800129c:	46bd      	mov	sp, r7
 800129e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a2:	4770      	bx	lr
 80012a4:	50004160 	.word	0x50004160

080012a8 <XMC_SCU_TRAP_GetStatus>:

/* API to determine if a trap source has generated event */
uint32_t XMC_SCU_TRAP_GetStatus(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0
  return (SCU_TRAP->TRAPRAW);
 80012ac:	4b03      	ldr	r3, [pc, #12]	; (80012bc <XMC_SCU_TRAP_GetStatus+0x14>)
 80012ae:	685b      	ldr	r3, [r3, #4]
}
 80012b0:	4618      	mov	r0, r3
 80012b2:	46bd      	mov	sp, r7
 80012b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b8:	4770      	bx	lr
 80012ba:	bf00      	nop
 80012bc:	50004160 	.word	0x50004160

080012c0 <XMC_SCU_TRAP_Trigger>:

/* API to manually trigger a trap event */
void XMC_SCU_TRAP_Trigger(const uint32_t trap)
{
 80012c0:	b480      	push	{r7}
 80012c2:	b083      	sub	sp, #12
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  SCU_TRAP->TRAPSET = (uint32_t)trap;
 80012c8:	4a04      	ldr	r2, [pc, #16]	; (80012dc <XMC_SCU_TRAP_Trigger+0x1c>)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	6113      	str	r3, [r2, #16]
}
 80012ce:	bf00      	nop
 80012d0:	370c      	adds	r7, #12
 80012d2:	46bd      	mov	sp, r7
 80012d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d8:	4770      	bx	lr
 80012da:	bf00      	nop
 80012dc:	50004160 	.word	0x50004160

080012e0 <XMC_SCU_TRAP_ClearStatus>:

/* API to clear a trap event */
void XMC_SCU_TRAP_ClearStatus(const uint32_t trap)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b083      	sub	sp, #12
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  SCU_TRAP->TRAPCLR = (uint32_t)trap;
 80012e8:	4a04      	ldr	r2, [pc, #16]	; (80012fc <XMC_SCU_TRAP_ClearStatus+0x1c>)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	60d3      	str	r3, [r2, #12]
}
 80012ee:	bf00      	nop
 80012f0:	370c      	adds	r7, #12
 80012f2:	46bd      	mov	sp, r7
 80012f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f8:	4770      	bx	lr
 80012fa:	bf00      	nop
 80012fc:	50004160 	.word	0x50004160

08001300 <XMC_SCU_PARITY_ClearStatus>:

/* API to clear parity error event */
void XMC_SCU_PARITY_ClearStatus(const uint32_t memory)
{
 8001300:	b480      	push	{r7}
 8001302:	b083      	sub	sp, #12
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  SCU_PARITY->PEFLAG |= (uint32_t)memory; 
 8001308:	4b05      	ldr	r3, [pc, #20]	; (8001320 <XMC_SCU_PARITY_ClearStatus+0x20>)
 800130a:	695a      	ldr	r2, [r3, #20]
 800130c:	4904      	ldr	r1, [pc, #16]	; (8001320 <XMC_SCU_PARITY_ClearStatus+0x20>)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	4313      	orrs	r3, r2
 8001312:	614b      	str	r3, [r1, #20]
}
 8001314:	bf00      	nop
 8001316:	370c      	adds	r7, #12
 8001318:	46bd      	mov	sp, r7
 800131a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131e:	4770      	bx	lr
 8001320:	5000413c 	.word	0x5000413c

08001324 <XMC_SCU_PARITY_GetStatus>:

/* API to determine if the specified parity error has occured or not */
uint32_t XMC_SCU_PARITY_GetStatus(void)
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0
  return (SCU_PARITY->PEFLAG);
 8001328:	4b03      	ldr	r3, [pc, #12]	; (8001338 <XMC_SCU_PARITY_GetStatus+0x14>)
 800132a:	695b      	ldr	r3, [r3, #20]
} 
 800132c:	4618      	mov	r0, r3
 800132e:	46bd      	mov	sp, r7
 8001330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001334:	4770      	bx	lr
 8001336:	bf00      	nop
 8001338:	5000413c 	.word	0x5000413c

0800133c <XMC_SCU_PARITY_Enable>:

/* API to enable parity error checking for the selected on-chip RAM type */
void XMC_SCU_PARITY_Enable(const uint32_t memory)
{
 800133c:	b480      	push	{r7}
 800133e:	b083      	sub	sp, #12
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  SCU_PARITY->PEEN |= (uint32_t)memory; 
 8001344:	4b05      	ldr	r3, [pc, #20]	; (800135c <XMC_SCU_PARITY_Enable+0x20>)
 8001346:	681a      	ldr	r2, [r3, #0]
 8001348:	4904      	ldr	r1, [pc, #16]	; (800135c <XMC_SCU_PARITY_Enable+0x20>)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	4313      	orrs	r3, r2
 800134e:	600b      	str	r3, [r1, #0]
}
 8001350:	bf00      	nop
 8001352:	370c      	adds	r7, #12
 8001354:	46bd      	mov	sp, r7
 8001356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135a:	4770      	bx	lr
 800135c:	5000413c 	.word	0x5000413c

08001360 <XMC_SCU_PARITY_Disable>:

/* API to disable parity error checking for the selected on-chip RAM type */
void XMC_SCU_PARITY_Disable(const uint32_t memory)
{
 8001360:	b480      	push	{r7}
 8001362:	b083      	sub	sp, #12
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  SCU_PARITY->PEEN &= (uint32_t)~memory; 
 8001368:	4b06      	ldr	r3, [pc, #24]	; (8001384 <XMC_SCU_PARITY_Disable+0x24>)
 800136a:	681a      	ldr	r2, [r3, #0]
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	43db      	mvns	r3, r3
 8001370:	4904      	ldr	r1, [pc, #16]	; (8001384 <XMC_SCU_PARITY_Disable+0x24>)
 8001372:	4013      	ands	r3, r2
 8001374:	600b      	str	r3, [r1, #0]
}
 8001376:	bf00      	nop
 8001378:	370c      	adds	r7, #12
 800137a:	46bd      	mov	sp, r7
 800137c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001380:	4770      	bx	lr
 8001382:	bf00      	nop
 8001384:	5000413c 	.word	0x5000413c

08001388 <XMC_SCU_PARITY_EnableTrapGeneration>:

/* API to enable trap assertion for the parity error source */
void XMC_SCU_PARITY_EnableTrapGeneration(const uint32_t memory)
{
 8001388:	b480      	push	{r7}
 800138a:	b083      	sub	sp, #12
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  SCU_PARITY->PETE |= (uint32_t)memory; 
 8001390:	4b05      	ldr	r3, [pc, #20]	; (80013a8 <XMC_SCU_PARITY_EnableTrapGeneration+0x20>)
 8001392:	689a      	ldr	r2, [r3, #8]
 8001394:	4904      	ldr	r1, [pc, #16]	; (80013a8 <XMC_SCU_PARITY_EnableTrapGeneration+0x20>)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	4313      	orrs	r3, r2
 800139a:	608b      	str	r3, [r1, #8]
}
 800139c:	bf00      	nop
 800139e:	370c      	adds	r7, #12
 80013a0:	46bd      	mov	sp, r7
 80013a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a6:	4770      	bx	lr
 80013a8:	5000413c 	.word	0x5000413c

080013ac <XMC_SCU_PARITY_DisableTrapGeneration>:

/* API to disable the assertion of trap for the parity error source */
void XMC_SCU_PARITY_DisableTrapGeneration(const uint32_t memory)
{
 80013ac:	b480      	push	{r7}
 80013ae:	b083      	sub	sp, #12
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  SCU_PARITY->PETE &= (uint32_t)~memory; 
 80013b4:	4b06      	ldr	r3, [pc, #24]	; (80013d0 <XMC_SCU_PARITY_DisableTrapGeneration+0x24>)
 80013b6:	689a      	ldr	r2, [r3, #8]
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	43db      	mvns	r3, r3
 80013bc:	4904      	ldr	r1, [pc, #16]	; (80013d0 <XMC_SCU_PARITY_DisableTrapGeneration+0x24>)
 80013be:	4013      	ands	r3, r2
 80013c0:	608b      	str	r3, [r1, #8]
}
 80013c2:	bf00      	nop
 80013c4:	370c      	adds	r7, #12
 80013c6:	46bd      	mov	sp, r7
 80013c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013cc:	4770      	bx	lr
 80013ce:	bf00      	nop
 80013d0:	5000413c 	.word	0x5000413c

080013d4 <XMC_SCU_INTERRUPT_EnableNmiRequest>:

/* Enables a NMI source */
void XMC_SCU_INTERRUPT_EnableNmiRequest(const uint32_t request)
{
 80013d4:	b480      	push	{r7}
 80013d6:	b083      	sub	sp, #12
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  SCU_INTERRUPT->NMIREQEN |= (uint32_t)request;
 80013dc:	4b05      	ldr	r3, [pc, #20]	; (80013f4 <XMC_SCU_INTERRUPT_EnableNmiRequest+0x20>)
 80013de:	695a      	ldr	r2, [r3, #20]
 80013e0:	4904      	ldr	r1, [pc, #16]	; (80013f4 <XMC_SCU_INTERRUPT_EnableNmiRequest+0x20>)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	4313      	orrs	r3, r2
 80013e6:	614b      	str	r3, [r1, #20]
}
 80013e8:	bf00      	nop
 80013ea:	370c      	adds	r7, #12
 80013ec:	46bd      	mov	sp, r7
 80013ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f2:	4770      	bx	lr
 80013f4:	50004074 	.word	0x50004074

080013f8 <XMC_SCU_INTERRUPT_DisableNmiRequest>:

/* Disables a NMI source */
void XMC_SCU_INTERRUPT_DisableNmiRequest(const uint32_t request)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b083      	sub	sp, #12
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  SCU_INTERRUPT->NMIREQEN &= (uint32_t)~request;
 8001400:	4b06      	ldr	r3, [pc, #24]	; (800141c <XMC_SCU_INTERRUPT_DisableNmiRequest+0x24>)
 8001402:	695a      	ldr	r2, [r3, #20]
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	43db      	mvns	r3, r3
 8001408:	4904      	ldr	r1, [pc, #16]	; (800141c <XMC_SCU_INTERRUPT_DisableNmiRequest+0x24>)
 800140a:	4013      	ands	r3, r2
 800140c:	614b      	str	r3, [r1, #20]
}
 800140e:	bf00      	nop
 8001410:	370c      	adds	r7, #12
 8001412:	46bd      	mov	sp, r7
 8001414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001418:	4770      	bx	lr
 800141a:	bf00      	nop
 800141c:	50004074 	.word	0x50004074

08001420 <XMC_SCU_RESET_AssertPeripheralReset>:

/* API to manually assert a reset request */
void XMC_SCU_RESET_AssertPeripheralReset(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
{
 8001420:	b480      	push	{r7}
 8001422:	b085      	sub	sp, #20
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	0f1b      	lsrs	r3, r3, #28
 800142c:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8001434:	60bb      	str	r3, [r7, #8]

  *(uint32_t *)(&(SCU_RESET->PRSET0) + (index * 3U)) = (uint32_t)mask;
 8001436:	68fa      	ldr	r2, [r7, #12]
 8001438:	4613      	mov	r3, r2
 800143a:	005b      	lsls	r3, r3, #1
 800143c:	4413      	add	r3, r2
 800143e:	009b      	lsls	r3, r3, #2
 8001440:	461a      	mov	r2, r3
 8001442:	4b05      	ldr	r3, [pc, #20]	; (8001458 <XMC_SCU_RESET_AssertPeripheralReset+0x38>)
 8001444:	4413      	add	r3, r2
 8001446:	68ba      	ldr	r2, [r7, #8]
 8001448:	601a      	str	r2, [r3, #0]
}
 800144a:	bf00      	nop
 800144c:	3714      	adds	r7, #20
 800144e:	46bd      	mov	sp, r7
 8001450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001454:	4770      	bx	lr
 8001456:	bf00      	nop
 8001458:	50004410 	.word	0x50004410

0800145c <XMC_SCU_RESET_DeassertPeripheralReset>:

/* API to manually de-assert a reset request */
void XMC_SCU_RESET_DeassertPeripheralReset(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
{
 800145c:	b480      	push	{r7}
 800145e:	b085      	sub	sp, #20
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	0f1b      	lsrs	r3, r3, #28
 8001468:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8001470:	60bb      	str	r3, [r7, #8]

  *(uint32_t *)(&(SCU_RESET->PRCLR0) + (index * 3U)) = (uint32_t)mask;
 8001472:	68fa      	ldr	r2, [r7, #12]
 8001474:	4613      	mov	r3, r2
 8001476:	005b      	lsls	r3, r3, #1
 8001478:	4413      	add	r3, r2
 800147a:	009b      	lsls	r3, r3, #2
 800147c:	461a      	mov	r2, r3
 800147e:	4b05      	ldr	r3, [pc, #20]	; (8001494 <XMC_SCU_RESET_DeassertPeripheralReset+0x38>)
 8001480:	4413      	add	r3, r2
 8001482:	68ba      	ldr	r2, [r7, #8]
 8001484:	601a      	str	r2, [r3, #0]
}
 8001486:	bf00      	nop
 8001488:	3714      	adds	r7, #20
 800148a:	46bd      	mov	sp, r7
 800148c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001490:	4770      	bx	lr
 8001492:	bf00      	nop
 8001494:	50004414 	.word	0x50004414

08001498 <XMC_SCU_RESET_IsPeripheralResetAsserted>:

/* Find out if the peripheral reset is asserted */
bool XMC_SCU_RESET_IsPeripheralResetAsserted(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
{
 8001498:	b480      	push	{r7}
 800149a:	b085      	sub	sp, #20
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	0f1b      	lsrs	r3, r3, #28
 80014a4:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80014ac:	60bb      	str	r3, [r7, #8]

  return ((*(uint32_t *)(&(SCU_RESET->PRSTAT0) + (index * 3U)) & mask) != 0U);
 80014ae:	68fa      	ldr	r2, [r7, #12]
 80014b0:	4613      	mov	r3, r2
 80014b2:	005b      	lsls	r3, r3, #1
 80014b4:	4413      	add	r3, r2
 80014b6:	009b      	lsls	r3, r3, #2
 80014b8:	461a      	mov	r2, r3
 80014ba:	4b08      	ldr	r3, [pc, #32]	; (80014dc <XMC_SCU_RESET_IsPeripheralResetAsserted+0x44>)
 80014bc:	4413      	add	r3, r2
 80014be:	681a      	ldr	r2, [r3, #0]
 80014c0:	68bb      	ldr	r3, [r7, #8]
 80014c2:	4013      	ands	r3, r2
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	bf14      	ite	ne
 80014c8:	2301      	movne	r3, #1
 80014ca:	2300      	moveq	r3, #0
 80014cc:	b2db      	uxtb	r3, r3
}
 80014ce:	4618      	mov	r0, r3
 80014d0:	3714      	adds	r7, #20
 80014d2:	46bd      	mov	sp, r7
 80014d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d8:	4770      	bx	lr
 80014da:	bf00      	nop
 80014dc:	5000440c 	.word	0x5000440c

080014e0 <XMC_SCU_CLOCK_GetSystemPllClockFrequency>:

/*
 * API to retrieve frequency of System PLL output clock
 */
uint32_t XMC_SCU_CLOCK_GetSystemPllClockFrequency(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b084      	sub	sp, #16
 80014e4:	af00      	add	r7, sp, #0
  uint32_t clock_frequency;
  uint32_t p_div;
  uint32_t n_div;
  uint32_t k2_div;

  clock_frequency = XMC_SCU_CLOCK_GetSystemPllClockSourceFrequency();
 80014e6:	f000 f839 	bl	800155c <XMC_SCU_CLOCK_GetSystemPllClockSourceFrequency>
 80014ea:	60f8      	str	r0, [r7, #12]
  if(SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk)
 80014ec:	4b1a      	ldr	r3, [pc, #104]	; (8001558 <XMC_SCU_CLOCK_GetSystemPllClockFrequency+0x78>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f003 0301 	and.w	r3, r3, #1
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d009      	beq.n	800150c <XMC_SCU_CLOCK_GetSystemPllClockFrequency+0x2c>
  {
    /* Prescalar mode - fOSC is the parent*/
    clock_frequency = (uint32_t)(clock_frequency / 
                      ((((SCU_PLL->PLLCON1) & SCU_PLL_PLLCON1_K1DIV_Msk) >> SCU_PLL_PLLCON1_K1DIV_Pos) + 1UL));
 80014f8:	4b17      	ldr	r3, [pc, #92]	; (8001558 <XMC_SCU_CLOCK_GetSystemPllClockFrequency+0x78>)
 80014fa:	689b      	ldr	r3, [r3, #8]
 80014fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001500:	3301      	adds	r3, #1
    clock_frequency = (uint32_t)(clock_frequency / 
 8001502:	68fa      	ldr	r2, [r7, #12]
 8001504:	fbb2 f3f3 	udiv	r3, r2, r3
 8001508:	60fb      	str	r3, [r7, #12]
 800150a:	e01f      	b.n	800154c <XMC_SCU_CLOCK_GetSystemPllClockFrequency+0x6c>
  }
  else
  {
    p_div  = (uint32_t)((((SCU_PLL->PLLCON1) & SCU_PLL_PLLCON1_PDIV_Msk) >> SCU_PLL_PLLCON1_PDIV_Pos) + 1UL);
 800150c:	4b12      	ldr	r3, [pc, #72]	; (8001558 <XMC_SCU_CLOCK_GetSystemPllClockFrequency+0x78>)
 800150e:	689b      	ldr	r3, [r3, #8]
 8001510:	0e1b      	lsrs	r3, r3, #24
 8001512:	f003 030f 	and.w	r3, r3, #15
 8001516:	3301      	adds	r3, #1
 8001518:	60bb      	str	r3, [r7, #8]
    n_div  = (uint32_t)((((SCU_PLL->PLLCON1) & SCU_PLL_PLLCON1_NDIV_Msk) >> SCU_PLL_PLLCON1_NDIV_Pos) + 1UL);
 800151a:	4b0f      	ldr	r3, [pc, #60]	; (8001558 <XMC_SCU_CLOCK_GetSystemPllClockFrequency+0x78>)
 800151c:	689b      	ldr	r3, [r3, #8]
 800151e:	0a1b      	lsrs	r3, r3, #8
 8001520:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001524:	3301      	adds	r3, #1
 8001526:	607b      	str	r3, [r7, #4]
    k2_div = (uint32_t)((((SCU_PLL->PLLCON1) & SCU_PLL_PLLCON1_K2DIV_Msk) >> SCU_PLL_PLLCON1_K2DIV_Pos) + 1UL);
 8001528:	4b0b      	ldr	r3, [pc, #44]	; (8001558 <XMC_SCU_CLOCK_GetSystemPllClockFrequency+0x78>)
 800152a:	689b      	ldr	r3, [r3, #8]
 800152c:	0c1b      	lsrs	r3, r3, #16
 800152e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001532:	3301      	adds	r3, #1
 8001534:	603b      	str	r3, [r7, #0]
       
    clock_frequency = (clock_frequency * n_div) / (p_div * k2_div);
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	687a      	ldr	r2, [r7, #4]
 800153a:	fb02 f203 	mul.w	r2, r2, r3
 800153e:	68bb      	ldr	r3, [r7, #8]
 8001540:	6839      	ldr	r1, [r7, #0]
 8001542:	fb01 f303 	mul.w	r3, r1, r3
 8001546:	fbb2 f3f3 	udiv	r3, r2, r3
 800154a:	60fb      	str	r3, [r7, #12]
  }

  return (clock_frequency);
 800154c:	68fb      	ldr	r3, [r7, #12]
}
 800154e:	4618      	mov	r0, r3
 8001550:	3710      	adds	r7, #16
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	50004710 	.word	0x50004710

0800155c <XMC_SCU_CLOCK_GetSystemPllClockSourceFrequency>:

/**
 * API to retrieve frequency of System PLL VCO input clock
 */
uint32_t XMC_SCU_CLOCK_GetSystemPllClockSourceFrequency(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b082      	sub	sp, #8
 8001560:	af00      	add	r7, sp, #0
  uint32_t clock_frequency;

  /* Prescalar mode - fOSC is the parent*/
  if((SCU_PLL->PLLCON2 & SCU_PLL_PLLCON2_PINSEL_Msk) == (uint32_t)XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP)
 8001562:	4b08      	ldr	r3, [pc, #32]	; (8001584 <XMC_SCU_CLOCK_GetSystemPllClockSourceFrequency+0x28>)
 8001564:	68db      	ldr	r3, [r3, #12]
 8001566:	f003 0301 	and.w	r3, r3, #1
 800156a:	2b00      	cmp	r3, #0
 800156c:	d103      	bne.n	8001576 <XMC_SCU_CLOCK_GetSystemPllClockSourceFrequency+0x1a>
  {
    clock_frequency = OSCHP_GetFrequency();
 800156e:	f001 f9df 	bl	8002930 <OSCHP_GetFrequency>
 8001572:	6078      	str	r0, [r7, #4]
 8001574:	e001      	b.n	800157a <XMC_SCU_CLOCK_GetSystemPllClockSourceFrequency+0x1e>
  }
  else
  {
    clock_frequency = OFI_FREQUENCY;
 8001576:	4b04      	ldr	r3, [pc, #16]	; (8001588 <XMC_SCU_CLOCK_GetSystemPllClockSourceFrequency+0x2c>)
 8001578:	607b      	str	r3, [r7, #4]
  }
  
  return (clock_frequency);
 800157a:	687b      	ldr	r3, [r7, #4]
}
 800157c:	4618      	mov	r0, r3
 800157e:	3708      	adds	r7, #8
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}
 8001584:	50004710 	.word	0x50004710
 8001588:	016e3600 	.word	0x016e3600

0800158c <XMC_SCU_CLOCK_GetUsbPllClockFrequency>:

/*
 * API to retrieve frequency of USB PLL output clock
 */
uint32_t XMC_SCU_CLOCK_GetUsbPllClockFrequency(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b084      	sub	sp, #16
 8001590:	af00      	add	r7, sp, #0
  uint32_t clock_frequency;
  uint32_t n_div;
  uint32_t p_div;
  
  clock_frequency = OSCHP_GetFrequency();
 8001592:	f001 f9cd 	bl	8002930 <OSCHP_GetFrequency>
 8001596:	60f8      	str	r0, [r7, #12]
  if((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOBYST_Msk) == 0U)
 8001598:	4b10      	ldr	r3, [pc, #64]	; (80015dc <XMC_SCU_CLOCK_GetUsbPllClockFrequency+0x50>)
 800159a:	691b      	ldr	r3, [r3, #16]
 800159c:	f003 0301 	and.w	r3, r3, #1
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d116      	bne.n	80015d2 <XMC_SCU_CLOCK_GetUsbPllClockFrequency+0x46>
  {
    /* Normal mode - fVCO is the parent*/
    n_div = (uint32_t)((((SCU_PLL->USBPLLCON) & SCU_PLL_USBPLLCON_NDIV_Msk) >> SCU_PLL_USBPLLCON_NDIV_Pos) + 1UL);
 80015a4:	4b0d      	ldr	r3, [pc, #52]	; (80015dc <XMC_SCU_CLOCK_GetUsbPllClockFrequency+0x50>)
 80015a6:	695b      	ldr	r3, [r3, #20]
 80015a8:	0a1b      	lsrs	r3, r3, #8
 80015aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80015ae:	3301      	adds	r3, #1
 80015b0:	60bb      	str	r3, [r7, #8]
    p_div = (uint32_t)((((SCU_PLL->USBPLLCON) & SCU_PLL_USBPLLCON_PDIV_Msk) >> SCU_PLL_USBPLLCON_PDIV_Pos) + 1UL);
 80015b2:	4b0a      	ldr	r3, [pc, #40]	; (80015dc <XMC_SCU_CLOCK_GetUsbPllClockFrequency+0x50>)
 80015b4:	695b      	ldr	r3, [r3, #20]
 80015b6:	0e1b      	lsrs	r3, r3, #24
 80015b8:	f003 030f 	and.w	r3, r3, #15
 80015bc:	3301      	adds	r3, #1
 80015be:	607b      	str	r3, [r7, #4]
    clock_frequency = (uint32_t)((clock_frequency * n_div)/ (uint32_t)(p_div * 2UL));
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	68ba      	ldr	r2, [r7, #8]
 80015c4:	fb02 f203 	mul.w	r2, r2, r3
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	005b      	lsls	r3, r3, #1
 80015cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80015d0:	60fb      	str	r3, [r7, #12]
  }
  return (clock_frequency);
 80015d2:	68fb      	ldr	r3, [r7, #12]
}
 80015d4:	4618      	mov	r0, r3
 80015d6:	3710      	adds	r7, #16
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	50004710 	.word	0x50004710

080015e0 <XMC_SCU_CLOCK_GetCcuClockFrequency>:

/*
 * API to retrieve frequency of CCU clock frequency
 */
uint32_t XMC_SCU_CLOCK_GetCcuClockFrequency(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b082      	sub	sp, #8
 80015e4:	af00      	add	r7, sp, #0
  uint32_t frequency = 0UL;
 80015e6:	2300      	movs	r3, #0
 80015e8:	607b      	str	r3, [r7, #4]
  frequency = XMC_SCU_CLOCK_GetSystemClockFrequency();
 80015ea:	f7ff fb9b 	bl	8000d24 <XMC_SCU_CLOCK_GetSystemClockFrequency>
 80015ee:	6078      	str	r0, [r7, #4]
  
  return (uint32_t)(frequency >> ((uint32_t)((SCU_CLK->CCUCLKCR & SCU_CLK_CCUCLKCR_CCUDIV_Msk) >>
 80015f0:	4b05      	ldr	r3, [pc, #20]	; (8001608 <XMC_SCU_CLOCK_GetCcuClockFrequency+0x28>)
 80015f2:	6a1b      	ldr	r3, [r3, #32]
 80015f4:	f003 0301 	and.w	r3, r3, #1
 80015f8:	687a      	ldr	r2, [r7, #4]
 80015fa:	fa22 f303 	lsr.w	r3, r2, r3
                                              SCU_CLK_CCUCLKCR_CCUDIV_Pos)));
}
 80015fe:	4618      	mov	r0, r3
 8001600:	3708      	adds	r7, #8
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	50004600 	.word	0x50004600

0800160c <XMC_SCU_CLOCK_GetUsbClockFrequency>:

/*
 * API to retrieve USB and SDMMC clock frequency
 */
uint32_t XMC_SCU_CLOCK_GetUsbClockFrequency(void)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b082      	sub	sp, #8
 8001610:	af00      	add	r7, sp, #0
  uint32_t frequency = 0UL;
 8001612:	2300      	movs	r3, #0
 8001614:	607b      	str	r3, [r7, #4]
  XMC_SCU_CLOCK_USBCLKSRC_t clksrc;

  clksrc = XMC_SCU_CLOCK_GetUsbClockSource();
 8001616:	f7ff fb59 	bl	8000ccc <XMC_SCU_CLOCK_GetUsbClockSource>
 800161a:	6038      	str	r0, [r7, #0]

  if (clksrc == XMC_SCU_CLOCK_USBCLKSRC_SYSPLL)
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001622:	d103      	bne.n	800162c <XMC_SCU_CLOCK_GetUsbClockFrequency+0x20>
  {
    frequency = XMC_SCU_CLOCK_GetSystemPllClockFrequency();
 8001624:	f7ff ff5c 	bl	80014e0 <XMC_SCU_CLOCK_GetSystemPllClockFrequency>
 8001628:	6078      	str	r0, [r7, #4]
 800162a:	e005      	b.n	8001638 <XMC_SCU_CLOCK_GetUsbClockFrequency+0x2c>
  }
  else if (clksrc == XMC_SCU_CLOCK_USBCLKSRC_USBPLL)
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d102      	bne.n	8001638 <XMC_SCU_CLOCK_GetUsbClockFrequency+0x2c>
  {
    frequency = XMC_SCU_CLOCK_GetUsbPllClockFrequency();
 8001632:	f7ff ffab 	bl	800158c <XMC_SCU_CLOCK_GetUsbPllClockFrequency>
 8001636:	6078      	str	r0, [r7, #4]
  }
  else
  {
  }

  return (uint32_t)(frequency / (((SCU_CLK->USBCLKCR & SCU_CLK_USBCLKCR_USBDIV_Msk) >>
 8001638:	4b05      	ldr	r3, [pc, #20]	; (8001650 <XMC_SCU_CLOCK_GetUsbClockFrequency+0x44>)
 800163a:	699b      	ldr	r3, [r3, #24]
 800163c:	f003 0307 	and.w	r3, r3, #7
                                   SCU_CLK_USBCLKCR_USBDIV_Pos) + 1UL));
 8001640:	3301      	adds	r3, #1
  return (uint32_t)(frequency / (((SCU_CLK->USBCLKCR & SCU_CLK_USBCLKCR_USBDIV_Msk) >>
 8001642:	687a      	ldr	r2, [r7, #4]
 8001644:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8001648:	4618      	mov	r0, r3
 800164a:	3708      	adds	r7, #8
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}
 8001650:	50004600 	.word	0x50004600

08001654 <XMC_SCU_CLOCK_GetEbuClockFrequency>:
#if defined(EBU)
/*
 * API to retrieve EBU clock frequency
 */
uint32_t XMC_SCU_CLOCK_GetEbuClockFrequency(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b082      	sub	sp, #8
 8001658:	af00      	add	r7, sp, #0
  uint32_t frequency = XMC_SCU_CLOCK_GetSystemPllClockFrequency();
 800165a:	f7ff ff41 	bl	80014e0 <XMC_SCU_CLOCK_GetSystemPllClockFrequency>
 800165e:	6078      	str	r0, [r7, #4]
  
  return (uint32_t)((frequency /(((SCU_CLK->EBUCLKCR & SCU_CLK_EBUCLKCR_EBUDIV_Msk) >>
 8001660:	4b05      	ldr	r3, [pc, #20]	; (8001678 <XMC_SCU_CLOCK_GetEbuClockFrequency+0x24>)
 8001662:	69db      	ldr	r3, [r3, #28]
 8001664:	f003 033f 	and.w	r3, r3, #63	; 0x3f
                                   SCU_CLK_EBUCLKCR_EBUDIV_Pos) + 1UL)));
 8001668:	3301      	adds	r3, #1
  return (uint32_t)((frequency /(((SCU_CLK->EBUCLKCR & SCU_CLK_EBUCLKCR_EBUDIV_Msk) >>
 800166a:	687a      	ldr	r2, [r7, #4]
 800166c:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8001670:	4618      	mov	r0, r3
 8001672:	3708      	adds	r7, #8
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}
 8001678:	50004600 	.word	0x50004600

0800167c <XMC_SCU_CLOCK_GetWdtClockFrequency>:

/*
 * API to retrieve WDT clock frequency
 */
uint32_t XMC_SCU_CLOCK_GetWdtClockFrequency(void)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b082      	sub	sp, #8
 8001680:	af00      	add	r7, sp, #0
  uint32_t frequency = 0UL;
 8001682:	2300      	movs	r3, #0
 8001684:	607b      	str	r3, [r7, #4]
  XMC_SCU_CLOCK_WDTCLKSRC_t clksrc;

  clksrc = XMC_SCU_CLOCK_GetWdtClockSource();
 8001686:	f7ff fb2f 	bl	8000ce8 <XMC_SCU_CLOCK_GetWdtClockSource>
 800168a:	6038      	str	r0, [r7, #0]

  if (clksrc == XMC_SCU_CLOCK_WDTCLKSRC_PLL)
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001692:	d103      	bne.n	800169c <XMC_SCU_CLOCK_GetWdtClockFrequency+0x20>
  {
    frequency = XMC_SCU_CLOCK_GetSystemPllClockFrequency();
 8001694:	f7ff ff24 	bl	80014e0 <XMC_SCU_CLOCK_GetSystemPllClockFrequency>
 8001698:	6078      	str	r0, [r7, #4]
 800169a:	e00c      	b.n	80016b6 <XMC_SCU_CLOCK_GetWdtClockFrequency+0x3a>
  }
  else if (clksrc == XMC_SCU_CLOCK_WDTCLKSRC_OFI)
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d102      	bne.n	80016a8 <XMC_SCU_CLOCK_GetWdtClockFrequency+0x2c>
  {
    frequency = OFI_FREQUENCY;
 80016a2:	4b0a      	ldr	r3, [pc, #40]	; (80016cc <XMC_SCU_CLOCK_GetWdtClockFrequency+0x50>)
 80016a4:	607b      	str	r3, [r7, #4]
 80016a6:	e006      	b.n	80016b6 <XMC_SCU_CLOCK_GetWdtClockFrequency+0x3a>
  }
  else if (clksrc == XMC_SCU_CLOCK_WDTCLKSRC_STDBY)
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016ae:	d102      	bne.n	80016b6 <XMC_SCU_CLOCK_GetWdtClockFrequency+0x3a>
  {
    frequency = OSI_FREQUENCY;
 80016b0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80016b4:	607b      	str	r3, [r7, #4]
  else
  {

  }

  return (uint32_t)((frequency / (((SCU_CLK->WDTCLKCR & SCU_CLK_WDTCLKCR_WDTDIV_Msk) >>
 80016b6:	4b06      	ldr	r3, [pc, #24]	; (80016d0 <XMC_SCU_CLOCK_GetWdtClockFrequency+0x54>)
 80016b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ba:	b2db      	uxtb	r3, r3
                                    SCU_CLK_WDTCLKCR_WDTDIV_Pos) + 1UL)));
 80016bc:	3301      	adds	r3, #1
  return (uint32_t)((frequency / (((SCU_CLK->WDTCLKCR & SCU_CLK_WDTCLKCR_WDTDIV_Msk) >>
 80016be:	687a      	ldr	r2, [r7, #4]
 80016c0:	fbb2 f3f3 	udiv	r3, r2, r3
}
 80016c4:	4618      	mov	r0, r3
 80016c6:	3708      	adds	r7, #8
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	016e3600 	.word	0x016e3600
 80016d0:	50004600 	.word	0x50004600

080016d4 <XMC_SCU_CLOCK_GetExternalOutputClockFrequency>:
/**
 * @brief API to retrieve EXTERNAL-OUT clock frequency
 * @retval Clock frequency
 */
uint32_t XMC_SCU_CLOCK_GetExternalOutputClockFrequency(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b082      	sub	sp, #8
 80016d8:	af00      	add	r7, sp, #0
  uint32_t frequency = 0UL;
 80016da:	2300      	movs	r3, #0
 80016dc:	607b      	str	r3, [r7, #4]
  XMC_SCU_CLOCK_EXTOUTCLKSRC_t clksrc;

  clksrc = XMC_SCU_CLOCK_GetExternalOutputClockSource();
 80016de:	f7ff fb11 	bl	8000d04 <XMC_SCU_CLOCK_GetExternalOutputClockSource>
 80016e2:	4603      	mov	r3, r0
 80016e4:	70fb      	strb	r3, [r7, #3]

  if (clksrc == XMC_SCU_CLOCK_EXTOUTCLKSRC_PLL)
 80016e6:	78fb      	ldrb	r3, [r7, #3]
 80016e8:	2b03      	cmp	r3, #3
 80016ea:	d10d      	bne.n	8001708 <XMC_SCU_CLOCK_GetExternalOutputClockFrequency+0x34>
  {
    frequency = XMC_SCU_CLOCK_GetSystemPllClockFrequency();
 80016ec:	f7ff fef8 	bl	80014e0 <XMC_SCU_CLOCK_GetSystemPllClockFrequency>
 80016f0:	6078      	str	r0, [r7, #4]
    
    frequency = (uint32_t)((frequency / ((((SCU_CLK->EXTCLKCR) & SCU_CLK_EXTCLKCR_ECKDIV_Msk) >>
 80016f2:	4b13      	ldr	r3, [pc, #76]	; (8001740 <XMC_SCU_CLOCK_GetExternalOutputClockFrequency+0x6c>)
 80016f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016f6:	0c1b      	lsrs	r3, r3, #16
 80016f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
                 SCU_CLK_EXTCLKCR_ECKDIV_Pos)+ 1UL)));
 80016fc:	3301      	adds	r3, #1
    frequency = (uint32_t)((frequency / ((((SCU_CLK->EXTCLKCR) & SCU_CLK_EXTCLKCR_ECKDIV_Msk) >>
 80016fe:	687a      	ldr	r2, [r7, #4]
 8001700:	fbb2 f3f3 	udiv	r3, r2, r3
 8001704:	607b      	str	r3, [r7, #4]
 8001706:	e016      	b.n	8001736 <XMC_SCU_CLOCK_GetExternalOutputClockFrequency+0x62>
  }
  else if (clksrc == XMC_SCU_CLOCK_EXTOUTCLKSRC_SYS)
 8001708:	78fb      	ldrb	r3, [r7, #3]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d103      	bne.n	8001716 <XMC_SCU_CLOCK_GetExternalOutputClockFrequency+0x42>
  {
    frequency = XMC_SCU_CLOCK_GetSystemClockFrequency();
 800170e:	f7ff fb09 	bl	8000d24 <XMC_SCU_CLOCK_GetSystemClockFrequency>
 8001712:	6078      	str	r0, [r7, #4]
 8001714:	e00f      	b.n	8001736 <XMC_SCU_CLOCK_GetExternalOutputClockFrequency+0x62>
  }
  else if (clksrc == XMC_SCU_CLOCK_EXTOUTCLKSRC_USB)
 8001716:	78fb      	ldrb	r3, [r7, #3]
 8001718:	2b02      	cmp	r3, #2
 800171a:	d10c      	bne.n	8001736 <XMC_SCU_CLOCK_GetExternalOutputClockFrequency+0x62>
  {
    frequency = XMC_SCU_CLOCK_GetUsbPllClockFrequency();
 800171c:	f7ff ff36 	bl	800158c <XMC_SCU_CLOCK_GetUsbPllClockFrequency>
 8001720:	6078      	str	r0, [r7, #4]
    
    frequency = (uint32_t)((frequency / ((((SCU_CLK->EXTCLKCR) & SCU_CLK_EXTCLKCR_ECKDIV_Msk) >>
 8001722:	4b07      	ldr	r3, [pc, #28]	; (8001740 <XMC_SCU_CLOCK_GetExternalOutputClockFrequency+0x6c>)
 8001724:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001726:	0c1b      	lsrs	r3, r3, #16
 8001728:	f3c3 0308 	ubfx	r3, r3, #0, #9
                 SCU_CLK_EXTCLKCR_ECKDIV_Pos)+ 1UL)));
 800172c:	3301      	adds	r3, #1
    frequency = (uint32_t)((frequency / ((((SCU_CLK->EXTCLKCR) & SCU_CLK_EXTCLKCR_ECKDIV_Msk) >>
 800172e:	687a      	ldr	r2, [r7, #4]
 8001730:	fbb2 f3f3 	udiv	r3, r2, r3
 8001734:	607b      	str	r3, [r7, #4]
  else
  {

  }

  return (frequency);
 8001736:	687b      	ldr	r3, [r7, #4]
}
 8001738:	4618      	mov	r0, r3
 800173a:	3708      	adds	r7, #8
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}
 8001740:	50004600 	.word	0x50004600

08001744 <XMC_SCU_CLOCK_GetPeripheralClockFrequency>:

/*
 * API to retrieve clock frequency of peripherals on the peripheral bus using a shared functional clock
 */
uint32_t XMC_SCU_CLOCK_GetPeripheralClockFrequency(void)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	af00      	add	r7, sp, #0
  return (uint32_t)(XMC_SCU_CLOCK_GetCpuClockFrequency() >>
 8001748:	f7ff fb00 	bl	8000d4c <XMC_SCU_CLOCK_GetCpuClockFrequency>
 800174c:	4602      	mov	r2, r0
         ((SCU_CLK->PBCLKCR & SCU_CLK_PBCLKCR_PBDIV_Msk) >> SCU_CLK_PBCLKCR_PBDIV_Pos));  
 800174e:	4b04      	ldr	r3, [pc, #16]	; (8001760 <XMC_SCU_CLOCK_GetPeripheralClockFrequency+0x1c>)
 8001750:	695b      	ldr	r3, [r3, #20]
 8001752:	f003 0301 	and.w	r3, r3, #1
  return (uint32_t)(XMC_SCU_CLOCK_GetCpuClockFrequency() >>
 8001756:	fa22 f303 	lsr.w	r3, r2, r3
}
 800175a:	4618      	mov	r0, r3
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	50004600 	.word	0x50004600

08001764 <XMC_SCU_CLOCK_SetSystemClockSource>:

/* API to select fSYS */
void XMC_SCU_CLOCK_SetSystemClockSource(const XMC_SCU_CLOCK_SYSCLKSRC_t source)
{
 8001764:	b480      	push	{r7}
 8001766:	b083      	sub	sp, #12
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSSEL_Msk)) |
 800176c:	4b06      	ldr	r3, [pc, #24]	; (8001788 <XMC_SCU_CLOCK_SetSystemClockSource+0x24>)
 800176e:	68db      	ldr	r3, [r3, #12]
 8001770:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8001774:	4904      	ldr	r1, [pc, #16]	; (8001788 <XMC_SCU_CLOCK_SetSystemClockSource+0x24>)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	4313      	orrs	r3, r2
 800177a:	60cb      	str	r3, [r1, #12]
                      ((uint32_t)source);
}
 800177c:	bf00      	nop
 800177e:	370c      	adds	r7, #12
 8001780:	46bd      	mov	sp, r7
 8001782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001786:	4770      	bx	lr
 8001788:	50004600 	.word	0x50004600

0800178c <XMC_SCU_CLOCK_SetUsbClockSource>:

/* API to select fUSB */
void XMC_SCU_CLOCK_SetUsbClockSource(const XMC_SCU_CLOCK_USBCLKSRC_t source)
{
 800178c:	b480      	push	{r7}
 800178e:	b083      	sub	sp, #12
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBSEL_Msk)) |
 8001794:	4b06      	ldr	r3, [pc, #24]	; (80017b0 <XMC_SCU_CLOCK_SetUsbClockSource+0x24>)
 8001796:	699b      	ldr	r3, [r3, #24]
 8001798:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800179c:	4904      	ldr	r1, [pc, #16]	; (80017b0 <XMC_SCU_CLOCK_SetUsbClockSource+0x24>)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	4313      	orrs	r3, r2
 80017a2:	618b      	str	r3, [r1, #24]
                      ((uint32_t)source);
}
 80017a4:	bf00      	nop
 80017a6:	370c      	adds	r7, #12
 80017a8:	46bd      	mov	sp, r7
 80017aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ae:	4770      	bx	lr
 80017b0:	50004600 	.word	0x50004600

080017b4 <XMC_SCU_CLOCK_SetWdtClockSource>:

/* API to select fWDT */
void XMC_SCU_CLOCK_SetWdtClockSource(const XMC_SCU_CLOCK_WDTCLKSRC_t source)
{
 80017b4:	b480      	push	{r7}
 80017b6:	b083      	sub	sp, #12
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTSEL_Msk)) |
 80017bc:	4b06      	ldr	r3, [pc, #24]	; (80017d8 <XMC_SCU_CLOCK_SetWdtClockSource+0x24>)
 80017be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017c0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80017c4:	4904      	ldr	r1, [pc, #16]	; (80017d8 <XMC_SCU_CLOCK_SetWdtClockSource+0x24>)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	4313      	orrs	r3, r2
 80017ca:	624b      	str	r3, [r1, #36]	; 0x24
                      ((uint32_t)source);
}
 80017cc:	bf00      	nop
 80017ce:	370c      	adds	r7, #12
 80017d0:	46bd      	mov	sp, r7
 80017d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d6:	4770      	bx	lr
 80017d8:	50004600 	.word	0x50004600

080017dc <XMC_SCU_CLOCK_SetExternalOutputClockSource>:

/* API to select fEXT */
void XMC_SCU_CLOCK_SetExternalOutputClockSource(const XMC_SCU_CLOCK_EXTOUTCLKSRC_t source)
{
 80017dc:	b480      	push	{r7}
 80017de:	b083      	sub	sp, #12
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	4603      	mov	r3, r0
 80017e4:	71fb      	strb	r3, [r7, #7]
  SCU_CLK->EXTCLKCR = (SCU_CLK->EXTCLKCR & ((uint32_t)~SCU_CLK_EXTCLKCR_ECKSEL_Msk)) |
 80017e6:	4b07      	ldr	r3, [pc, #28]	; (8001804 <XMC_SCU_CLOCK_SetExternalOutputClockSource+0x28>)
 80017e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017ea:	f023 0203 	bic.w	r2, r3, #3
                      ((uint32_t)source);
 80017ee:	79fb      	ldrb	r3, [r7, #7]
  SCU_CLK->EXTCLKCR = (SCU_CLK->EXTCLKCR & ((uint32_t)~SCU_CLK_EXTCLKCR_ECKSEL_Msk)) |
 80017f0:	4904      	ldr	r1, [pc, #16]	; (8001804 <XMC_SCU_CLOCK_SetExternalOutputClockSource+0x28>)
 80017f2:	4313      	orrs	r3, r2
 80017f4:	628b      	str	r3, [r1, #40]	; 0x28
}
 80017f6:	bf00      	nop
 80017f8:	370c      	adds	r7, #12
 80017fa:	46bd      	mov	sp, r7
 80017fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001800:	4770      	bx	lr
 8001802:	bf00      	nop
 8001804:	50004600 	.word	0x50004600

08001808 <XMC_SCU_CLOCK_SetSystemPllClockSource>:

/* API to select fPLL */
void XMC_SCU_CLOCK_SetSystemPllClockSource(const XMC_SCU_CLOCK_SYSPLLCLKSRC_t source)
{
 8001808:	b480      	push	{r7}
 800180a:	b083      	sub	sp, #12
 800180c:	af00      	add	r7, sp, #0
 800180e:	4603      	mov	r3, r0
 8001810:	80fb      	strh	r3, [r7, #6]
  /* Check input clock */
  if (source == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP) /* Select PLLClockSource */
 8001812:	88fb      	ldrh	r3, [r7, #6]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d108      	bne.n	800182a <XMC_SCU_CLOCK_SetSystemPllClockSource+0x22>
  {
    SCU_PLL->PLLCON2 &= (uint32_t)~(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
 8001818:	4b0b      	ldr	r3, [pc, #44]	; (8001848 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x40>)
 800181a:	68db      	ldr	r3, [r3, #12]
 800181c:	4a0a      	ldr	r2, [pc, #40]	; (8001848 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x40>)
 800181e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001822:	f023 0301 	bic.w	r3, r3, #1
 8001826:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    SCU_PLL->PLLCON2 |= (uint32_t)(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
  }
}
 8001828:	e007      	b.n	800183a <XMC_SCU_CLOCK_SetSystemPllClockSource+0x32>
    SCU_PLL->PLLCON2 |= (uint32_t)(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
 800182a:	4b07      	ldr	r3, [pc, #28]	; (8001848 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x40>)
 800182c:	68db      	ldr	r3, [r3, #12]
 800182e:	4a06      	ldr	r2, [pc, #24]	; (8001848 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x40>)
 8001830:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001834:	f043 0301 	orr.w	r3, r3, #1
 8001838:	60d3      	str	r3, [r2, #12]
}
 800183a:	bf00      	nop
 800183c:	370c      	adds	r7, #12
 800183e:	46bd      	mov	sp, r7
 8001840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001844:	4770      	bx	lr
 8001846:	bf00      	nop
 8001848:	50004710 	.word	0x50004710

0800184c <XMC_SCU_HIB_SetRtcClockSource>:

/* API to select fRTC */
void XMC_SCU_HIB_SetRtcClockSource(const XMC_SCU_HIB_RTCCLKSRC_t source)
{ 
 800184c:	b480      	push	{r7}
 800184e:	b083      	sub	sp, #12
 8001850:	af00      	add	r7, sp, #0
 8001852:	4603      	mov	r3, r0
 8001854:	71fb      	strb	r3, [r7, #7]
  /* Wait until the update of HDCR register in hibernate domain is completed */
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 8001856:	bf00      	nop
 8001858:	4b0a      	ldr	r3, [pc, #40]	; (8001884 <XMC_SCU_HIB_SetRtcClockSource+0x38>)
 800185a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800185e:	f003 0308 	and.w	r3, r3, #8
 8001862:	2b00      	cmp	r3, #0
 8001864:	d1f8      	bne.n	8001858 <XMC_SCU_HIB_SetRtcClockSource+0xc>
  {
  }

  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_RCS_Msk)) |
 8001866:	4b08      	ldr	r3, [pc, #32]	; (8001888 <XMC_SCU_HIB_SetRtcClockSource+0x3c>)
 8001868:	68db      	ldr	r3, [r3, #12]
 800186a:	f023 0240 	bic.w	r2, r3, #64	; 0x40
                        ((uint32_t)source);
 800186e:	79fb      	ldrb	r3, [r7, #7]
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_RCS_Msk)) |
 8001870:	4905      	ldr	r1, [pc, #20]	; (8001888 <XMC_SCU_HIB_SetRtcClockSource+0x3c>)
 8001872:	4313      	orrs	r3, r2
 8001874:	60cb      	str	r3, [r1, #12]
}
 8001876:	bf00      	nop
 8001878:	370c      	adds	r7, #12
 800187a:	46bd      	mov	sp, r7
 800187c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001880:	4770      	bx	lr
 8001882:	bf00      	nop
 8001884:	50004000 	.word	0x50004000
 8001888:	50004300 	.word	0x50004300

0800188c <XMC_SCU_HIB_SetStandbyClockSource>:

/* API to select fSTDBY */
void XMC_SCU_HIB_SetStandbyClockSource(const XMC_SCU_HIB_STDBYCLKSRC_t source)
{
 800188c:	b480      	push	{r7}
 800188e:	b083      	sub	sp, #12
 8001890:	af00      	add	r7, sp, #0
 8001892:	4603      	mov	r3, r0
 8001894:	71fb      	strb	r3, [r7, #7]
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 8001896:	bf00      	nop
 8001898:	4b0a      	ldr	r3, [pc, #40]	; (80018c4 <XMC_SCU_HIB_SetStandbyClockSource+0x38>)
 800189a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800189e:	f003 0308 	and.w	r3, r3, #8
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d1f8      	bne.n	8001898 <XMC_SCU_HIB_SetStandbyClockSource+0xc>
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_STDBYSEL_Msk)) |
 80018a6:	4b08      	ldr	r3, [pc, #32]	; (80018c8 <XMC_SCU_HIB_SetStandbyClockSource+0x3c>)
 80018a8:	68db      	ldr	r3, [r3, #12]
 80018aa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
                        ((uint32_t)source);
 80018ae:	79fb      	ldrb	r3, [r7, #7]
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_STDBYSEL_Msk)) |
 80018b0:	4905      	ldr	r1, [pc, #20]	; (80018c8 <XMC_SCU_HIB_SetStandbyClockSource+0x3c>)
 80018b2:	4313      	orrs	r3, r2
 80018b4:	60cb      	str	r3, [r1, #12]
}
 80018b6:	bf00      	nop
 80018b8:	370c      	adds	r7, #12
 80018ba:	46bd      	mov	sp, r7
 80018bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c0:	4770      	bx	lr
 80018c2:	bf00      	nop
 80018c4:	50004000 	.word	0x50004000
 80018c8:	50004300 	.word	0x50004300

080018cc <XMC_SCU_CLOCK_SetSystemClockDivider>:

/* API to program the divider placed between fsys and its parent */
void XMC_SCU_CLOCK_SetSystemClockDivider(const uint32_t divider)
{
 80018cc:	b480      	push	{r7}
 80018ce:	b083      	sub	sp, #12
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetSystemClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_SYSCLKCR_SYSDIV_Msk + 1UL)) );

  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSDIV_Msk)) |
 80018d4:	4b07      	ldr	r3, [pc, #28]	; (80018f4 <XMC_SCU_CLOCK_SetSystemClockDivider+0x28>)
 80018d6:	68db      	ldr	r3, [r3, #12]
 80018d8:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
                      ((uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_SYSCLKCR_SYSDIV_Pos));
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	3b01      	subs	r3, #1
  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSDIV_Msk)) |
 80018e0:	4904      	ldr	r1, [pc, #16]	; (80018f4 <XMC_SCU_CLOCK_SetSystemClockDivider+0x28>)
 80018e2:	4313      	orrs	r3, r2
 80018e4:	60cb      	str	r3, [r1, #12]
}
 80018e6:	bf00      	nop
 80018e8:	370c      	adds	r7, #12
 80018ea:	46bd      	mov	sp, r7
 80018ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f0:	4770      	bx	lr
 80018f2:	bf00      	nop
 80018f4:	50004600 	.word	0x50004600

080018f8 <XMC_SCU_CLOCK_SetCcuClockDivider>:

/* API to program the divider placed between fccu and its parent */
void XMC_SCU_CLOCK_SetCcuClockDivider(const uint32_t divider)
{
 80018f8:	b480      	push	{r7}
 80018fa:	b083      	sub	sp, #12
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetCapcomClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CCUCLKCR = (SCU_CLK->CCUCLKCR & ((uint32_t)~SCU_CLK_CCUCLKCR_CCUDIV_Msk)) |
 8001900:	4b07      	ldr	r3, [pc, #28]	; (8001920 <XMC_SCU_CLOCK_SetCcuClockDivider+0x28>)
 8001902:	6a1b      	ldr	r3, [r3, #32]
 8001904:	f023 0201 	bic.w	r2, r3, #1
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CCUCLKCR_CCUDIV_Pos);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	3b01      	subs	r3, #1
  SCU_CLK->CCUCLKCR = (SCU_CLK->CCUCLKCR & ((uint32_t)~SCU_CLK_CCUCLKCR_CCUDIV_Msk)) |
 800190c:	4904      	ldr	r1, [pc, #16]	; (8001920 <XMC_SCU_CLOCK_SetCcuClockDivider+0x28>)
 800190e:	4313      	orrs	r3, r2
 8001910:	620b      	str	r3, [r1, #32]
}
 8001912:	bf00      	nop
 8001914:	370c      	adds	r7, #12
 8001916:	46bd      	mov	sp, r7
 8001918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191c:	4770      	bx	lr
 800191e:	bf00      	nop
 8001920:	50004600 	.word	0x50004600

08001924 <XMC_SCU_CLOCK_SetCpuClockDivider>:

/* API to program the divider placed between fcpu and its parent */
void XMC_SCU_CLOCK_SetCpuClockDivider(const uint32_t divider)
{
 8001924:	b480      	push	{r7}
 8001926:	b083      	sub	sp, #12
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetCpuClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CPUCLKCR = (SCU_CLK->CPUCLKCR & ((uint32_t)~SCU_CLK_CPUCLKCR_CPUDIV_Msk)) |
 800192c:	4b07      	ldr	r3, [pc, #28]	; (800194c <XMC_SCU_CLOCK_SetCpuClockDivider+0x28>)
 800192e:	691b      	ldr	r3, [r3, #16]
 8001930:	f023 0201 	bic.w	r2, r3, #1
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CPUCLKCR_CPUDIV_Pos);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	3b01      	subs	r3, #1
  SCU_CLK->CPUCLKCR = (SCU_CLK->CPUCLKCR & ((uint32_t)~SCU_CLK_CPUCLKCR_CPUDIV_Msk)) |
 8001938:	4904      	ldr	r1, [pc, #16]	; (800194c <XMC_SCU_CLOCK_SetCpuClockDivider+0x28>)
 800193a:	4313      	orrs	r3, r2
 800193c:	610b      	str	r3, [r1, #16]
}
 800193e:	bf00      	nop
 8001940:	370c      	adds	r7, #12
 8001942:	46bd      	mov	sp, r7
 8001944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001948:	4770      	bx	lr
 800194a:	bf00      	nop
 800194c:	50004600 	.word	0x50004600

08001950 <XMC_SCU_CLOCK_SetPeripheralClockDivider>:

/* API to program the divider placed between fperiph and its parent */
void XMC_SCU_CLOCK_SetPeripheralClockDivider(const uint32_t divider)
{
 8001950:	b480      	push	{r7}
 8001952:	b083      	sub	sp, #12
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetPeripheralClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->PBCLKCR = (SCU_CLK->PBCLKCR & ((uint32_t)~SCU_CLK_PBCLKCR_PBDIV_Msk)) |
 8001958:	4b07      	ldr	r3, [pc, #28]	; (8001978 <XMC_SCU_CLOCK_SetPeripheralClockDivider+0x28>)
 800195a:	695b      	ldr	r3, [r3, #20]
 800195c:	f023 0201 	bic.w	r2, r3, #1
                     ((uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_PBCLKCR_PBDIV_Pos));
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	3b01      	subs	r3, #1
  SCU_CLK->PBCLKCR = (SCU_CLK->PBCLKCR & ((uint32_t)~SCU_CLK_PBCLKCR_PBDIV_Msk)) |
 8001964:	4904      	ldr	r1, [pc, #16]	; (8001978 <XMC_SCU_CLOCK_SetPeripheralClockDivider+0x28>)
 8001966:	4313      	orrs	r3, r2
 8001968:	614b      	str	r3, [r1, #20]
}
 800196a:	bf00      	nop
 800196c:	370c      	adds	r7, #12
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr
 8001976:	bf00      	nop
 8001978:	50004600 	.word	0x50004600

0800197c <XMC_SCU_CLOCK_SetUsbClockDivider>:

/* API to program the divider placed between fsdmmc and its parent */
void XMC_SCU_CLOCK_SetUsbClockDivider(const uint32_t divider)
{
 800197c:	b480      	push	{r7}
 800197e:	b083      	sub	sp, #12
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetSdmmcClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_USBCLKCR_USBDIV_Msk + 1UL)) );

  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBDIV_Msk)) |
 8001984:	4b07      	ldr	r3, [pc, #28]	; (80019a4 <XMC_SCU_CLOCK_SetUsbClockDivider+0x28>)
 8001986:	699b      	ldr	r3, [r3, #24]
 8001988:	f023 0207 	bic.w	r2, r3, #7
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_USBCLKCR_USBDIV_Pos); 
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	3b01      	subs	r3, #1
  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBDIV_Msk)) |
 8001990:	4904      	ldr	r1, [pc, #16]	; (80019a4 <XMC_SCU_CLOCK_SetUsbClockDivider+0x28>)
 8001992:	4313      	orrs	r3, r2
 8001994:	618b      	str	r3, [r1, #24]
}
 8001996:	bf00      	nop
 8001998:	370c      	adds	r7, #12
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr
 80019a2:	bf00      	nop
 80019a4:	50004600 	.word	0x50004600

080019a8 <XMC_SCU_CLOCK_SetEbuClockDivider>:

#if defined(EBU)
/* API to program the divider placed between febu and its parent */
void XMC_SCU_CLOCK_SetEbuClockDivider(const uint32_t divider)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b083      	sub	sp, #12
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetEbuClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_EBUCLKCR_EBUDIV_Msk + 1UL) ) );

  SCU_CLK->EBUCLKCR = (SCU_CLK->EBUCLKCR & ((uint32_t)~SCU_CLK_EBUCLKCR_EBUDIV_Msk)) |
 80019b0:	4b07      	ldr	r3, [pc, #28]	; (80019d0 <XMC_SCU_CLOCK_SetEbuClockDivider+0x28>)
 80019b2:	69db      	ldr	r3, [r3, #28]
 80019b4:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_EBUCLKCR_EBUDIV_Pos);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	3b01      	subs	r3, #1
  SCU_CLK->EBUCLKCR = (SCU_CLK->EBUCLKCR & ((uint32_t)~SCU_CLK_EBUCLKCR_EBUDIV_Msk)) |
 80019bc:	4904      	ldr	r1, [pc, #16]	; (80019d0 <XMC_SCU_CLOCK_SetEbuClockDivider+0x28>)
 80019be:	4313      	orrs	r3, r2
 80019c0:	61cb      	str	r3, [r1, #28]
}
 80019c2:	bf00      	nop
 80019c4:	370c      	adds	r7, #12
 80019c6:	46bd      	mov	sp, r7
 80019c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019cc:	4770      	bx	lr
 80019ce:	bf00      	nop
 80019d0:	50004600 	.word	0x50004600

080019d4 <XMC_SCU_CLOCK_SetWdtClockDivider>:
#endif

/* API to program the divider placed between fwdt and its parent */
void XMC_SCU_CLOCK_SetWdtClockDivider(const uint32_t divider)
{
 80019d4:	b480      	push	{r7}
 80019d6:	b083      	sub	sp, #12
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetWdtClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_WDTCLKCR_WDTDIV_Msk + 1UL) ) );

  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTDIV_Msk)) |
 80019dc:	4b07      	ldr	r3, [pc, #28]	; (80019fc <XMC_SCU_CLOCK_SetWdtClockDivider+0x28>)
 80019de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019e0:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_WDTCLKCR_WDTDIV_Pos);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	3b01      	subs	r3, #1
  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTDIV_Msk)) |
 80019e8:	4904      	ldr	r1, [pc, #16]	; (80019fc <XMC_SCU_CLOCK_SetWdtClockDivider+0x28>)
 80019ea:	4313      	orrs	r3, r2
 80019ec:	624b      	str	r3, [r1, #36]	; 0x24
}
 80019ee:	bf00      	nop
 80019f0:	370c      	adds	r7, #12
 80019f2:	46bd      	mov	sp, r7
 80019f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f8:	4770      	bx	lr
 80019fa:	bf00      	nop
 80019fc:	50004600 	.word	0x50004600

08001a00 <XMC_SCU_CLOCK_SetExternalOutputClockDivider>:

/* API to program the divider placed between fext and its parent */
void XMC_SCU_CLOCK_SetExternalOutputClockDivider(const uint32_t divider)
{
 8001a00:	b480      	push	{r7}
 8001a02:	b083      	sub	sp, #12
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetExternalOutputClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_EXTCLKCR_ECKDIV_Msk + 1UL) ) );

  SCU_CLK->EXTCLKCR = (SCU_CLK->EXTCLKCR & ((uint32_t)~SCU_CLK_EXTCLKCR_ECKDIV_Msk)) |
 8001a08:	4b08      	ldr	r3, [pc, #32]	; (8001a2c <XMC_SCU_CLOCK_SetExternalOutputClockDivider+0x2c>)
 8001a0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a0c:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8001a10:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_EXTCLKCR_ECKDIV_Pos);
 8001a14:	687a      	ldr	r2, [r7, #4]
 8001a16:	3a01      	subs	r2, #1
 8001a18:	0412      	lsls	r2, r2, #16
  SCU_CLK->EXTCLKCR = (SCU_CLK->EXTCLKCR & ((uint32_t)~SCU_CLK_EXTCLKCR_ECKDIV_Msk)) |
 8001a1a:	4904      	ldr	r1, [pc, #16]	; (8001a2c <XMC_SCU_CLOCK_SetExternalOutputClockDivider+0x2c>)
 8001a1c:	4313      	orrs	r3, r2
 8001a1e:	628b      	str	r3, [r1, #40]	; 0x28
}
 8001a20:	bf00      	nop
 8001a22:	370c      	adds	r7, #12
 8001a24:	46bd      	mov	sp, r7
 8001a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2a:	4770      	bx	lr
 8001a2c:	50004600 	.word	0x50004600

08001a30 <XMC_SCU_CLOCK_EnableClock>:
}
#endif

/* API to enable a given module clock */
void XMC_SCU_CLOCK_EnableClock(const XMC_SCU_CLOCK_t clock)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b083      	sub	sp, #12
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	4603      	mov	r3, r0
 8001a38:	71fb      	strb	r3, [r7, #7]
  SCU_CLK->CLKSET = ((uint32_t)clock);
 8001a3a:	4a04      	ldr	r2, [pc, #16]	; (8001a4c <XMC_SCU_CLOCK_EnableClock+0x1c>)
 8001a3c:	79fb      	ldrb	r3, [r7, #7]
 8001a3e:	6053      	str	r3, [r2, #4]
}
 8001a40:	bf00      	nop
 8001a42:	370c      	adds	r7, #12
 8001a44:	46bd      	mov	sp, r7
 8001a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4a:	4770      	bx	lr
 8001a4c:	50004600 	.word	0x50004600

08001a50 <XMC_SCU_CLOCK_DisableClock>:

/* API to disable a given module clock */
void XMC_SCU_CLOCK_DisableClock(const XMC_SCU_CLOCK_t clock)
{
 8001a50:	b480      	push	{r7}
 8001a52:	b083      	sub	sp, #12
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	4603      	mov	r3, r0
 8001a58:	71fb      	strb	r3, [r7, #7]
  SCU_CLK->CLKCLR = ((uint32_t)clock);
 8001a5a:	4a04      	ldr	r2, [pc, #16]	; (8001a6c <XMC_SCU_CLOCK_DisableClock+0x1c>)
 8001a5c:	79fb      	ldrb	r3, [r7, #7]
 8001a5e:	6093      	str	r3, [r2, #8]
}
 8001a60:	bf00      	nop
 8001a62:	370c      	adds	r7, #12
 8001a64:	46bd      	mov	sp, r7
 8001a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6a:	4770      	bx	lr
 8001a6c:	50004600 	.word	0x50004600

08001a70 <XMC_SCU_CLOCK_IsClockEnabled>:

/* API to determine if module clock of the given peripheral is enabled */
bool XMC_SCU_CLOCK_IsClockEnabled(const XMC_SCU_CLOCK_t clock)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b083      	sub	sp, #12
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	4603      	mov	r3, r0
 8001a78:	71fb      	strb	r3, [r7, #7]
  return (bool)(SCU_CLK->CLKSTAT & ((uint32_t)clock));
 8001a7a:	4b07      	ldr	r3, [pc, #28]	; (8001a98 <XMC_SCU_CLOCK_IsClockEnabled+0x28>)
 8001a7c:	681a      	ldr	r2, [r3, #0]
 8001a7e:	79fb      	ldrb	r3, [r7, #7]
 8001a80:	4013      	ands	r3, r2
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	bf14      	ite	ne
 8001a86:	2301      	movne	r3, #1
 8001a88:	2300      	moveq	r3, #0
 8001a8a:	b2db      	uxtb	r3, r3
}
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	370c      	adds	r7, #12
 8001a90:	46bd      	mov	sp, r7
 8001a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a96:	4770      	bx	lr
 8001a98:	50004600 	.word	0x50004600

08001a9c <XMC_SCU_POWER_GetEVR13Voltage>:
  return ((*(uint32_t *)(&(SCU_CLK->CGATSTAT0) + (index * 3U)) & mask) != 0U);
}
#endif

float XMC_SCU_POWER_GetEVR13Voltage(void)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	af00      	add	r7, sp, #0
  return (SCU_POWER->EVRVADCSTAT & SCU_POWER_EVRVADCSTAT_VADC13V_Msk) * XMC_SCU_POWER_LSB13V;
 8001aa0:	4b08      	ldr	r3, [pc, #32]	; (8001ac4 <XMC_SCU_POWER_GetEVR13Voltage+0x28>)
 8001aa2:	695b      	ldr	r3, [r3, #20]
 8001aa4:	b2db      	uxtb	r3, r3
 8001aa6:	ee07 3a90 	vmov	s15, r3
 8001aaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001aae:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8001ac8 <XMC_SCU_POWER_GetEVR13Voltage+0x2c>
 8001ab2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ab6:	ee17 3a90 	vmov	r3, s15
}
 8001aba:	4618      	mov	r0, r3
 8001abc:	46bd      	mov	sp, r7
 8001abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac2:	4770      	bx	lr
 8001ac4:	50004200 	.word	0x50004200
 8001ac8:	3bbe0ded 	.word	0x3bbe0ded

08001acc <XMC_SCU_POWER_GetEVR33Voltage>:

float XMC_SCU_POWER_GetEVR33Voltage(void)
{
 8001acc:	b480      	push	{r7}
 8001ace:	af00      	add	r7, sp, #0
  return ((SCU_POWER->EVRVADCSTAT & SCU_POWER_EVRVADCSTAT_VADC33V_Msk) >> SCU_POWER_EVRVADCSTAT_VADC33V_Pos) * XMC_SCU_POWER_LSB33V;
 8001ad0:	4b09      	ldr	r3, [pc, #36]	; (8001af8 <XMC_SCU_POWER_GetEVR33Voltage+0x2c>)
 8001ad2:	695b      	ldr	r3, [r3, #20]
 8001ad4:	0a1b      	lsrs	r3, r3, #8
 8001ad6:	b2db      	uxtb	r3, r3
 8001ad8:	ee07 3a90 	vmov	s15, r3
 8001adc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ae0:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8001afc <XMC_SCU_POWER_GetEVR33Voltage+0x30>
 8001ae4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ae8:	ee17 3a90 	vmov	r3, s15
}
 8001aec:	4618      	mov	r0, r3
 8001aee:	46bd      	mov	sp, r7
 8001af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af4:	4770      	bx	lr
 8001af6:	bf00      	nop
 8001af8:	50004200 	.word	0x50004200
 8001afc:	3cb851ec 	.word	0x3cb851ec

08001b00 <XMC_SCU_CLOCK_EnableUsbPll>:

/* API to enable USB PLL for USB clock */
void XMC_SCU_CLOCK_EnableUsbPll(void)
{
 8001b00:	b480      	push	{r7}
 8001b02:	af00      	add	r7, sp, #0
  SCU_PLL->USBPLLCON &= (uint32_t)~(SCU_PLL_USBPLLCON_VCOPWD_Msk | SCU_PLL_USBPLLCON_PLLPWD_Msk);
 8001b04:	4b06      	ldr	r3, [pc, #24]	; (8001b20 <XMC_SCU_CLOCK_EnableUsbPll+0x20>)
 8001b06:	695b      	ldr	r3, [r3, #20]
 8001b08:	4a05      	ldr	r2, [pc, #20]	; (8001b20 <XMC_SCU_CLOCK_EnableUsbPll+0x20>)
 8001b0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b0e:	f023 0302 	bic.w	r3, r3, #2
 8001b12:	6153      	str	r3, [r2, #20]
}
 8001b14:	bf00      	nop
 8001b16:	46bd      	mov	sp, r7
 8001b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1c:	4770      	bx	lr
 8001b1e:	bf00      	nop
 8001b20:	50004710 	.word	0x50004710

08001b24 <XMC_SCU_CLOCK_DisableUsbPll>:

/* API to disable USB PLL for USB clock */
void XMC_SCU_CLOCK_DisableUsbPll(void)
{
 8001b24:	b480      	push	{r7}
 8001b26:	af00      	add	r7, sp, #0
  SCU_PLL->USBPLLCON |= (uint32_t)(SCU_PLL_USBPLLCON_VCOPWD_Msk | SCU_PLL_USBPLLCON_PLLPWD_Msk);
 8001b28:	4b06      	ldr	r3, [pc, #24]	; (8001b44 <XMC_SCU_CLOCK_DisableUsbPll+0x20>)
 8001b2a:	695b      	ldr	r3, [r3, #20]
 8001b2c:	4a05      	ldr	r2, [pc, #20]	; (8001b44 <XMC_SCU_CLOCK_DisableUsbPll+0x20>)
 8001b2e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b32:	f043 0302 	orr.w	r3, r3, #2
 8001b36:	6153      	str	r3, [r2, #20]
}
 8001b38:	bf00      	nop
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b40:	4770      	bx	lr
 8001b42:	bf00      	nop
 8001b44:	50004710 	.word	0x50004710

08001b48 <XMC_SCU_CLOCK_StartUsbPll>:

/* API to configure USB PLL */
void XMC_SCU_CLOCK_StartUsbPll(uint32_t pdiv, uint32_t ndiv)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b083      	sub	sp, #12
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
 8001b50:	6039      	str	r1, [r7, #0]
  /* Go to bypass the USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_VCOBYP_Msk;
 8001b52:	4b1a      	ldr	r3, [pc, #104]	; (8001bbc <XMC_SCU_CLOCK_StartUsbPll+0x74>)
 8001b54:	695b      	ldr	r3, [r3, #20]
 8001b56:	4a19      	ldr	r2, [pc, #100]	; (8001bbc <XMC_SCU_CLOCK_StartUsbPll+0x74>)
 8001b58:	f043 0301 	orr.w	r3, r3, #1
 8001b5c:	6153      	str	r3, [r2, #20]

  /* disconnect Oscillator from USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_FINDIS_Msk;
 8001b5e:	4b17      	ldr	r3, [pc, #92]	; (8001bbc <XMC_SCU_CLOCK_StartUsbPll+0x74>)
 8001b60:	695b      	ldr	r3, [r3, #20]
 8001b62:	4a16      	ldr	r2, [pc, #88]	; (8001bbc <XMC_SCU_CLOCK_StartUsbPll+0x74>)
 8001b64:	f043 0310 	orr.w	r3, r3, #16
 8001b68:	6153      	str	r3, [r2, #20]

  /* Setup Divider settings for USB PLL */
  SCU_PLL->USBPLLCON = (uint32_t)((uint32_t)((ndiv -1U) << SCU_PLL_USBPLLCON_NDIV_Pos) |
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	3b01      	subs	r3, #1
 8001b6e:	021a      	lsls	r2, r3, #8
                       (uint32_t)((pdiv - 1U) << SCU_PLL_USBPLLCON_PDIV_Pos));
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	3b01      	subs	r3, #1
 8001b74:	061b      	lsls	r3, r3, #24
  SCU_PLL->USBPLLCON = (uint32_t)((uint32_t)((ndiv -1U) << SCU_PLL_USBPLLCON_NDIV_Pos) |
 8001b76:	4911      	ldr	r1, [pc, #68]	; (8001bbc <XMC_SCU_CLOCK_StartUsbPll+0x74>)
 8001b78:	4313      	orrs	r3, r2
 8001b7a:	614b      	str	r3, [r1, #20]

  /* Set OSCDISCDIS */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_OSCDISCDIS_Msk;
 8001b7c:	4b0f      	ldr	r3, [pc, #60]	; (8001bbc <XMC_SCU_CLOCK_StartUsbPll+0x74>)
 8001b7e:	695b      	ldr	r3, [r3, #20]
 8001b80:	4a0e      	ldr	r2, [pc, #56]	; (8001bbc <XMC_SCU_CLOCK_StartUsbPll+0x74>)
 8001b82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b86:	6153      	str	r3, [r2, #20]

  /* connect Oscillator to USB PLL */
  SCU_PLL->USBPLLCON &= (uint32_t)~SCU_PLL_USBPLLCON_FINDIS_Msk;
 8001b88:	4b0c      	ldr	r3, [pc, #48]	; (8001bbc <XMC_SCU_CLOCK_StartUsbPll+0x74>)
 8001b8a:	695b      	ldr	r3, [r3, #20]
 8001b8c:	4a0b      	ldr	r2, [pc, #44]	; (8001bbc <XMC_SCU_CLOCK_StartUsbPll+0x74>)
 8001b8e:	f023 0310 	bic.w	r3, r3, #16
 8001b92:	6153      	str	r3, [r2, #20]

  /* restart PLL Lock detection */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_RESLD_Msk;
 8001b94:	4b09      	ldr	r3, [pc, #36]	; (8001bbc <XMC_SCU_CLOCK_StartUsbPll+0x74>)
 8001b96:	695b      	ldr	r3, [r3, #20]
 8001b98:	4a08      	ldr	r2, [pc, #32]	; (8001bbc <XMC_SCU_CLOCK_StartUsbPll+0x74>)
 8001b9a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b9e:	6153      	str	r3, [r2, #20]

  while ((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOLOCK_Msk) == 0U)
 8001ba0:	bf00      	nop
 8001ba2:	4b06      	ldr	r3, [pc, #24]	; (8001bbc <XMC_SCU_CLOCK_StartUsbPll+0x74>)
 8001ba4:	691b      	ldr	r3, [r3, #16]
 8001ba6:	f003 0304 	and.w	r3, r3, #4
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d0f9      	beq.n	8001ba2 <XMC_SCU_CLOCK_StartUsbPll+0x5a>
  {
    /* wait for PLL Lock */
  }

}
 8001bae:	bf00      	nop
 8001bb0:	bf00      	nop
 8001bb2:	370c      	adds	r7, #12
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bba:	4770      	bx	lr
 8001bbc:	50004710 	.word	0x50004710

08001bc0 <XMC_SCU_CLOCK_StopUsbPll>:

/* API to disable USB PLL operation */
void XMC_SCU_CLOCK_StopUsbPll(void)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	af00      	add	r7, sp, #0
  SCU_PLL->USBPLLCON = (uint32_t)(SCU_PLL_USBPLLCON_VCOPWD_Msk | SCU_PLL_USBPLLCON_PLLPWD_Msk |
 8001bc4:	4b03      	ldr	r3, [pc, #12]	; (8001bd4 <XMC_SCU_CLOCK_StopUsbPll+0x14>)
 8001bc6:	4a04      	ldr	r2, [pc, #16]	; (8001bd8 <XMC_SCU_CLOCK_StopUsbPll+0x18>)
 8001bc8:	615a      	str	r2, [r3, #20]
                                  SCU_PLL_USBPLLCON_VCOBYP_Msk);
}
 8001bca:	bf00      	nop
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd2:	4770      	bx	lr
 8001bd4:	50004710 	.word	0x50004710
 8001bd8:	00010003 	.word	0x00010003

08001bdc <XMC_SCU_CLOCK_SetBackupClockCalibrationMode>:

/* API to onfigure the calibration mode for internal oscillator */
void XMC_SCU_CLOCK_SetBackupClockCalibrationMode(XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_t mode)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b082      	sub	sp, #8
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	4603      	mov	r3, r0
 8001be4:	71fb      	strb	r3, [r7, #7]
  /* Enable factory calibration based trimming */
  SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FOTR_Msk;
 8001be6:	4b0f      	ldr	r3, [pc, #60]	; (8001c24 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	4a0e      	ldr	r2, [pc, #56]	; (8001c24 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8001bec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001bf0:	6053      	str	r3, [r2, #4]

  if (mode == XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_AUTOMATIC)
 8001bf2:	79fb      	ldrb	r3, [r7, #7]
 8001bf4:	2b01      	cmp	r3, #1
 8001bf6:	d10e      	bne.n	8001c16 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x3a>
  {
    /* Disable factory calibration based trimming */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_FOTR_Msk;
 8001bf8:	4b0a      	ldr	r3, [pc, #40]	; (8001c24 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	4a09      	ldr	r2, [pc, #36]	; (8001c24 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8001bfe:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001c02:	6053      	str	r3, [r2, #4]
    XMC_SCU_lDelay(100UL);
 8001c04:	2064      	movs	r0, #100	; 0x64
 8001c06:	f7ff f8b9 	bl	8000d7c <XMC_SCU_lDelay>

    /* Enable automatic calibration */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_AOTREN_Msk;
 8001c0a:	4b06      	ldr	r3, [pc, #24]	; (8001c24 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	4a05      	ldr	r2, [pc, #20]	; (8001c24 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8001c10:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001c14:	6053      	str	r3, [r2, #4]
  }

  XMC_SCU_lDelay(100UL);
 8001c16:	2064      	movs	r0, #100	; 0x64
 8001c18:	f7ff f8b0 	bl	8000d7c <XMC_SCU_lDelay>
}
 8001c1c:	bf00      	nop
 8001c1e:	3708      	adds	r7, #8
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}
 8001c24:	50004710 	.word	0x50004710

08001c28 <XMC_SCU_POWER_EnableUsb>:



/* API to enable USB Phy and comparator */
void XMC_SCU_POWER_EnableUsb(void)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	af00      	add	r7, sp, #0
#if defined(USB_OTG_SUPPORTED)
  SCU_POWER->PWRSET = (uint32_t)(SCU_POWER_PWRSET_USBOTGEN_Msk | SCU_POWER_PWRSET_USBPHYPDQ_Msk);
 8001c2c:	4b04      	ldr	r3, [pc, #16]	; (8001c40 <XMC_SCU_POWER_EnableUsb+0x18>)
 8001c2e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001c32:	605a      	str	r2, [r3, #4]
#else
  SCU_POWER->PWRSET = (uint32_t)SCU_POWER_PWRSET_USBPHYPDQ_Msk;
#endif
}
 8001c34:	bf00      	nop
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr
 8001c3e:	bf00      	nop
 8001c40:	50004200 	.word	0x50004200

08001c44 <XMC_SCU_POWER_DisableUsb>:

/* API to power down USB Phy and comparator */
void XMC_SCU_POWER_DisableUsb(void)
{
 8001c44:	b480      	push	{r7}
 8001c46:	af00      	add	r7, sp, #0
#if defined(USB_OTG_SUPPORTED)
  SCU_POWER->PWRCLR = (uint32_t)(SCU_POWER_PWRCLR_USBOTGEN_Msk | SCU_POWER_PWRSET_USBPHYPDQ_Msk);
 8001c48:	4b04      	ldr	r3, [pc, #16]	; (8001c5c <XMC_SCU_POWER_DisableUsb+0x18>)
 8001c4a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001c4e:	609a      	str	r2, [r3, #8]
#else
  SCU_POWER->PWRCLR = (uint32_t)SCU_POWER_PWRCLR_USBPHYPDQ_Msk;
#endif    
}
 8001c50:	bf00      	nop
 8001c52:	46bd      	mov	sp, r7
 8001c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c58:	4770      	bx	lr
 8001c5a:	bf00      	nop
 8001c5c:	50004200 	.word	0x50004200

08001c60 <XMC_SCU_CLOCK_IsUsbPllLocked>:

/* API to check USB PLL is locked or not */
bool XMC_SCU_CLOCK_IsUsbPllLocked(void)
{
 8001c60:	b480      	push	{r7}
 8001c62:	af00      	add	r7, sp, #0
  return (bool)((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOLOCK_Msk) != 0UL);
 8001c64:	4b06      	ldr	r3, [pc, #24]	; (8001c80 <XMC_SCU_CLOCK_IsUsbPllLocked+0x20>)
 8001c66:	691b      	ldr	r3, [r3, #16]
 8001c68:	f003 0304 	and.w	r3, r3, #4
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	bf14      	ite	ne
 8001c70:	2301      	movne	r3, #1
 8001c72:	2300      	moveq	r3, #0
 8001c74:	b2db      	uxtb	r3, r3
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7e:	4770      	bx	lr
 8001c80:	50004710 	.word	0x50004710

08001c84 <XMC_SCU_HIB_EnableHibernateDomain>:

/* API to power up the hibernation domain */
void XMC_SCU_HIB_EnableHibernateDomain(void)
{
 8001c84:	b480      	push	{r7}
 8001c86:	af00      	add	r7, sp, #0
  /* Power up HIB domain if and only if it is currently powered down */
  if((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0UL)
 8001c88:	4b12      	ldr	r3, [pc, #72]	; (8001cd4 <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f003 0301 	and.w	r3, r3, #1
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d109      	bne.n	8001ca8 <XMC_SCU_HIB_EnableHibernateDomain+0x24>
  {
    SCU_POWER->PWRSET = (uint32_t)SCU_POWER_PWRSET_HIB_Msk;
 8001c94:	4b0f      	ldr	r3, [pc, #60]	; (8001cd4 <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 8001c96:	2201      	movs	r2, #1
 8001c98:	605a      	str	r2, [r3, #4]
    
    while((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0UL)
 8001c9a:	bf00      	nop
 8001c9c:	4b0d      	ldr	r3, [pc, #52]	; (8001cd4 <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f003 0301 	and.w	r3, r3, #1
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d0f9      	beq.n	8001c9c <XMC_SCU_HIB_EnableHibernateDomain+0x18>
      /* wait until HIB domain is enabled */
    }    
  }
  
  /* Remove the reset only if HIB domain were in a state of reset */
  if((SCU_RESET->RSTSTAT) & SCU_RESET_RSTSTAT_HIBRS_Msk)
 8001ca8:	4b0b      	ldr	r3, [pc, #44]	; (8001cd8 <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d00a      	beq.n	8001cca <XMC_SCU_HIB_EnableHibernateDomain+0x46>
  {
    SCU_RESET->RSTCLR = (uint32_t)SCU_RESET_RSTCLR_HIBRS_Msk;
 8001cb4:	4b08      	ldr	r3, [pc, #32]	; (8001cd8 <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 8001cb6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001cba:	609a      	str	r2, [r3, #8]
    while((SCU_RESET->RSTSTAT & SCU_RESET_RSTSTAT_HIBRS_Msk) != 0UL)
 8001cbc:	bf00      	nop
 8001cbe:	4b06      	ldr	r3, [pc, #24]	; (8001cd8 <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d1f9      	bne.n	8001cbe <XMC_SCU_HIB_EnableHibernateDomain+0x3a>
    {
      /* wait until HIB domain is enabled */
    }
  }
}
 8001cca:	bf00      	nop
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd2:	4770      	bx	lr
 8001cd4:	50004200 	.word	0x50004200
 8001cd8:	50004400 	.word	0x50004400

08001cdc <XMC_SCU_HIB_DisableHibernateDomain>:

/* API to power down the hibernation domain */
void XMC_SCU_HIB_DisableHibernateDomain(void)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	af00      	add	r7, sp, #0
  /* Disable hibernate domain */   
  SCU_POWER->PWRCLR = (uint32_t)SCU_POWER_PWRCLR_HIB_Msk;
 8001ce0:	4b05      	ldr	r3, [pc, #20]	; (8001cf8 <XMC_SCU_HIB_DisableHibernateDomain+0x1c>)
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	609a      	str	r2, [r3, #8]
  /* Reset of hibernate domain reset */  
  SCU_RESET->RSTSET = (uint32_t)SCU_RESET_RSTSET_HIBRS_Msk;
 8001ce6:	4b05      	ldr	r3, [pc, #20]	; (8001cfc <XMC_SCU_HIB_DisableHibernateDomain+0x20>)
 8001ce8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001cec:	605a      	str	r2, [r3, #4]
}
 8001cee:	bf00      	nop
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf6:	4770      	bx	lr
 8001cf8:	50004200 	.word	0x50004200
 8001cfc:	50004400 	.word	0x50004400

08001d00 <XMC_SCU_HIB_IsHibernateDomainEnabled>:

/* API to check the hibernation domain is enabled or not */
bool XMC_SCU_HIB_IsHibernateDomainEnabled(void)
{
 8001d00:	b480      	push	{r7}
 8001d02:	af00      	add	r7, sp, #0
  return ((bool)(SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) && 
 8001d04:	4b0b      	ldr	r3, [pc, #44]	; (8001d34 <XMC_SCU_HIB_IsHibernateDomainEnabled+0x34>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f003 0301 	and.w	r3, r3, #1
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d007      	beq.n	8001d20 <XMC_SCU_HIB_IsHibernateDomainEnabled+0x20>
          !(bool)(SCU_RESET->RSTSTAT & SCU_RESET_RSTSTAT_HIBRS_Msk));
 8001d10:	4b09      	ldr	r3, [pc, #36]	; (8001d38 <XMC_SCU_HIB_IsHibernateDomainEnabled+0x38>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f403 7300 	and.w	r3, r3, #512	; 0x200
  return ((bool)(SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) && 
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d101      	bne.n	8001d20 <XMC_SCU_HIB_IsHibernateDomainEnabled+0x20>
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	e000      	b.n	8001d22 <XMC_SCU_HIB_IsHibernateDomainEnabled+0x22>
 8001d20:	2300      	movs	r3, #0
 8001d22:	f003 0301 	and.w	r3, r3, #1
 8001d26:	b2db      	uxtb	r3, r3
}
 8001d28:	4618      	mov	r0, r3
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d30:	4770      	bx	lr
 8001d32:	bf00      	nop
 8001d34:	50004200 	.word	0x50004200
 8001d38:	50004400 	.word	0x50004400

08001d3c <XMC_SCU_HIB_EnableInternalSlowClock>:

/* API to enable internal slow clock - fOSI (32.768kHz) in hibernate domain */
void XMC_SCU_HIB_EnableInternalSlowClock(void)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	af00      	add	r7, sp, #0
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_OSCSICTRL_Msk)
 8001d40:	bf00      	nop
 8001d42:	4b09      	ldr	r3, [pc, #36]	; (8001d68 <XMC_SCU_HIB_EnableInternalSlowClock+0x2c>)
 8001d44:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8001d48:	f003 0320 	and.w	r3, r3, #32
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d1f8      	bne.n	8001d42 <XMC_SCU_HIB_EnableInternalSlowClock+0x6>
  {
    /* Wait until OSCSICTRL register in hibernate domain is ready to accept a write */  
  }
  SCU_HIBERNATE->OSCSICTRL &= (uint32_t)~(SCU_HIBERNATE_OSCSICTRL_PWD_Msk);
 8001d50:	4b06      	ldr	r3, [pc, #24]	; (8001d6c <XMC_SCU_HIB_EnableInternalSlowClock+0x30>)
 8001d52:	695b      	ldr	r3, [r3, #20]
 8001d54:	4a05      	ldr	r2, [pc, #20]	; (8001d6c <XMC_SCU_HIB_EnableInternalSlowClock+0x30>)
 8001d56:	f023 0301 	bic.w	r3, r3, #1
 8001d5a:	6153      	str	r3, [r2, #20]
}
 8001d5c:	bf00      	nop
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d64:	4770      	bx	lr
 8001d66:	bf00      	nop
 8001d68:	50004000 	.word	0x50004000
 8001d6c:	50004300 	.word	0x50004300

08001d70 <XMC_SCU_HIB_DisableInternalSlowClock>:

/* API to disable internal slow clock - fOSI (32.768kHz) in hibernate domain */
void XMC_SCU_HIB_DisableInternalSlowClock(void)
{
 8001d70:	b480      	push	{r7}
 8001d72:	af00      	add	r7, sp, #0
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_OSCSICTRL_Msk)
 8001d74:	bf00      	nop
 8001d76:	4b09      	ldr	r3, [pc, #36]	; (8001d9c <XMC_SCU_HIB_DisableInternalSlowClock+0x2c>)
 8001d78:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8001d7c:	f003 0320 	and.w	r3, r3, #32
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d1f8      	bne.n	8001d76 <XMC_SCU_HIB_DisableInternalSlowClock+0x6>
  {
    /* Wait until OSCSICTRL register in hibernate domain is ready to accept a write */  
  }
  SCU_HIBERNATE->OSCSICTRL |= (uint32_t)SCU_HIBERNATE_OSCSICTRL_PWD_Msk;
 8001d84:	4b06      	ldr	r3, [pc, #24]	; (8001da0 <XMC_SCU_HIB_DisableInternalSlowClock+0x30>)
 8001d86:	695b      	ldr	r3, [r3, #20]
 8001d88:	4a05      	ldr	r2, [pc, #20]	; (8001da0 <XMC_SCU_HIB_DisableInternalSlowClock+0x30>)
 8001d8a:	f043 0301 	orr.w	r3, r3, #1
 8001d8e:	6153      	str	r3, [r2, #20]
}
 8001d90:	bf00      	nop
 8001d92:	46bd      	mov	sp, r7
 8001d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d98:	4770      	bx	lr
 8001d9a:	bf00      	nop
 8001d9c:	50004000 	.word	0x50004000
 8001da0:	50004300 	.word	0x50004300

08001da4 <XMC_SCU_HIB_ClearEventStatus>:

void XMC_SCU_HIB_ClearEventStatus(int32_t event)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b083      	sub	sp, #12
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCLR_Msk)
 8001dac:	bf00      	nop
 8001dae:	4b08      	ldr	r3, [pc, #32]	; (8001dd0 <XMC_SCU_HIB_ClearEventStatus+0x2c>)
 8001db0:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8001db4:	f003 0302 	and.w	r3, r3, #2
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d1f8      	bne.n	8001dae <XMC_SCU_HIB_ClearEventStatus+0xa>
  {
    /* Wait until HDCLR register in hibernate domain is ready to accept a write */  
  }
  SCU_HIBERNATE->HDCLR = event;
 8001dbc:	4a05      	ldr	r2, [pc, #20]	; (8001dd4 <XMC_SCU_HIB_ClearEventStatus+0x30>)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6053      	str	r3, [r2, #4]
}
 8001dc2:	bf00      	nop
 8001dc4:	370c      	adds	r7, #12
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dcc:	4770      	bx	lr
 8001dce:	bf00      	nop
 8001dd0:	50004000 	.word	0x50004000
 8001dd4:	50004300 	.word	0x50004300

08001dd8 <XMC_SCU_HIB_TriggerEvent>:

void XMC_SCU_HIB_TriggerEvent(int32_t event)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b083      	sub	sp, #12
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDSET_Msk)
 8001de0:	bf00      	nop
 8001de2:	4b08      	ldr	r3, [pc, #32]	; (8001e04 <XMC_SCU_HIB_TriggerEvent+0x2c>)
 8001de4:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8001de8:	f003 0304 	and.w	r3, r3, #4
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d1f8      	bne.n	8001de2 <XMC_SCU_HIB_TriggerEvent+0xa>
  {
    /* Wait until HDSET register in hibernate domain is ready to accept a write */    
  }
  SCU_HIBERNATE->HDSET = event;
 8001df0:	4a05      	ldr	r2, [pc, #20]	; (8001e08 <XMC_SCU_HIB_TriggerEvent+0x30>)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6093      	str	r3, [r2, #8]
}
 8001df6:	bf00      	nop
 8001df8:	370c      	adds	r7, #12
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e00:	4770      	bx	lr
 8001e02:	bf00      	nop
 8001e04:	50004000 	.word	0x50004000
 8001e08:	50004300 	.word	0x50004300

08001e0c <XMC_SCU_HIB_EnableEvent>:

void XMC_SCU_HIB_EnableEvent(int32_t event)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b083      	sub	sp, #12
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  event = ((event & XMC_SCU_HIB_EVENT_LPAC_HIB_IO_1_POSEDGE) << (SCU_HIBERNATE_HDCR_AHIBIO1HI_Pos - SCU_HIBERNATE_HDSTAT_AHIBIO1PEV_Pos)) | (event & (uint32_t)~XMC_SCU_HIB_EVENT_LPAC_HIB_IO_1_POSEDGE);
  event = ((event & XMC_SCU_HIB_EVENT_LPAC_HIB_IO_1_NEGEDGE) << (SCU_HIBERNATE_HDCR_AHIBIO1LO_Pos - SCU_HIBERNATE_HDSTAT_AHIBIO1NEV_Pos)) | (event & (uint32_t)~XMC_SCU_HIB_EVENT_LPAC_HIB_IO_1_NEGEDGE);
#endif
#endif

  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 8001e14:	bf00      	nop
 8001e16:	4b09      	ldr	r3, [pc, #36]	; (8001e3c <XMC_SCU_HIB_EnableEvent+0x30>)
 8001e18:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8001e1c:	f003 0308 	and.w	r3, r3, #8
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d1f8      	bne.n	8001e16 <XMC_SCU_HIB_EnableEvent+0xa>
  {
    /* Wait until HDCR register in hibernate domain is ready to accept a write */    
  }
  SCU_HIBERNATE->HDCR |= event;
 8001e24:	4b06      	ldr	r3, [pc, #24]	; (8001e40 <XMC_SCU_HIB_EnableEvent+0x34>)
 8001e26:	68da      	ldr	r2, [r3, #12]
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	4905      	ldr	r1, [pc, #20]	; (8001e40 <XMC_SCU_HIB_EnableEvent+0x34>)
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	60cb      	str	r3, [r1, #12]
}
 8001e30:	bf00      	nop
 8001e32:	370c      	adds	r7, #12
 8001e34:	46bd      	mov	sp, r7
 8001e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3a:	4770      	bx	lr
 8001e3c:	50004000 	.word	0x50004000
 8001e40:	50004300 	.word	0x50004300

08001e44 <XMC_SCU_HIB_DisableEvent>:

void XMC_SCU_HIB_DisableEvent(int32_t event)
{
 8001e44:	b480      	push	{r7}
 8001e46:	b083      	sub	sp, #12
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  event = ((event & XMC_SCU_HIB_EVENT_LPAC_HIB_IO_1_POSEDGE) << (SCU_HIBERNATE_HDCR_AHIBIO1HI_Pos - SCU_HIBERNATE_HDSTAT_AHIBIO1PEV_Pos)) | (event & (uint32_t)~XMC_SCU_HIB_EVENT_LPAC_HIB_IO_1_POSEDGE);
  event = ((event & XMC_SCU_HIB_EVENT_LPAC_HIB_IO_1_NEGEDGE) << (SCU_HIBERNATE_HDCR_AHIBIO1LO_Pos - SCU_HIBERNATE_HDSTAT_AHIBIO1NEV_Pos)) | (event & (uint32_t)~XMC_SCU_HIB_EVENT_LPAC_HIB_IO_1_NEGEDGE);
#endif
#endif

  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 8001e4c:	bf00      	nop
 8001e4e:	4b0a      	ldr	r3, [pc, #40]	; (8001e78 <XMC_SCU_HIB_DisableEvent+0x34>)
 8001e50:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8001e54:	f003 0308 	and.w	r3, r3, #8
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d1f8      	bne.n	8001e4e <XMC_SCU_HIB_DisableEvent+0xa>
  {
    /* Wait until HDCR register in hibernate domain is ready to accept a write */    
  }
  SCU_HIBERNATE->HDCR &= ~event;
 8001e5c:	4b07      	ldr	r3, [pc, #28]	; (8001e7c <XMC_SCU_HIB_DisableEvent+0x38>)
 8001e5e:	68db      	ldr	r3, [r3, #12]
 8001e60:	687a      	ldr	r2, [r7, #4]
 8001e62:	43d2      	mvns	r2, r2
 8001e64:	4611      	mov	r1, r2
 8001e66:	4a05      	ldr	r2, [pc, #20]	; (8001e7c <XMC_SCU_HIB_DisableEvent+0x38>)
 8001e68:	400b      	ands	r3, r1
 8001e6a:	60d3      	str	r3, [r2, #12]
}
 8001e6c:	bf00      	nop
 8001e6e:	370c      	adds	r7, #12
 8001e70:	46bd      	mov	sp, r7
 8001e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e76:	4770      	bx	lr
 8001e78:	50004000 	.word	0x50004000
 8001e7c:	50004300 	.word	0x50004300

08001e80 <XMC_SCU_HIB_EnterHibernateState>:

void XMC_SCU_HIB_EnterHibernateState(void) 
{
 8001e80:	b480      	push	{r7}
 8001e82:	af00      	add	r7, sp, #0
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 8001e84:	bf00      	nop
 8001e86:	4b09      	ldr	r3, [pc, #36]	; (8001eac <XMC_SCU_HIB_EnterHibernateState+0x2c>)
 8001e88:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8001e8c:	f003 0308 	and.w	r3, r3, #8
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d1f8      	bne.n	8001e86 <XMC_SCU_HIB_EnterHibernateState+0x6>
  {
    /* Wait until HDCR register in hibernate domain is ready to accept a write */    
  }
  SCU_HIBERNATE->HDCR |= SCU_HIBERNATE_HDCR_HIB_Msk;
 8001e94:	4b06      	ldr	r3, [pc, #24]	; (8001eb0 <XMC_SCU_HIB_EnterHibernateState+0x30>)
 8001e96:	68db      	ldr	r3, [r3, #12]
 8001e98:	4a05      	ldr	r2, [pc, #20]	; (8001eb0 <XMC_SCU_HIB_EnterHibernateState+0x30>)
 8001e9a:	f043 0310 	orr.w	r3, r3, #16
 8001e9e:	60d3      	str	r3, [r2, #12]
}
 8001ea0:	bf00      	nop
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea8:	4770      	bx	lr
 8001eaa:	bf00      	nop
 8001eac:	50004000 	.word	0x50004000
 8001eb0:	50004300 	.word	0x50004300

08001eb4 <XMC_SCU_HIB_EnterHibernateStateEx>:

void XMC_SCU_HIB_EnterHibernateStateEx(XMC_SCU_HIB_HIBERNATE_MODE_t mode)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b082      	sub	sp, #8
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	4603      	mov	r3, r0
 8001ebc:	71fb      	strb	r3, [r7, #7]
  if (mode == XMC_SCU_HIB_HIBERNATE_MODE_EXTERNAL)
 8001ebe:	79fb      	ldrb	r3, [r7, #7]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d101      	bne.n	8001ec8 <XMC_SCU_HIB_EnterHibernateStateEx+0x14>
  {
    XMC_SCU_HIB_EnterHibernateState();
 8001ec4:	f7ff ffdc 	bl	8001e80 <XMC_SCU_HIB_EnterHibernateState>
      /* Wait until HDCR register in hibernate domain is ready to accept a write */
    }
    SCU_HIBERNATE->HINTSET = SCU_HIBERNATE_HINTSET_HIBNINT_Msk;
  }
#endif
}
 8001ec8:	bf00      	nop
 8001eca:	3708      	adds	r7, #8
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bd80      	pop	{r7, pc}

08001ed0 <XMC_SCU_HIB_SetWakeupTriggerInput>:

void XMC_SCU_HIB_SetWakeupTriggerInput(XMC_SCU_HIB_IO_t pin)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b083      	sub	sp, #12
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	71fb      	strb	r3, [r7, #7]
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 8001eda:	bf00      	nop
 8001edc:	4b0e      	ldr	r3, [pc, #56]	; (8001f18 <XMC_SCU_HIB_SetWakeupTriggerInput+0x48>)
 8001ede:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8001ee2:	f003 0308 	and.w	r3, r3, #8
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d1f8      	bne.n	8001edc <XMC_SCU_HIB_SetWakeupTriggerInput+0xc>
  {
    /* Wait until HDCR register in hibernate domain is ready to accept a write */    
  }

  if (pin == XMC_SCU_HIB_IO_0)
 8001eea:	79fb      	ldrb	r3, [r7, #7]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d106      	bne.n	8001efe <XMC_SCU_HIB_SetWakeupTriggerInput+0x2e>
  {
    SCU_HIBERNATE->HDCR |= SCU_HIBERNATE_HDCR_WKUPSEL_Msk;
 8001ef0:	4b0a      	ldr	r3, [pc, #40]	; (8001f1c <XMC_SCU_HIB_SetWakeupTriggerInput+0x4c>)
 8001ef2:	68db      	ldr	r3, [r3, #12]
 8001ef4:	4a09      	ldr	r2, [pc, #36]	; (8001f1c <XMC_SCU_HIB_SetWakeupTriggerInput+0x4c>)
 8001ef6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001efa:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    SCU_HIBERNATE->HDCR &= ~SCU_HIBERNATE_HDCR_WKUPSEL_Msk; 
  }
}
 8001efc:	e005      	b.n	8001f0a <XMC_SCU_HIB_SetWakeupTriggerInput+0x3a>
    SCU_HIBERNATE->HDCR &= ~SCU_HIBERNATE_HDCR_WKUPSEL_Msk; 
 8001efe:	4b07      	ldr	r3, [pc, #28]	; (8001f1c <XMC_SCU_HIB_SetWakeupTriggerInput+0x4c>)
 8001f00:	68db      	ldr	r3, [r3, #12]
 8001f02:	4a06      	ldr	r2, [pc, #24]	; (8001f1c <XMC_SCU_HIB_SetWakeupTriggerInput+0x4c>)
 8001f04:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001f08:	60d3      	str	r3, [r2, #12]
}
 8001f0a:	bf00      	nop
 8001f0c:	370c      	adds	r7, #12
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f14:	4770      	bx	lr
 8001f16:	bf00      	nop
 8001f18:	50004000 	.word	0x50004000
 8001f1c:	50004300 	.word	0x50004300

08001f20 <XMC_SCU_HIB_SetPinMode>:

void XMC_SCU_HIB_SetPinMode(XMC_SCU_HIB_IO_t pin, XMC_SCU_HIB_PIN_MODE_t mode)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b083      	sub	sp, #12
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	4603      	mov	r3, r0
 8001f28:	6039      	str	r1, [r7, #0]
 8001f2a:	71fb      	strb	r3, [r7, #7]
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 8001f2c:	bf00      	nop
 8001f2e:	4b0f      	ldr	r3, [pc, #60]	; (8001f6c <XMC_SCU_HIB_SetPinMode+0x4c>)
 8001f30:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8001f34:	f003 0308 	and.w	r3, r3, #8
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d1f8      	bne.n	8001f2e <XMC_SCU_HIB_SetPinMode+0xe>
  {
    /* Wait until HDCR register in hibernate domain is ready to accept a write */    
  }
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ~(SCU_HIBERNATE_HDCR_HIBIO0SEL_Msk << (SCU_HIBERNATE_HDCR_HIBIOSEL_Size * pin))) |
 8001f3c:	4b0c      	ldr	r3, [pc, #48]	; (8001f70 <XMC_SCU_HIB_SetPinMode+0x50>)
 8001f3e:	68da      	ldr	r2, [r3, #12]
 8001f40:	79fb      	ldrb	r3, [r7, #7]
 8001f42:	009b      	lsls	r3, r3, #2
 8001f44:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 8001f48:	fa01 f303 	lsl.w	r3, r1, r3
 8001f4c:	43db      	mvns	r3, r3
 8001f4e:	401a      	ands	r2, r3
                        (mode << (SCU_HIBERNATE_HDCR_HIBIOSEL_Size * pin));
 8001f50:	79fb      	ldrb	r3, [r7, #7]
 8001f52:	009b      	lsls	r3, r3, #2
 8001f54:	6839      	ldr	r1, [r7, #0]
 8001f56:	fa01 f303 	lsl.w	r3, r1, r3
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ~(SCU_HIBERNATE_HDCR_HIBIO0SEL_Msk << (SCU_HIBERNATE_HDCR_HIBIOSEL_Size * pin))) |
 8001f5a:	4905      	ldr	r1, [pc, #20]	; (8001f70 <XMC_SCU_HIB_SetPinMode+0x50>)
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	60cb      	str	r3, [r1, #12]
}
 8001f60:	bf00      	nop
 8001f62:	370c      	adds	r7, #12
 8001f64:	46bd      	mov	sp, r7
 8001f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6a:	4770      	bx	lr
 8001f6c:	50004000 	.word	0x50004000
 8001f70:	50004300 	.word	0x50004300

08001f74 <XMC_SCU_HIB_SetPinOutputLevel>:

void XMC_SCU_HIB_SetPinOutputLevel(XMC_SCU_HIB_IO_t pin, XMC_SCU_HIB_IO_OUTPUT_LEVEL_t level)
{
 8001f74:	b480      	push	{r7}
 8001f76:	b083      	sub	sp, #12
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	460a      	mov	r2, r1
 8001f7e:	71fb      	strb	r3, [r7, #7]
 8001f80:	4613      	mov	r3, r2
 8001f82:	80bb      	strh	r3, [r7, #4]
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 8001f84:	bf00      	nop
 8001f86:	4b0f      	ldr	r3, [pc, #60]	; (8001fc4 <XMC_SCU_HIB_SetPinOutputLevel+0x50>)
 8001f88:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8001f8c:	f003 0308 	and.w	r3, r3, #8
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d1f8      	bne.n	8001f86 <XMC_SCU_HIB_SetPinOutputLevel+0x12>
  {
    /* Wait until HDCR register in hibernate domain is ready to accept a write */    
  }
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ~(SCU_HIBERNATE_HDCR_HIBIO0POL_Msk << pin)) |
 8001f94:	4b0c      	ldr	r3, [pc, #48]	; (8001fc8 <XMC_SCU_HIB_SetPinOutputLevel+0x54>)
 8001f96:	68da      	ldr	r2, [r3, #12]
 8001f98:	79fb      	ldrb	r3, [r7, #7]
 8001f9a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f9e:	fa01 f303 	lsl.w	r3, r1, r3
 8001fa2:	43db      	mvns	r3, r3
 8001fa4:	4013      	ands	r3, r2
                        (level << pin);
 8001fa6:	88b9      	ldrh	r1, [r7, #4]
 8001fa8:	79fa      	ldrb	r2, [r7, #7]
 8001faa:	fa01 f202 	lsl.w	r2, r1, r2
 8001fae:	4611      	mov	r1, r2
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ~(SCU_HIBERNATE_HDCR_HIBIO0POL_Msk << pin)) |
 8001fb0:	4a05      	ldr	r2, [pc, #20]	; (8001fc8 <XMC_SCU_HIB_SetPinOutputLevel+0x54>)
 8001fb2:	430b      	orrs	r3, r1
 8001fb4:	60d3      	str	r3, [r2, #12]
}
 8001fb6:	bf00      	nop
 8001fb8:	370c      	adds	r7, #12
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc0:	4770      	bx	lr
 8001fc2:	bf00      	nop
 8001fc4:	50004000 	.word	0x50004000
 8001fc8:	50004300 	.word	0x50004300

08001fcc <XMC_SCU_HIB_SetInput0>:

void XMC_SCU_HIB_SetInput0(XMC_SCU_HIB_IO_t pin)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b083      	sub	sp, #12
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	71fb      	strb	r3, [r7, #7]
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 8001fd6:	bf00      	nop
 8001fd8:	4b0e      	ldr	r3, [pc, #56]	; (8002014 <XMC_SCU_HIB_SetInput0+0x48>)
 8001fda:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8001fde:	f003 0308 	and.w	r3, r3, #8
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d1f8      	bne.n	8001fd8 <XMC_SCU_HIB_SetInput0+0xc>
  {
    /* Wait until HDCR register in hibernate domain is ready to accept a write */    
  }

  if (pin == XMC_SCU_HIB_IO_0)
 8001fe6:	79fb      	ldrb	r3, [r7, #7]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d106      	bne.n	8001ffa <XMC_SCU_HIB_SetInput0+0x2e>
  {
    SCU_HIBERNATE->HDCR |= SCU_HIBERNATE_HDCR_GPI0SEL_Msk;
 8001fec:	4b0a      	ldr	r3, [pc, #40]	; (8002018 <XMC_SCU_HIB_SetInput0+0x4c>)
 8001fee:	68db      	ldr	r3, [r3, #12]
 8001ff0:	4a09      	ldr	r2, [pc, #36]	; (8002018 <XMC_SCU_HIB_SetInput0+0x4c>)
 8001ff2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ff6:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    SCU_HIBERNATE->HDCR &= ~SCU_HIBERNATE_HDCR_GPI0SEL_Msk; 
  }
}
 8001ff8:	e005      	b.n	8002006 <XMC_SCU_HIB_SetInput0+0x3a>
    SCU_HIBERNATE->HDCR &= ~SCU_HIBERNATE_HDCR_GPI0SEL_Msk; 
 8001ffa:	4b07      	ldr	r3, [pc, #28]	; (8002018 <XMC_SCU_HIB_SetInput0+0x4c>)
 8001ffc:	68db      	ldr	r3, [r3, #12]
 8001ffe:	4a06      	ldr	r2, [pc, #24]	; (8002018 <XMC_SCU_HIB_SetInput0+0x4c>)
 8002000:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002004:	60d3      	str	r3, [r2, #12]
}
 8002006:	bf00      	nop
 8002008:	370c      	adds	r7, #12
 800200a:	46bd      	mov	sp, r7
 800200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002010:	4770      	bx	lr
 8002012:	bf00      	nop
 8002014:	50004000 	.word	0x50004000
 8002018:	50004300 	.word	0x50004300

0800201c <XMC_SCU_HIB_SetSR0Input>:

void XMC_SCU_HIB_SetSR0Input(XMC_SCU_HIB_SR0_INPUT_t input)
{
 800201c:	b480      	push	{r7}
 800201e:	b083      	sub	sp, #12
 8002020:	af00      	add	r7, sp, #0
 8002022:	4603      	mov	r3, r0
 8002024:	80fb      	strh	r3, [r7, #6]
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 8002026:	bf00      	nop
 8002028:	4b0a      	ldr	r3, [pc, #40]	; (8002054 <XMC_SCU_HIB_SetSR0Input+0x38>)
 800202a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800202e:	f003 0308 	and.w	r3, r3, #8
 8002032:	2b00      	cmp	r3, #0
 8002034:	d1f8      	bne.n	8002028 <XMC_SCU_HIB_SetSR0Input+0xc>
    /* Wait until HDCR register in hibernate domain is ready to accept a write */
  }
#if ((UC_SERIES == XMC44) || (UC_SERIES == XMC42) || (UC_SERIES == XMC41))
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & (uint32_t)~(SCU_HIBERNATE_HDCR_GPI0SEL_Msk | SCU_HIBERNATE_HDCR_ADIG0SEL_Msk)) | 
#else
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & (uint32_t)~(SCU_HIBERNATE_HDCR_GPI0SEL_Msk)) | 
 8002036:	4b08      	ldr	r3, [pc, #32]	; (8002058 <XMC_SCU_HIB_SetSR0Input+0x3c>)
 8002038:	68db      	ldr	r3, [r3, #12]
 800203a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800203e:	88fb      	ldrh	r3, [r7, #6]
 8002040:	4905      	ldr	r1, [pc, #20]	; (8002058 <XMC_SCU_HIB_SetSR0Input+0x3c>)
 8002042:	4313      	orrs	r3, r2
 8002044:	60cb      	str	r3, [r1, #12]
#endif  
                        input;
}
 8002046:	bf00      	nop
 8002048:	370c      	adds	r7, #12
 800204a:	46bd      	mov	sp, r7
 800204c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002050:	4770      	bx	lr
 8002052:	bf00      	nop
 8002054:	50004000 	.word	0x50004000
 8002058:	50004300 	.word	0x50004300

0800205c <XMC_SCU_CLOCK_IsLowPowerOscillatorStable>:
}

#endif

bool XMC_SCU_CLOCK_IsLowPowerOscillatorStable(void)
{
 800205c:	b480      	push	{r7}
 800205e:	af00      	add	r7, sp, #0
  return ((SCU_HIBERNATE->HDSTAT & SCU_HIBERNATE_HDSTAT_ULPWDG_Msk) == 0UL);
 8002060:	4b06      	ldr	r3, [pc, #24]	; (800207c <XMC_SCU_CLOCK_IsLowPowerOscillatorStable+0x20>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f003 0308 	and.w	r3, r3, #8
 8002068:	2b00      	cmp	r3, #0
 800206a:	bf0c      	ite	eq
 800206c:	2301      	moveq	r3, #1
 800206e:	2300      	movne	r3, #0
 8002070:	b2db      	uxtb	r3, r3
}
 8002072:	4618      	mov	r0, r3
 8002074:	46bd      	mov	sp, r7
 8002076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207a:	4770      	bx	lr
 800207c:	50004300 	.word	0x50004300

08002080 <XMC_SCU_CLOCK_EnableLowPowerOscillator>:

/* API to configure the 32khz Ultra Low Power oscillator */
void XMC_SCU_CLOCK_EnableLowPowerOscillator(void)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	af00      	add	r7, sp, #0
  /* Enable OSC_ULP */
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_OSCULCTRL_Msk)
 8002084:	bf00      	nop
 8002086:	4b17      	ldr	r3, [pc, #92]	; (80020e4 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x64>)
 8002088:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800208c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002090:	2b00      	cmp	r3, #0
 8002092:	d1f8      	bne.n	8002086 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6>
  {
    /* Wait until no pending update to OSCULCTRL register in hibernate domain */
  }
  SCU_HIBERNATE->OSCULCTRL &= ~SCU_HIBERNATE_OSCULCTRL_MODE_Msk;
 8002094:	4b14      	ldr	r3, [pc, #80]	; (80020e8 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x68>)
 8002096:	69db      	ldr	r3, [r3, #28]
 8002098:	4a13      	ldr	r2, [pc, #76]	; (80020e8 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x68>)
 800209a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800209e:	61d3      	str	r3, [r2, #28]

  /* Enable OSC_ULP Oscillator Watchdog*/
  while (SCU_GENERAL->MIRRSTS & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 80020a0:	bf00      	nop
 80020a2:	4b10      	ldr	r3, [pc, #64]	; (80020e4 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x64>)
 80020a4:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80020a8:	f003 0308 	and.w	r3, r3, #8
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d1f8      	bne.n	80020a2 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x22>
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDCR |= (uint32_t)SCU_HIBERNATE_HDCR_ULPWDGEN_Msk;
 80020b0:	4b0d      	ldr	r3, [pc, #52]	; (80020e8 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x68>)
 80020b2:	68db      	ldr	r3, [r3, #12]
 80020b4:	4a0c      	ldr	r2, [pc, #48]	; (80020e8 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x68>)
 80020b6:	f043 0308 	orr.w	r3, r3, #8
 80020ba:	60d3      	str	r3, [r2, #12]

  /* Enable OSC_ULP Oscillator Watchdog*/
  while (SCU_GENERAL->MIRRSTS & SCU_GENERAL_MIRRSTS_HDSET_Msk)
 80020bc:	bf00      	nop
 80020be:	4b09      	ldr	r3, [pc, #36]	; (80020e4 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x64>)
 80020c0:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80020c4:	f003 0304 	and.w	r3, r3, #4
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d1f8      	bne.n	80020be <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x3e>
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDSET = (uint32_t)SCU_HIBERNATE_HDSET_ULPWDG_Msk;
 80020cc:	4b06      	ldr	r3, [pc, #24]	; (80020e8 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x68>)
 80020ce:	2208      	movs	r2, #8
 80020d0:	609a      	str	r2, [r3, #8]

  while (XMC_SCU_GetMirrorStatus() != 0)
 80020d2:	bf00      	nop
 80020d4:	f7fe fe46 	bl	8000d64 <XMC_SCU_GetMirrorStatus>
 80020d8:	4603      	mov	r3, r0
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d1fa      	bne.n	80020d4 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x54>
  {
    /* Wait until update of the stanby clock source is done in the HIB domain */    
  }
}
 80020de:	bf00      	nop
 80020e0:	bf00      	nop
 80020e2:	bd80      	pop	{r7, pc}
 80020e4:	50004000 	.word	0x50004000
 80020e8:	50004300 	.word	0x50004300

080020ec <XMC_SCU_CLOCK_DisableLowPowerOscillator>:

/* API to configure the 32khz Ultra Low Power oscillator */
void XMC_SCU_CLOCK_DisableLowPowerOscillator(void)
{
 80020ec:	b480      	push	{r7}
 80020ee:	af00      	add	r7, sp, #0
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_OSCULCTRL_Msk)
 80020f0:	bf00      	nop
 80020f2:	4b09      	ldr	r3, [pc, #36]	; (8002118 <XMC_SCU_CLOCK_DisableLowPowerOscillator+0x2c>)
 80020f4:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80020f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d1f8      	bne.n	80020f2 <XMC_SCU_CLOCK_DisableLowPowerOscillator+0x6>
  {
    /* Wait until OSCULCTRL register in hibernate domain is ready to accept a write */    
  }
  SCU_HIBERNATE->OSCULCTRL |= (uint32_t)SCU_HIBERNATE_OSCULCTRL_MODE_Msk;
 8002100:	4b06      	ldr	r3, [pc, #24]	; (800211c <XMC_SCU_CLOCK_DisableLowPowerOscillator+0x30>)
 8002102:	69db      	ldr	r3, [r3, #28]
 8002104:	4a05      	ldr	r2, [pc, #20]	; (800211c <XMC_SCU_CLOCK_DisableLowPowerOscillator+0x30>)
 8002106:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800210a:	61d3      	str	r3, [r2, #28]
}
 800210c:	bf00      	nop
 800210e:	46bd      	mov	sp, r7
 8002110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002114:	4770      	bx	lr
 8002116:	bf00      	nop
 8002118:	50004000 	.word	0x50004000
 800211c:	50004300 	.word	0x50004300

08002120 <XMC_SCU_CLOCK_EnableLowPowerOscillatorGeneralPurposeInput>:

void XMC_SCU_CLOCK_EnableLowPowerOscillatorGeneralPurposeInput(void)
{
 8002120:	b480      	push	{r7}
 8002122:	af00      	add	r7, sp, #0
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_OSCULCTRL_Msk)
 8002124:	bf00      	nop
 8002126:	4b09      	ldr	r3, [pc, #36]	; (800214c <XMC_SCU_CLOCK_EnableLowPowerOscillatorGeneralPurposeInput+0x2c>)
 8002128:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800212c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002130:	2b00      	cmp	r3, #0
 8002132:	d1f8      	bne.n	8002126 <XMC_SCU_CLOCK_EnableLowPowerOscillatorGeneralPurposeInput+0x6>
  {
    /* Wait until OSCULCTRL register in hibernate domain is ready to accept a write */    
  }
  SCU_HIBERNATE->OSCULCTRL |= SCU_HIBERNATE_OSCULCTRL_X1DEN_Msk | SCU_HIBERNATE_OSCULCTRL_MODE_Msk;
 8002134:	4b06      	ldr	r3, [pc, #24]	; (8002150 <XMC_SCU_CLOCK_EnableLowPowerOscillatorGeneralPurposeInput+0x30>)
 8002136:	69db      	ldr	r3, [r3, #28]
 8002138:	4a05      	ldr	r2, [pc, #20]	; (8002150 <XMC_SCU_CLOCK_EnableLowPowerOscillatorGeneralPurposeInput+0x30>)
 800213a:	f043 0331 	orr.w	r3, r3, #49	; 0x31
 800213e:	61d3      	str	r3, [r2, #28]
}
 8002140:	bf00      	nop
 8002142:	46bd      	mov	sp, r7
 8002144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002148:	4770      	bx	lr
 800214a:	bf00      	nop
 800214c:	50004000 	.word	0x50004000
 8002150:	50004300 	.word	0x50004300

08002154 <XMC_SCU_CLOCK_DisableLowPowerOscillatorGeneralPurposeInput>:

void XMC_SCU_CLOCK_DisableLowPowerOscillatorGeneralPurposeInput(void)
{
 8002154:	b480      	push	{r7}
 8002156:	af00      	add	r7, sp, #0
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_OSCULCTRL_Msk)
 8002158:	bf00      	nop
 800215a:	4b0a      	ldr	r3, [pc, #40]	; (8002184 <XMC_SCU_CLOCK_DisableLowPowerOscillatorGeneralPurposeInput+0x30>)
 800215c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8002160:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002164:	2b00      	cmp	r3, #0
 8002166:	d1f8      	bne.n	800215a <XMC_SCU_CLOCK_DisableLowPowerOscillatorGeneralPurposeInput+0x6>
  {
    /* Wait until OSCULCTRL register in hibernate domain is ready to accept a write */    
  }
  SCU_HIBERNATE->OSCULCTRL = (SCU_HIBERNATE->OSCULCTRL & ~(uint32_t)(SCU_HIBERNATE_OSCULCTRL_X1DEN_Msk | SCU_HIBERNATE_OSCULCTRL_MODE_Msk)) |
 8002168:	4b07      	ldr	r3, [pc, #28]	; (8002188 <XMC_SCU_CLOCK_DisableLowPowerOscillatorGeneralPurposeInput+0x34>)
 800216a:	69db      	ldr	r3, [r3, #28]
 800216c:	f023 0331 	bic.w	r3, r3, #49	; 0x31
 8002170:	4a05      	ldr	r2, [pc, #20]	; (8002188 <XMC_SCU_CLOCK_DisableLowPowerOscillatorGeneralPurposeInput+0x34>)
 8002172:	f043 0320 	orr.w	r3, r3, #32
 8002176:	61d3      	str	r3, [r2, #28]
                             (SCU_HIBERNATE_OSCULCTRL_MODE_OSC_POWER_DOWN << SCU_HIBERNATE_OSCULCTRL_MODE_Pos);                       
}
 8002178:	bf00      	nop
 800217a:	46bd      	mov	sp, r7
 800217c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002180:	4770      	bx	lr
 8002182:	bf00      	nop
 8002184:	50004000 	.word	0x50004000
 8002188:	50004300 	.word	0x50004300

0800218c <XMC_SCU_CLOCK_GetLowPowerOscillatorGeneralPurposeInputStatus>:

uint32_t XMC_SCU_CLOCK_GetLowPowerOscillatorGeneralPurposeInputStatus(void)
{
 800218c:	b480      	push	{r7}
 800218e:	af00      	add	r7, sp, #0
  return (SCU_HIBERNATE->OSCULSTAT & SCU_HIBERNATE_OSCULSTAT_X1D_Msk);
 8002190:	4b04      	ldr	r3, [pc, #16]	; (80021a4 <XMC_SCU_CLOCK_GetLowPowerOscillatorGeneralPurposeInputStatus+0x18>)
 8002192:	699b      	ldr	r3, [r3, #24]
 8002194:	f003 0301 	and.w	r3, r3, #1
}
 8002198:	4618      	mov	r0, r3
 800219a:	46bd      	mov	sp, r7
 800219c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a0:	4770      	bx	lr
 80021a2:	bf00      	nop
 80021a4:	50004300 	.word	0x50004300

080021a8 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator>:

/* API to enable High Precision High Speed oscillator */
void XMC_SCU_CLOCK_EnableHighPerformanceOscillator(void)
{
 80021a8:	b598      	push	{r3, r4, r7, lr}
 80021aa:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_PLLPWD_Msk;
 80021ac:	4b0f      	ldr	r3, [pc, #60]	; (80021ec <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	4a0e      	ldr	r2, [pc, #56]	; (80021ec <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 80021b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021b6:	6053      	str	r3, [r2, #4]

  SCU_OSC->OSCHPCTRL = (uint32_t)((SCU_OSC->OSCHPCTRL & ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk)) |
 80021b8:	4b0d      	ldr	r3, [pc, #52]	; (80021f0 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x48>)
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	f423 2470 	bic.w	r4, r3, #983040	; 0xf0000
 80021c0:	f024 0430 	bic.w	r4, r4, #48	; 0x30
                                  (((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos));
 80021c4:	f000 fbb4 	bl	8002930 <OSCHP_GetFrequency>
 80021c8:	4603      	mov	r3, r0
 80021ca:	4a0a      	ldr	r2, [pc, #40]	; (80021f4 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x4c>)
 80021cc:	fba2 2303 	umull	r2, r3, r2, r3
 80021d0:	0d1b      	lsrs	r3, r3, #20
 80021d2:	3b01      	subs	r3, #1
 80021d4:	041b      	lsls	r3, r3, #16
  SCU_OSC->OSCHPCTRL = (uint32_t)((SCU_OSC->OSCHPCTRL & ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk)) |
 80021d6:	4a06      	ldr	r2, [pc, #24]	; (80021f0 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x48>)
 80021d8:	4323      	orrs	r3, r4
 80021da:	6053      	str	r3, [r2, #4]

  /* restart OSC Watchdog */
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_OSCRES_Msk;
 80021dc:	4b03      	ldr	r3, [pc, #12]	; (80021ec <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	4a02      	ldr	r2, [pc, #8]	; (80021ec <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 80021e2:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80021e6:	6053      	str	r3, [r2, #4]
}
 80021e8:	bf00      	nop
 80021ea:	bd98      	pop	{r3, r4, r7, pc}
 80021ec:	50004710 	.word	0x50004710
 80021f0:	50004700 	.word	0x50004700
 80021f4:	6b5fca6b 	.word	0x6b5fca6b

080021f8 <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable>:

bool XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable(void)
{
 80021f8:	b480      	push	{r7}
 80021fa:	af00      	add	r7, sp, #0
  return ((SCU_PLL->PLLSTAT & XMC_SCU_PLL_PLLSTAT_OSC_USABLE) == XMC_SCU_PLL_PLLSTAT_OSC_USABLE);
 80021fc:	4b07      	ldr	r3, [pc, #28]	; (800221c <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable+0x24>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f403 7360 	and.w	r3, r3, #896	; 0x380
 8002204:	f5b3 7f60 	cmp.w	r3, #896	; 0x380
 8002208:	bf0c      	ite	eq
 800220a:	2301      	moveq	r3, #1
 800220c:	2300      	movne	r3, #0
 800220e:	b2db      	uxtb	r3, r3
}
 8002210:	4618      	mov	r0, r3
 8002212:	46bd      	mov	sp, r7
 8002214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002218:	4770      	bx	lr
 800221a:	bf00      	nop
 800221c:	50004710 	.word	0x50004710

08002220 <XMC_SCU_CLOCK_DisableHighPerformanceOscillator>:

/* API to disable High Precision High Speed oscillator */
void XMC_SCU_CLOCK_DisableHighPerformanceOscillator(void)
{
 8002220:	b480      	push	{r7}
 8002222:	af00      	add	r7, sp, #0
  SCU_OSC->OSCHPCTRL |= (uint32_t)SCU_OSC_OSCHPCTRL_MODE_Msk;
 8002224:	4b05      	ldr	r3, [pc, #20]	; (800223c <XMC_SCU_CLOCK_DisableHighPerformanceOscillator+0x1c>)
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	4a04      	ldr	r2, [pc, #16]	; (800223c <XMC_SCU_CLOCK_DisableHighPerformanceOscillator+0x1c>)
 800222a:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800222e:	6053      	str	r3, [r2, #4]
}
 8002230:	bf00      	nop
 8002232:	46bd      	mov	sp, r7
 8002234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002238:	4770      	bx	lr
 800223a:	bf00      	nop
 800223c:	50004700 	.word	0x50004700

08002240 <XMC_SCU_CLOCK_EnableHighPerformanceOscillatorGeneralPurposeInput>:

void XMC_SCU_CLOCK_EnableHighPerformanceOscillatorGeneralPurposeInput(void)
{
 8002240:	b480      	push	{r7}
 8002242:	af00      	add	r7, sp, #0
  SCU_OSC->OSCHPCTRL |= SCU_OSC_OSCHPCTRL_X1DEN_Msk;
 8002244:	4b05      	ldr	r3, [pc, #20]	; (800225c <XMC_SCU_CLOCK_EnableHighPerformanceOscillatorGeneralPurposeInput+0x1c>)
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	4a04      	ldr	r2, [pc, #16]	; (800225c <XMC_SCU_CLOCK_EnableHighPerformanceOscillatorGeneralPurposeInput+0x1c>)
 800224a:	f043 0301 	orr.w	r3, r3, #1
 800224e:	6053      	str	r3, [r2, #4]
}
 8002250:	bf00      	nop
 8002252:	46bd      	mov	sp, r7
 8002254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002258:	4770      	bx	lr
 800225a:	bf00      	nop
 800225c:	50004700 	.word	0x50004700

08002260 <XMC_SCU_CLOCK_DisableHighPerformanceOscillatorGeneralPurposeInput>:

void XMC_SCU_CLOCK_DisableHighPerformanceOscillatorGeneralPurposeInput(void)
{
 8002260:	b480      	push	{r7}
 8002262:	af00      	add	r7, sp, #0
  SCU_OSC->OSCHPCTRL &= ~SCU_OSC_OSCHPCTRL_X1DEN_Msk;
 8002264:	4b05      	ldr	r3, [pc, #20]	; (800227c <XMC_SCU_CLOCK_DisableHighPerformanceOscillatorGeneralPurposeInput+0x1c>)
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	4a04      	ldr	r2, [pc, #16]	; (800227c <XMC_SCU_CLOCK_DisableHighPerformanceOscillatorGeneralPurposeInput+0x1c>)
 800226a:	f023 0301 	bic.w	r3, r3, #1
 800226e:	6053      	str	r3, [r2, #4]
}
 8002270:	bf00      	nop
 8002272:	46bd      	mov	sp, r7
 8002274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002278:	4770      	bx	lr
 800227a:	bf00      	nop
 800227c:	50004700 	.word	0x50004700

08002280 <XMC_SCU_CLOCK_GetHighPerformanceOscillatorGeneralPurposeInputStatus>:

uint32_t XMC_SCU_CLOCK_GetHighPerformanceOscillatorGeneralPurposeInputStatus(void)
{
 8002280:	b480      	push	{r7}
 8002282:	af00      	add	r7, sp, #0
  return (SCU_OSC->OSCHPSTAT & SCU_OSC_OSCHPSTAT_X1D_Msk);
 8002284:	4b04      	ldr	r3, [pc, #16]	; (8002298 <XMC_SCU_CLOCK_GetHighPerformanceOscillatorGeneralPurposeInputStatus+0x18>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f003 0301 	and.w	r3, r3, #1
}
 800228c:	4618      	mov	r0, r3
 800228e:	46bd      	mov	sp, r7
 8002290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002294:	4770      	bx	lr
 8002296:	bf00      	nop
 8002298:	50004700 	.word	0x50004700

0800229c <XMC_SCU_CLOCK_EnableSystemPll>:

/* API to enable main PLL */
void XMC_SCU_CLOCK_EnableSystemPll(void)
{
 800229c:	b480      	push	{r7}
 800229e:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 &= (uint32_t)~(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 80022a0:	4b06      	ldr	r3, [pc, #24]	; (80022bc <XMC_SCU_CLOCK_EnableSystemPll+0x20>)
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	4a05      	ldr	r2, [pc, #20]	; (80022bc <XMC_SCU_CLOCK_EnableSystemPll+0x20>)
 80022a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022aa:	f023 0302 	bic.w	r3, r3, #2
 80022ae:	6053      	str	r3, [r2, #4]
}
 80022b0:	bf00      	nop
 80022b2:	46bd      	mov	sp, r7
 80022b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b8:	4770      	bx	lr
 80022ba:	bf00      	nop
 80022bc:	50004710 	.word	0x50004710

080022c0 <XMC_SCU_CLOCK_DisableSystemPll>:

/* API to disable main PLL */
void XMC_SCU_CLOCK_DisableSystemPll(void)
{
 80022c0:	b480      	push	{r7}
 80022c2:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 |= (uint32_t)(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 80022c4:	4b06      	ldr	r3, [pc, #24]	; (80022e0 <XMC_SCU_CLOCK_DisableSystemPll+0x20>)
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	4a05      	ldr	r2, [pc, #20]	; (80022e0 <XMC_SCU_CLOCK_DisableSystemPll+0x20>)
 80022ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022ce:	f043 0302 	orr.w	r3, r3, #2
 80022d2:	6053      	str	r3, [r2, #4]
}
 80022d4:	bf00      	nop
 80022d6:	46bd      	mov	sp, r7
 80022d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022dc:	4770      	bx	lr
 80022de:	bf00      	nop
 80022e0:	50004710 	.word	0x50004710

080022e4 <XMC_SCU_CLOCK_StartSystemPll>:
void XMC_SCU_CLOCK_StartSystemPll(XMC_SCU_CLOCK_SYSPLLCLKSRC_t source,
                                  XMC_SCU_CLOCK_SYSPLL_MODE_t mode,
                                  uint32_t pdiv,
                                  uint32_t ndiv,
                                  uint32_t kdiv)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b086      	sub	sp, #24
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	60ba      	str	r2, [r7, #8]
 80022ec:	607b      	str	r3, [r7, #4]
 80022ee:	4603      	mov	r3, r0
 80022f0:	81fb      	strh	r3, [r7, #14]
 80022f2:	460b      	mov	r3, r1
 80022f4:	737b      	strb	r3, [r7, #13]

  uint32_t vco_frequency; /* Q10.22, max VCO frequency = 520MHz */
  uint32_t kdiv_temp;

  XMC_SCU_CLOCK_SetSystemPllClockSource(source);
 80022f6:	89fb      	ldrh	r3, [r7, #14]
 80022f8:	4618      	mov	r0, r3
 80022fa:	f7ff fa85 	bl	8001808 <XMC_SCU_CLOCK_SetSystemPllClockSource>

  if (mode == XMC_SCU_CLOCK_SYSPLL_MODE_NORMAL)
 80022fe:	7b7b      	ldrb	r3, [r7, #13]
 8002300:	2b01      	cmp	r3, #1
 8002302:	f040 8084 	bne.w	800240e <XMC_SCU_CLOCK_StartSystemPll+0x12a>
  {
    /* Calculate initial step to be close to fOFI */
    if (source == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP)
 8002306:	89fb      	ldrh	r3, [r7, #14]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d109      	bne.n	8002320 <XMC_SCU_CLOCK_StartSystemPll+0x3c>
    {
      vco_frequency = (OSCHP_GetFrequency() / 1000000U) << 22;
 800230c:	f000 fb10 	bl	8002930 <OSCHP_GetFrequency>
 8002310:	4603      	mov	r3, r0
 8002312:	4a4c      	ldr	r2, [pc, #304]	; (8002444 <XMC_SCU_CLOCK_StartSystemPll+0x160>)
 8002314:	fba2 2303 	umull	r2, r3, r2, r3
 8002318:	0c9b      	lsrs	r3, r3, #18
 800231a:	059b      	lsls	r3, r3, #22
 800231c:	617b      	str	r3, [r7, #20]
 800231e:	e002      	b.n	8002326 <XMC_SCU_CLOCK_StartSystemPll+0x42>
    }
    else
    {
      vco_frequency = (OFI_FREQUENCY / 1000000U) << 22;
 8002320:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
 8002324:	617b      	str	r3, [r7, #20]
    }
    vco_frequency = ((vco_frequency * ndiv) / pdiv);
 8002326:	697b      	ldr	r3, [r7, #20]
 8002328:	687a      	ldr	r2, [r7, #4]
 800232a:	fb02 f203 	mul.w	r2, r2, r3
 800232e:	68bb      	ldr	r3, [r7, #8]
 8002330:	fbb2 f3f3 	udiv	r3, r2, r3
 8002334:	617b      	str	r3, [r7, #20]
    kdiv_temp = (vco_frequency / (OFI_FREQUENCY / 1000000U)) >> 22;
 8002336:	697b      	ldr	r3, [r7, #20]
 8002338:	4a43      	ldr	r2, [pc, #268]	; (8002448 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 800233a:	fba2 2303 	umull	r2, r3, r2, r3
 800233e:	091b      	lsrs	r3, r3, #4
 8002340:	0d9b      	lsrs	r3, r3, #22
 8002342:	613b      	str	r3, [r7, #16]

    /* Switch to prescaler mode */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_VCOBYP_Msk;
 8002344:	4b41      	ldr	r3, [pc, #260]	; (800244c <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	4a40      	ldr	r2, [pc, #256]	; (800244c <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 800234a:	f043 0301 	orr.w	r3, r3, #1
 800234e:	6053      	str	r3, [r2, #4]

    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;
 8002350:	4b3e      	ldr	r3, [pc, #248]	; (800244c <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	4a3d      	ldr	r2, [pc, #244]	; (800244c <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 8002356:	f043 0310 	orr.w	r3, r3, #16
 800235a:	6053      	str	r3, [r2, #4]

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
 800235c:	4b3b      	ldr	r3, [pc, #236]	; (800244c <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 800235e:	689a      	ldr	r2, [r3, #8]
 8002360:	4b3b      	ldr	r3, [pc, #236]	; (8002450 <XMC_SCU_CLOCK_StartSystemPll+0x16c>)
 8002362:	4013      	ands	r3, r2
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
 8002364:	687a      	ldr	r2, [r7, #4]
 8002366:	3a01      	subs	r2, #1
 8002368:	0212      	lsls	r2, r2, #8
 800236a:	431a      	orrs	r2, r3
                                   ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
 800236c:	693b      	ldr	r3, [r7, #16]
 800236e:	3b01      	subs	r3, #1
 8002370:	041b      	lsls	r3, r3, #16
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
 8002372:	431a      	orrs	r2, r3
                                   ((pdiv - 1UL)<< SCU_PLL_PLLCON1_PDIV_Pos));
 8002374:	68bb      	ldr	r3, [r7, #8]
 8002376:	3b01      	subs	r3, #1
 8002378:	061b      	lsls	r3, r3, #24
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
 800237a:	4934      	ldr	r1, [pc, #208]	; (800244c <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 800237c:	4313      	orrs	r3, r2
 800237e:	608b      	str	r3, [r1, #8]

    /* Set OSCDISCDIS, OSC clock remains connected to the VCO in case of loss of lock */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_OSCDISCDIS_Msk;
 8002380:	4b32      	ldr	r3, [pc, #200]	; (800244c <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	4a31      	ldr	r2, [pc, #196]	; (800244c <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 8002386:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800238a:	6053      	str	r3, [r2, #4]

    /* connect Oscillator to PLL */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_FINDIS_Msk;
 800238c:	4b2f      	ldr	r3, [pc, #188]	; (800244c <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	4a2e      	ldr	r2, [pc, #184]	; (800244c <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 8002392:	f023 0310 	bic.w	r3, r3, #16
 8002396:	6053      	str	r3, [r2, #4]

    /* restart PLL Lock detection */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_RESLD_Msk;
 8002398:	4b2c      	ldr	r3, [pc, #176]	; (800244c <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	4a2b      	ldr	r2, [pc, #172]	; (800244c <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 800239e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023a2:	6053      	str	r3, [r2, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 80023a4:	bf00      	nop
 80023a6:	4b29      	ldr	r3, [pc, #164]	; (800244c <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f003 0304 	and.w	r3, r3, #4
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d0f9      	beq.n	80023a6 <XMC_SCU_CLOCK_StartSystemPll+0xc2>
    {
      /* wait for PLL Lock */
    }

    /* Switch to normal mode */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_VCOBYP_Msk;
 80023b2:	4b26      	ldr	r3, [pc, #152]	; (800244c <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	4a25      	ldr	r2, [pc, #148]	; (800244c <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 80023b8:	f023 0301 	bic.w	r3, r3, #1
 80023bc:	6053      	str	r3, [r2, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) != 0U)
 80023be:	bf00      	nop
 80023c0:	4b22      	ldr	r3, [pc, #136]	; (800244c <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f003 0301 	and.w	r3, r3, #1
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d1f9      	bne.n	80023c0 <XMC_SCU_CLOCK_StartSystemPll+0xdc>
    {
      /* wait for normal mode */
    }

    /* Ramp up PLL frequency in steps */
    kdiv_temp = (vco_frequency / 60UL) >> 22;
 80023cc:	697b      	ldr	r3, [r7, #20]
 80023ce:	4a21      	ldr	r2, [pc, #132]	; (8002454 <XMC_SCU_CLOCK_StartSystemPll+0x170>)
 80023d0:	fba2 2303 	umull	r2, r3, r2, r3
 80023d4:	095b      	lsrs	r3, r3, #5
 80023d6:	0d9b      	lsrs	r3, r3, #22
 80023d8:	613b      	str	r3, [r7, #16]
    if (kdiv < kdiv_temp)
 80023da:	6a3a      	ldr	r2, [r7, #32]
 80023dc:	693b      	ldr	r3, [r7, #16]
 80023de:	429a      	cmp	r2, r3
 80023e0:	d202      	bcs.n	80023e8 <XMC_SCU_CLOCK_StartSystemPll+0x104>
    {
      XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv_temp);
 80023e2:	6938      	ldr	r0, [r7, #16]
 80023e4:	f000 f84a 	bl	800247c <XMC_SCU_CLOCK_StepSystemPllFrequency>
    }

    kdiv_temp = (vco_frequency / 90UL) >> 22;
 80023e8:	697b      	ldr	r3, [r7, #20]
 80023ea:	085b      	lsrs	r3, r3, #1
 80023ec:	4a1a      	ldr	r2, [pc, #104]	; (8002458 <XMC_SCU_CLOCK_StartSystemPll+0x174>)
 80023ee:	fba2 2303 	umull	r2, r3, r2, r3
 80023f2:	095b      	lsrs	r3, r3, #5
 80023f4:	0d9b      	lsrs	r3, r3, #22
 80023f6:	613b      	str	r3, [r7, #16]
    if (kdiv < kdiv_temp)
 80023f8:	6a3a      	ldr	r2, [r7, #32]
 80023fa:	693b      	ldr	r3, [r7, #16]
 80023fc:	429a      	cmp	r2, r3
 80023fe:	d202      	bcs.n	8002406 <XMC_SCU_CLOCK_StartSystemPll+0x122>
    {
      XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv_temp);
 8002400:	6938      	ldr	r0, [r7, #16]
 8002402:	f000 f83b 	bl	800247c <XMC_SCU_CLOCK_StepSystemPllFrequency>
    }

    XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv);
 8002406:	6a38      	ldr	r0, [r7, #32]
 8002408:	f000 f838 	bl	800247c <XMC_SCU_CLOCK_StepSystemPllFrequency>
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) == 0U)
    {
      /* wait for prescaler mode */
    }
  }
}
 800240c:	e015      	b.n	800243a <XMC_SCU_CLOCK_StartSystemPll+0x156>
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K1DIV_Msk) |
 800240e:	4b0f      	ldr	r3, [pc, #60]	; (800244c <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 8002410:	689b      	ldr	r3, [r3, #8]
 8002412:	f023 027f 	bic.w	r2, r3, #127	; 0x7f
                       ((kdiv -1UL) << SCU_PLL_PLLCON1_K1DIV_Pos));
 8002416:	6a3b      	ldr	r3, [r7, #32]
 8002418:	3b01      	subs	r3, #1
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K1DIV_Msk) |
 800241a:	490c      	ldr	r1, [pc, #48]	; (800244c <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 800241c:	4313      	orrs	r3, r2
 800241e:	608b      	str	r3, [r1, #8]
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_VCOBYP_Msk;
 8002420:	4b0a      	ldr	r3, [pc, #40]	; (800244c <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	4a09      	ldr	r2, [pc, #36]	; (800244c <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 8002426:	f043 0301 	orr.w	r3, r3, #1
 800242a:	6053      	str	r3, [r2, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) == 0U)
 800242c:	bf00      	nop
 800242e:	4b07      	ldr	r3, [pc, #28]	; (800244c <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f003 0301 	and.w	r3, r3, #1
 8002436:	2b00      	cmp	r3, #0
 8002438:	d0f9      	beq.n	800242e <XMC_SCU_CLOCK_StartSystemPll+0x14a>
}
 800243a:	bf00      	nop
 800243c:	3718      	adds	r7, #24
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}
 8002442:	bf00      	nop
 8002444:	431bde83 	.word	0x431bde83
 8002448:	aaaaaaab 	.word	0xaaaaaaab
 800244c:	50004710 	.word	0x50004710
 8002450:	f08080ff 	.word	0xf08080ff
 8002454:	88888889 	.word	0x88888889
 8002458:	b60b60b7 	.word	0xb60b60b7

0800245c <XMC_SCU_CLOCK_StopSystemPll>:

/* API to stop main PLL operation */
void XMC_SCU_CLOCK_StopSystemPll(void)
{
 800245c:	b480      	push	{r7}
 800245e:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_PLLPWD_Msk;
 8002460:	4b05      	ldr	r3, [pc, #20]	; (8002478 <XMC_SCU_CLOCK_StopSystemPll+0x1c>)
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	4a04      	ldr	r2, [pc, #16]	; (8002478 <XMC_SCU_CLOCK_StopSystemPll+0x1c>)
 8002466:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800246a:	6053      	str	r3, [r2, #4]
}
 800246c:	bf00      	nop
 800246e:	46bd      	mov	sp, r7
 8002470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002474:	4770      	bx	lr
 8002476:	bf00      	nop
 8002478:	50004710 	.word	0x50004710

0800247c <XMC_SCU_CLOCK_StepSystemPllFrequency>:

/* API to step up/down the main PLL frequency */
void XMC_SCU_CLOCK_StepSystemPllFrequency(uint32_t kdiv)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b082      	sub	sp, #8
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K2DIV_Msk) |
 8002484:	4b08      	ldr	r3, [pc, #32]	; (80024a8 <XMC_SCU_CLOCK_StepSystemPllFrequency+0x2c>)
 8002486:	689b      	ldr	r3, [r3, #8]
 8002488:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
                     ((kdiv - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos));
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	3b01      	subs	r3, #1
 8002490:	041b      	lsls	r3, r3, #16
  SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K2DIV_Msk) |
 8002492:	4905      	ldr	r1, [pc, #20]	; (80024a8 <XMC_SCU_CLOCK_StepSystemPllFrequency+0x2c>)
 8002494:	4313      	orrs	r3, r2
 8002496:	608b      	str	r3, [r1, #8]

  XMC_SCU_lDelay(50U);
 8002498:	2032      	movs	r0, #50	; 0x32
 800249a:	f7fe fc6f 	bl	8000d7c <XMC_SCU_lDelay>
}
 800249e:	bf00      	nop
 80024a0:	3708      	adds	r7, #8
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}
 80024a6:	bf00      	nop
 80024a8:	50004710 	.word	0x50004710

080024ac <XMC_SCU_CLOCK_IsSystemPllLocked>:

/* API to check main PLL is locked or not */
bool XMC_SCU_CLOCK_IsSystemPllLocked(void)
{
 80024ac:	b480      	push	{r7}
 80024ae:	af00      	add	r7, sp, #0
  return (bool)((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) != 0UL);
 80024b0:	4b06      	ldr	r3, [pc, #24]	; (80024cc <XMC_SCU_CLOCK_IsSystemPllLocked+0x20>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f003 0304 	and.w	r3, r3, #4
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	bf14      	ite	ne
 80024bc:	2301      	movne	r3, #1
 80024be:	2300      	moveq	r3, #0
 80024c0:	b2db      	uxtb	r3, r3
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	46bd      	mov	sp, r7
 80024c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ca:	4770      	bx	lr
 80024cc:	50004710 	.word	0x50004710

080024d0 <XMC_SCU_INTERRUPT_SetEventHandler>:
/*
 * API to assign the event handler function to be executed on occurrence of the selected event.
 */
XMC_SCU_STATUS_t XMC_SCU_INTERRUPT_SetEventHandler(const XMC_SCU_INTERRUPT_EVENT_t event,
                                                   const XMC_SCU_INTERRUPT_EVENT_HANDLER_t handler)
{
 80024d0:	b480      	push	{r7}
 80024d2:	b085      	sub	sp, #20
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
 80024d8:	6039      	str	r1, [r7, #0]
  uint32_t index;
  XMC_SCU_STATUS_t status;
  
  index = 0U;
 80024da:	2300      	movs	r3, #0
 80024dc:	60fb      	str	r3, [r7, #12]
  while (((event & ((XMC_SCU_INTERRUPT_EVENT_t)1 << index)) == 0U) && (index < XMC_SCU_INTERRUPT_EVENT_MAX))
 80024de:	e002      	b.n	80024e6 <XMC_SCU_INTERRUPT_SetEventHandler+0x16>
  {
    index++;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	3301      	adds	r3, #1
 80024e4:	60fb      	str	r3, [r7, #12]
  while (((event & ((XMC_SCU_INTERRUPT_EVENT_t)1 << index)) == 0U) && (index < XMC_SCU_INTERRUPT_EVENT_MAX))
 80024e6:	687a      	ldr	r2, [r7, #4]
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	fa22 f303 	lsr.w	r3, r2, r3
 80024ee:	f003 0301 	and.w	r3, r3, #1
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d102      	bne.n	80024fc <XMC_SCU_INTERRUPT_SetEventHandler+0x2c>
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	2b1f      	cmp	r3, #31
 80024fa:	d9f1      	bls.n	80024e0 <XMC_SCU_INTERRUPT_SetEventHandler+0x10>
  }
  
  if (index == XMC_SCU_INTERRUPT_EVENT_MAX)
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	2b20      	cmp	r3, #32
 8002500:	d102      	bne.n	8002508 <XMC_SCU_INTERRUPT_SetEventHandler+0x38>
  {
    status = XMC_SCU_STATUS_ERROR;
 8002502:	2301      	movs	r3, #1
 8002504:	72fb      	strb	r3, [r7, #11]
 8002506:	e006      	b.n	8002516 <XMC_SCU_INTERRUPT_SetEventHandler+0x46>
  }
  else
  {
    event_handler_list[index] = handler;
 8002508:	4906      	ldr	r1, [pc, #24]	; (8002524 <XMC_SCU_INTERRUPT_SetEventHandler+0x54>)
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	683a      	ldr	r2, [r7, #0]
 800250e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    status = XMC_SCU_STATUS_OK;      
 8002512:	2300      	movs	r3, #0
 8002514:	72fb      	strb	r3, [r7, #11]
  }
  
  return (status);
 8002516:	7afb      	ldrb	r3, [r7, #11]
}
 8002518:	4618      	mov	r0, r3
 800251a:	3714      	adds	r7, #20
 800251c:	46bd      	mov	sp, r7
 800251e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002522:	4770      	bx	lr
 8002524:	20000444 	.word	0x20000444

08002528 <XMC_SCU_IRQHandler>:

/*
 * API to execute callback functions for multiple events.
 */
void XMC_SCU_IRQHandler(uint32_t sr_num)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b086      	sub	sp, #24
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
  XMC_SCU_INTERRUPT_EVENT_t event;
  XMC_SCU_INTERRUPT_EVENT_HANDLER_t event_handler;
  
  XMC_UNUSED_ARG(sr_num);
  
  index = 0U;
 8002530:	2300      	movs	r3, #0
 8002532:	617b      	str	r3, [r7, #20]
  event = XMC_SCU_INTERUPT_GetEventStatus();
 8002534:	f7fe fc7e 	bl	8000e34 <XMC_SCU_INTERUPT_GetEventStatus>
 8002538:	6138      	str	r0, [r7, #16]
  while (index < XMC_SCU_INTERRUPT_EVENT_MAX)
 800253a:	e01c      	b.n	8002576 <XMC_SCU_IRQHandler+0x4e>
  {    
    if ((event & ((XMC_SCU_INTERRUPT_EVENT_t)1 << index)) != 0U)
 800253c:	693a      	ldr	r2, [r7, #16]
 800253e:	697b      	ldr	r3, [r7, #20]
 8002540:	fa22 f303 	lsr.w	r3, r2, r3
 8002544:	f003 0301 	and.w	r3, r3, #1
 8002548:	2b00      	cmp	r3, #0
 800254a:	d011      	beq.n	8002570 <XMC_SCU_IRQHandler+0x48>
    {
      event_handler = event_handler_list[index];
 800254c:	4a0e      	ldr	r2, [pc, #56]	; (8002588 <XMC_SCU_IRQHandler+0x60>)
 800254e:	697b      	ldr	r3, [r7, #20]
 8002550:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002554:	60fb      	str	r3, [r7, #12]
      if (event_handler != NULL)
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d001      	beq.n	8002560 <XMC_SCU_IRQHandler+0x38>
      {
          (event_handler)();
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	4798      	blx	r3
      }
      
      XMC_SCU_INTERRUPT_ClearEventStatus((uint32_t)(1UL << index));
 8002560:	2201      	movs	r2, #1
 8002562:	697b      	ldr	r3, [r7, #20]
 8002564:	fa02 f303 	lsl.w	r3, r2, r3
 8002568:	4618      	mov	r0, r3
 800256a:	f7fe fc6f 	bl	8000e4c <XMC_SCU_INTERRUPT_ClearEventStatus>
      
      break;
 800256e:	e006      	b.n	800257e <XMC_SCU_IRQHandler+0x56>
    }   
    index++;    
 8002570:	697b      	ldr	r3, [r7, #20]
 8002572:	3301      	adds	r3, #1
 8002574:	617b      	str	r3, [r7, #20]
  while (index < XMC_SCU_INTERRUPT_EVENT_MAX)
 8002576:	697b      	ldr	r3, [r7, #20]
 8002578:	2b1f      	cmp	r3, #31
 800257a:	d9df      	bls.n	800253c <XMC_SCU_IRQHandler+0x14>
  }
}
 800257c:	bf00      	nop
 800257e:	bf00      	nop
 8002580:	3718      	adds	r7, #24
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}
 8002586:	bf00      	nop
 8002588:	20000444 	.word	0x20000444

0800258c <delay>:

/*******************************************************************************
 * LOCAL FUNCTIONS
 *******************************************************************************/
static void delay(uint32_t cycles)
{
 800258c:	b480      	push	{r7}
 800258e:	b085      	sub	sp, #20
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  volatile uint32_t i;

  for(i = 0UL; i < cycles ;++i)
 8002594:	2300      	movs	r3, #0
 8002596:	60fb      	str	r3, [r7, #12]
 8002598:	e003      	b.n	80025a2 <delay+0x16>
  {
    __NOP();
 800259a:	bf00      	nop
  for(i = 0UL; i < cycles ;++i)
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	3301      	adds	r3, #1
 80025a0:	60fb      	str	r3, [r7, #12]
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	687a      	ldr	r2, [r7, #4]
 80025a6:	429a      	cmp	r2, r3
 80025a8:	d8f7      	bhi.n	800259a <delay+0xe>
  }
}
 80025aa:	bf00      	nop
 80025ac:	bf00      	nop
 80025ae:	3714      	adds	r7, #20
 80025b0:	46bd      	mov	sp, r7
 80025b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b6:	4770      	bx	lr

080025b8 <SystemInit>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

__WEAK void SystemInit(void)
{
 80025b8:	b598      	push	{r3, r4, r7, lr}
 80025ba:	af00      	add	r7, sp, #0
  memcpy(g_chipid, CHIPID_LOC, 16);
 80025bc:	4a06      	ldr	r2, [pc, #24]	; (80025d8 <SystemInit+0x20>)
 80025be:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80025c2:	4614      	mov	r4, r2
 80025c4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80025c6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  SystemCoreSetup();
 80025ca:	f000 f807 	bl	80025dc <SystemCoreSetup>
  SystemCoreClockSetup(); 
 80025ce:	f000 f841 	bl	8002654 <SystemCoreClockSetup>
}
 80025d2:	bf00      	nop
 80025d4:	bd98      	pop	{r3, r4, r7, pc}
 80025d6:	bf00      	nop
 80025d8:	2000ffc4 	.word	0x2000ffc4

080025dc <SystemCoreSetup>:

__WEAK void SystemCoreSetup(void)
{
 80025dc:	b480      	push	{r7}
 80025de:	b083      	sub	sp, #12
 80025e0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80025e2:	b672      	cpsid	i
}
 80025e4:	bf00      	nop
  uint32_t temp;
	
  /* relocate vector table */
  __disable_irq();
  SCB->VTOR = (uint32_t)(&__Vectors);
 80025e6:	4b18      	ldr	r3, [pc, #96]	; (8002648 <SystemCoreSetup+0x6c>)
 80025e8:	4a18      	ldr	r2, [pc, #96]	; (800264c <SystemCoreSetup+0x70>)
 80025ea:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80025ec:	f3bf 8f4f 	dsb	sy
}
 80025f0:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
 80025f2:	b662      	cpsie	i
}
 80025f4:	bf00      	nop
  __DSB();
  __enable_irq();
    
#if ((__FPU_PRESENT == 1) && (__FPU_USED == 1))
  SCB->CPACR |= ((3UL << 10*2) |                 /* set CP10 Full Access */
 80025f6:	4b14      	ldr	r3, [pc, #80]	; (8002648 <SystemCoreSetup+0x6c>)
 80025f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025fc:	4a12      	ldr	r2, [pc, #72]	; (8002648 <SystemCoreSetup+0x6c>)
 80025fe:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002602:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
                 (3UL << 11*2)  );               /* set CP11 Full Access */
#endif

  /* Enable unaligned memory access - SCB_CCR.UNALIGN_TRP = 0 */
  SCB->CCR &= ~(SCB_CCR_UNALIGN_TRP_Msk);
 8002606:	4b10      	ldr	r3, [pc, #64]	; (8002648 <SystemCoreSetup+0x6c>)
 8002608:	695b      	ldr	r3, [r3, #20]
 800260a:	4a0f      	ldr	r2, [pc, #60]	; (8002648 <SystemCoreSetup+0x6c>)
 800260c:	f023 0308 	bic.w	r3, r3, #8
 8002610:	6153      	str	r3, [r2, #20]

  temp = FLASH0->FCON;
 8002612:	4b0f      	ldr	r3, [pc, #60]	; (8002650 <SystemCoreSetup+0x74>)
 8002614:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002618:	3314      	adds	r3, #20
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	607b      	str	r3, [r7, #4]
  temp &= ~FLASH_FCON_WSPFLASH_Msk;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	f023 030f 	bic.w	r3, r3, #15
 8002624:	607b      	str	r3, [r7, #4]
  temp |= PMU_FLASH_WS;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	f043 0303 	orr.w	r3, r3, #3
 800262c:	607b      	str	r3, [r7, #4]
  FLASH0->FCON = temp;
 800262e:	4b08      	ldr	r3, [pc, #32]	; (8002650 <SystemCoreSetup+0x74>)
 8002630:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002634:	3314      	adds	r3, #20
 8002636:	687a      	ldr	r2, [r7, #4]
 8002638:	601a      	str	r2, [r3, #0]
}
 800263a:	bf00      	nop
 800263c:	370c      	adds	r7, #12
 800263e:	46bd      	mov	sp, r7
 8002640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002644:	4770      	bx	lr
 8002646:	bf00      	nop
 8002648:	e000ed00 	.word	0xe000ed00
 800264c:	08000000 	.word	0x08000000
 8002650:	58001000 	.word	0x58001000

08002654 <SystemCoreClockSetup>:

__WEAK void SystemCoreClockSetup(void)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	af00      	add	r7, sp, #0
#else
  /* Automatic calibration uses the fSTDBY */

  /* Enable HIB domain */
  /* Power up HIB domain if and only if it is currently powered down */
  if((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0)
 8002658:	4b75      	ldr	r3, [pc, #468]	; (8002830 <SystemCoreClockSetup+0x1dc>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f003 0301 	and.w	r3, r3, #1
 8002660:	2b00      	cmp	r3, #0
 8002662:	d10c      	bne.n	800267e <SystemCoreClockSetup+0x2a>
  {
    SCU_POWER->PWRSET |= SCU_POWER_PWRSET_HIB_Msk;
 8002664:	4b72      	ldr	r3, [pc, #456]	; (8002830 <SystemCoreClockSetup+0x1dc>)
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	4a71      	ldr	r2, [pc, #452]	; (8002830 <SystemCoreClockSetup+0x1dc>)
 800266a:	f043 0301 	orr.w	r3, r3, #1
 800266e:	6053      	str	r3, [r2, #4]

    while((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0)
 8002670:	bf00      	nop
 8002672:	4b6f      	ldr	r3, [pc, #444]	; (8002830 <SystemCoreClockSetup+0x1dc>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f003 0301 	and.w	r3, r3, #1
 800267a:	2b00      	cmp	r3, #0
 800267c:	d0f9      	beq.n	8002672 <SystemCoreClockSetup+0x1e>
      /* wait until HIB domain is enabled */
    }
  }

  /* Remove the reset only if HIB domain were in a state of reset */
  if((SCU_RESET->RSTSTAT) & SCU_RESET_RSTSTAT_HIBRS_Msk)
 800267e:	4b6d      	ldr	r3, [pc, #436]	; (8002834 <SystemCoreClockSetup+0x1e0>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002686:	2b00      	cmp	r3, #0
 8002688:	d009      	beq.n	800269e <SystemCoreClockSetup+0x4a>
  {
    SCU_RESET->RSTCLR |= SCU_RESET_RSTCLR_HIBRS_Msk;
 800268a:	4b6a      	ldr	r3, [pc, #424]	; (8002834 <SystemCoreClockSetup+0x1e0>)
 800268c:	689b      	ldr	r3, [r3, #8]
 800268e:	4a69      	ldr	r2, [pc, #420]	; (8002834 <SystemCoreClockSetup+0x1e0>)
 8002690:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002694:	6093      	str	r3, [r2, #8]
    delay(DELAY_CNT_150US_50MHZ);
 8002696:	f641 504c 	movw	r0, #7500	; 0x1d4c
 800269a:	f7ff ff77 	bl	800258c <delay>
  SCU_HIBERNATE->HDCR |= SCU_HIBERNATE_HDCR_RCS_Msk | SCU_HIBERNATE_HDCR_STDBYSEL_Msk;

#endif /* STDBY_CLOCK_SRC == STDBY_CLOCK_SRC_OSCULP */

  /* Enable automatic calibration of internal fast oscillator */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_AOTREN_Msk;
 800269e:	4b66      	ldr	r3, [pc, #408]	; (8002838 <SystemCoreClockSetup+0x1e4>)
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	4a65      	ldr	r2, [pc, #404]	; (8002838 <SystemCoreClockSetup+0x1e4>)
 80026a4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80026a8:	6053      	str	r3, [r2, #4]
#endif /* FOFI_CALIBRATION_MODE == FOFI_CALIBRATION_MODE_AUTOMATIC */

  delay(DELAY_CNT_50US_50MHZ);
 80026aa:	f640 10c4 	movw	r0, #2500	; 0x9c4
 80026ae:	f7ff ff6d 	bl	800258c <delay>

#if ENABLE_PLL

  /* enable PLL */
  SCU_PLL->PLLCON0 &= ~(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 80026b2:	4b61      	ldr	r3, [pc, #388]	; (8002838 <SystemCoreClockSetup+0x1e4>)
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	4a60      	ldr	r2, [pc, #384]	; (8002838 <SystemCoreClockSetup+0x1e4>)
 80026b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026bc:	f023 0302 	bic.w	r3, r3, #2
 80026c0:	6053      	str	r3, [r2, #4]

#if PLL_CLOCK_SRC != PLL_CLOCK_SRC_OFI
  /* enable OSC_HP */
  if ((SCU_OSC->OSCHPCTRL & SCU_OSC_OSCHPCTRL_MODE_Msk) != 0U)
 80026c2:	4b5e      	ldr	r3, [pc, #376]	; (800283c <SystemCoreClockSetup+0x1e8>)
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d029      	beq.n	8002722 <SystemCoreClockSetup+0xce>
  {
    SCU_OSC->OSCHPCTRL &= ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk);
 80026ce:	4b5b      	ldr	r3, [pc, #364]	; (800283c <SystemCoreClockSetup+0x1e8>)
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	4a5a      	ldr	r2, [pc, #360]	; (800283c <SystemCoreClockSetup+0x1e8>)
 80026d4:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 80026d8:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80026dc:	6053      	str	r3, [r2, #4]
    SCU_OSC->OSCHPCTRL |= ((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos;
 80026de:	f000 f927 	bl	8002930 <OSCHP_GetFrequency>
 80026e2:	4603      	mov	r3, r0
 80026e4:	4a56      	ldr	r2, [pc, #344]	; (8002840 <SystemCoreClockSetup+0x1ec>)
 80026e6:	fba2 2303 	umull	r2, r3, r2, r3
 80026ea:	0d1b      	lsrs	r3, r3, #20
 80026ec:	3b01      	subs	r3, #1
 80026ee:	041a      	lsls	r2, r3, #16
 80026f0:	4b52      	ldr	r3, [pc, #328]	; (800283c <SystemCoreClockSetup+0x1e8>)
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	4951      	ldr	r1, [pc, #324]	; (800283c <SystemCoreClockSetup+0x1e8>)
 80026f6:	4313      	orrs	r3, r2
 80026f8:	604b      	str	r3, [r1, #4]

    /* select OSC_HP clock as PLL input */
    SCU_PLL->PLLCON2 &= ~SCU_PLL_PLLCON2_PINSEL_Msk;
 80026fa:	4b4f      	ldr	r3, [pc, #316]	; (8002838 <SystemCoreClockSetup+0x1e4>)
 80026fc:	68db      	ldr	r3, [r3, #12]
 80026fe:	4a4e      	ldr	r2, [pc, #312]	; (8002838 <SystemCoreClockSetup+0x1e4>)
 8002700:	f023 0301 	bic.w	r3, r3, #1
 8002704:	60d3      	str	r3, [r2, #12]

    /* restart OSC Watchdog */
    SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_OSCRES_Msk;
 8002706:	4b4c      	ldr	r3, [pc, #304]	; (8002838 <SystemCoreClockSetup+0x1e4>)
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	4a4b      	ldr	r2, [pc, #300]	; (8002838 <SystemCoreClockSetup+0x1e4>)
 800270c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8002710:	6053      	str	r3, [r2, #4]

    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_OSC_USABLE) != SCU_PLL_PLLSTAT_OSC_USABLE)
 8002712:	bf00      	nop
 8002714:	4b48      	ldr	r3, [pc, #288]	; (8002838 <SystemCoreClockSetup+0x1e4>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f403 7360 	and.w	r3, r3, #896	; 0x380
 800271c:	f5b3 7f60 	cmp.w	r3, #896	; 0x380
 8002720:	d1f8      	bne.n	8002714 <SystemCoreClockSetup+0xc0>
  /* select backup clock as PLL input */
  SCU_PLL->PLLCON2 |= SCU_PLL_PLLCON2_PINSEL_Msk;
#endif

  /* Go to bypass the Main PLL */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_VCOBYP_Msk;
 8002722:	4b45      	ldr	r3, [pc, #276]	; (8002838 <SystemCoreClockSetup+0x1e4>)
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	4a44      	ldr	r2, [pc, #272]	; (8002838 <SystemCoreClockSetup+0x1e4>)
 8002728:	f043 0301 	orr.w	r3, r3, #1
 800272c:	6053      	str	r3, [r2, #4]

  /* disconnect Oscillator from PLL */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_FINDIS_Msk;
 800272e:	4b42      	ldr	r3, [pc, #264]	; (8002838 <SystemCoreClockSetup+0x1e4>)
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	4a41      	ldr	r2, [pc, #260]	; (8002838 <SystemCoreClockSetup+0x1e4>)
 8002734:	f043 0310 	orr.w	r3, r3, #16
 8002738:	6053      	str	r3, [r2, #4]

  /* Setup divider settings for main PLL */
  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 800273a:	4b3f      	ldr	r3, [pc, #252]	; (8002838 <SystemCoreClockSetup+0x1e4>)
 800273c:	4a41      	ldr	r2, [pc, #260]	; (8002844 <SystemCoreClockSetup+0x1f0>)
 800273e:	609a      	str	r2, [r3, #8]
                      (PLL_K2DIV_0 << SCU_PLL_PLLCON1_K2DIV_Pos) |
                      (PLL_PDIV << SCU_PLL_PLLCON1_PDIV_Pos));

  /* Set OSCDISCDIS */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_OSCDISCDIS_Msk;
 8002740:	4b3d      	ldr	r3, [pc, #244]	; (8002838 <SystemCoreClockSetup+0x1e4>)
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	4a3c      	ldr	r2, [pc, #240]	; (8002838 <SystemCoreClockSetup+0x1e4>)
 8002746:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800274a:	6053      	str	r3, [r2, #4]

  /* connect Oscillator to PLL */
  SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_FINDIS_Msk;
 800274c:	4b3a      	ldr	r3, [pc, #232]	; (8002838 <SystemCoreClockSetup+0x1e4>)
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	4a39      	ldr	r2, [pc, #228]	; (8002838 <SystemCoreClockSetup+0x1e4>)
 8002752:	f023 0310 	bic.w	r3, r3, #16
 8002756:	6053      	str	r3, [r2, #4]

  /* restart PLL Lock detection */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_RESLD_Msk;
 8002758:	4b37      	ldr	r3, [pc, #220]	; (8002838 <SystemCoreClockSetup+0x1e4>)
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	4a36      	ldr	r2, [pc, #216]	; (8002838 <SystemCoreClockSetup+0x1e4>)
 800275e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002762:	6053      	str	r3, [r2, #4]

  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 8002764:	bf00      	nop
 8002766:	4b34      	ldr	r3, [pc, #208]	; (8002838 <SystemCoreClockSetup+0x1e4>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f003 0304 	and.w	r3, r3, #4
 800276e:	2b00      	cmp	r3, #0
 8002770:	d0f9      	beq.n	8002766 <SystemCoreClockSetup+0x112>
  {
    /* wait for PLL Lock */
  }

  /* Disable bypass- put PLL clock back */
  SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_VCOBYP_Msk;
 8002772:	4b31      	ldr	r3, [pc, #196]	; (8002838 <SystemCoreClockSetup+0x1e4>)
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	4a30      	ldr	r2, [pc, #192]	; (8002838 <SystemCoreClockSetup+0x1e4>)
 8002778:	f023 0301 	bic.w	r3, r3, #1
 800277c:	6053      	str	r3, [r2, #4]
  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) != 0U)
 800277e:	bf00      	nop
 8002780:	4b2d      	ldr	r3, [pc, #180]	; (8002838 <SystemCoreClockSetup+0x1e4>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f003 0301 	and.w	r3, r3, #1
 8002788:	2b00      	cmp	r3, #0
 800278a:	d1f9      	bne.n	8002780 <SystemCoreClockSetup+0x12c>
  }
#endif /* ENABLE_PLL */

#if (SYS_CLOCK_SRC == SYS_CLOCK_SRC_PLL)
  /* Switch system clock to PLL */
  SCU_CLK->SYSCLKCR |= SCU_CLK_SYSCLKCR_SYSSEL_Msk;
 800278c:	4b2e      	ldr	r3, [pc, #184]	; (8002848 <SystemCoreClockSetup+0x1f4>)
 800278e:	68db      	ldr	r3, [r3, #12]
 8002790:	4a2d      	ldr	r2, [pc, #180]	; (8002848 <SystemCoreClockSetup+0x1f4>)
 8002792:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002796:	60d3      	str	r3, [r2, #12]
  /* Switch system clock to backup clock */
  SCU_CLK->SYSCLKCR &= ~SCU_CLK_SYSCLKCR_SYSSEL_Msk;
#endif

  /* Before scaling to final frequency we need to setup the clock dividers */
  SCU_CLK->PBCLKCR = PBCLKDIV;
 8002798:	4b2b      	ldr	r3, [pc, #172]	; (8002848 <SystemCoreClockSetup+0x1f4>)
 800279a:	2200      	movs	r2, #0
 800279c:	615a      	str	r2, [r3, #20]
  SCU_CLK->CPUCLKCR = CPUCLKDIV;
 800279e:	4b2a      	ldr	r3, [pc, #168]	; (8002848 <SystemCoreClockSetup+0x1f4>)
 80027a0:	2200      	movs	r2, #0
 80027a2:	611a      	str	r2, [r3, #16]
  SCU_CLK->CCUCLKCR = CCUCLKDIV;
 80027a4:	4b28      	ldr	r3, [pc, #160]	; (8002848 <SystemCoreClockSetup+0x1f4>)
 80027a6:	2200      	movs	r2, #0
 80027a8:	621a      	str	r2, [r3, #32]
  SCU_CLK->WDTCLKCR = WDTCLKDIV;
 80027aa:	4b27      	ldr	r3, [pc, #156]	; (8002848 <SystemCoreClockSetup+0x1f4>)
 80027ac:	2200      	movs	r2, #0
 80027ae:	625a      	str	r2, [r3, #36]	; 0x24
  SCU_CLK->EBUCLKCR = EBUCLKDIV;
 80027b0:	4b25      	ldr	r3, [pc, #148]	; (8002848 <SystemCoreClockSetup+0x1f4>)
 80027b2:	2200      	movs	r2, #0
 80027b4:	61da      	str	r2, [r3, #28]
  SCU_CLK->USBCLKCR = USBCLKDIV;
 80027b6:	4b24      	ldr	r3, [pc, #144]	; (8002848 <SystemCoreClockSetup+0x1f4>)
 80027b8:	2203      	movs	r2, #3
 80027ba:	619a      	str	r2, [r3, #24]

#if ENABLE_PLL
  /* PLL frequency stepping...*/
  /* Reset OSCDISCDIS */
  SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_OSCDISCDIS_Msk;
 80027bc:	4b1e      	ldr	r3, [pc, #120]	; (8002838 <SystemCoreClockSetup+0x1e4>)
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	4a1d      	ldr	r2, [pc, #116]	; (8002838 <SystemCoreClockSetup+0x1e4>)
 80027c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80027c6:	6053      	str	r3, [r2, #4]

  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 80027c8:	4b1b      	ldr	r3, [pc, #108]	; (8002838 <SystemCoreClockSetup+0x1e4>)
 80027ca:	4a20      	ldr	r2, [pc, #128]	; (800284c <SystemCoreClockSetup+0x1f8>)
 80027cc:	609a      	str	r2, [r3, #8]
	                    (PLL_K2DIV_1 << SCU_PLL_PLLCON1_K2DIV_Pos) |
	                    (PLL_PDIV << SCU_PLL_PLLCON1_PDIV_Pos));


  delay(DELAY_CNT_50US_60MHZ);
 80027ce:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80027d2:	f7ff fedb 	bl	800258c <delay>
  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 80027d6:	bf00      	nop
 80027d8:	4b17      	ldr	r3, [pc, #92]	; (8002838 <SystemCoreClockSetup+0x1e4>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f003 0304 	and.w	r3, r3, #4
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d0f9      	beq.n	80027d8 <SystemCoreClockSetup+0x184>
  {
    /* wait for PLL Lock */
  }

  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 80027e4:	4b14      	ldr	r3, [pc, #80]	; (8002838 <SystemCoreClockSetup+0x1e4>)
 80027e6:	4a1a      	ldr	r2, [pc, #104]	; (8002850 <SystemCoreClockSetup+0x1fc>)
 80027e8:	609a      	str	r2, [r3, #8]
	                    (PLL_K2DIV_2 << SCU_PLL_PLLCON1_K2DIV_Pos) |
	                    (PLL_PDIV << SCU_PLL_PLLCON1_PDIV_Pos));


  delay(DELAY_CNT_50US_90MHZ);
 80027ea:	f241 1094 	movw	r0, #4500	; 0x1194
 80027ee:	f7ff fecd 	bl	800258c <delay>
  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 80027f2:	bf00      	nop
 80027f4:	4b10      	ldr	r3, [pc, #64]	; (8002838 <SystemCoreClockSetup+0x1e4>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f003 0304 	and.w	r3, r3, #4
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d0f9      	beq.n	80027f4 <SystemCoreClockSetup+0x1a0>
  {
    /* wait for PLL Lock */
  }

  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 8002800:	4b0d      	ldr	r3, [pc, #52]	; (8002838 <SystemCoreClockSetup+0x1e4>)
 8002802:	4a14      	ldr	r2, [pc, #80]	; (8002854 <SystemCoreClockSetup+0x200>)
 8002804:	609a      	str	r2, [r3, #8]
	                    (PLL_K2DIV << SCU_PLL_PLLCON1_K2DIV_Pos) |
	                    (PLL_PDIV << SCU_PLL_PLLCON1_PDIV_Pos));


  delay(DELAY_CNT_50US_120MHZ);
 8002806:	f241 7070 	movw	r0, #6000	; 0x1770
 800280a:	f7ff febf 	bl	800258c <delay>
  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 800280e:	bf00      	nop
 8002810:	4b09      	ldr	r3, [pc, #36]	; (8002838 <SystemCoreClockSetup+0x1e4>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f003 0304 	and.w	r3, r3, #4
 8002818:	2b00      	cmp	r3, #0
 800281a:	d0f9      	beq.n	8002810 <SystemCoreClockSetup+0x1bc>
  {
    /* wait for PLL Lock */
  }

  SCU_TRAP->TRAPCLR = SCU_TRAP_TRAPCLR_SOSCWDGT_Msk | SCU_TRAP_TRAPCLR_SVCOLCKT_Msk;
 800281c:	4b0e      	ldr	r3, [pc, #56]	; (8002858 <SystemCoreClockSetup+0x204>)
 800281e:	2205      	movs	r2, #5
 8002820:	60da      	str	r2, [r3, #12]
    /* wait for PLL Lock */
  }
#endif /* (USBCLKDIV & SCU_CLK_USBCLKCR_USBSEL_Msk) */

  /* Enable selected clocks */
  SCU_CLK->CLKSET = ENABLE_SCUCLK;
 8002822:	4b09      	ldr	r3, [pc, #36]	; (8002848 <SystemCoreClockSetup+0x1f4>)
 8002824:	2200      	movs	r2, #0
 8002826:	605a      	str	r2, [r3, #4]
  PORT0->IOCR8 = (PORT0->IOCR8 & ~PORT0_IOCR8_PC8_Msk) | (0x11U << PORT0_IOCR8_PC8_Pos);
#endif

#endif  /* ENABLE_EXTCLK == 1  */

  SystemCoreClockUpdate();
 8002828:	f000 f818 	bl	800285c <SystemCoreClockUpdate>
}
 800282c:	bf00      	nop
 800282e:	bd80      	pop	{r7, pc}
 8002830:	50004200 	.word	0x50004200
 8002834:	50004400 	.word	0x50004400
 8002838:	50004710 	.word	0x50004710
 800283c:	50004700 	.word	0x50004700
 8002840:	6b5fca6b 	.word	0x6b5fca6b
 8002844:	01134f00 	.word	0x01134f00
 8002848:	50004600 	.word	0x50004600
 800284c:	01074f00 	.word	0x01074f00
 8002850:	01044f00 	.word	0x01044f00
 8002854:	01034f00 	.word	0x01034f00
 8002858:	50004160 	.word	0x50004160

0800285c <SystemCoreClockUpdate>:

__WEAK void SystemCoreClockUpdate(void)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b084      	sub	sp, #16
 8002860:	af00      	add	r7, sp, #0
  uint32_t pdiv;
  uint32_t ndiv;
  uint32_t kdiv;
  uint32_t temp;

  if (SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSSEL_Msk)
 8002862:	4b2f      	ldr	r3, [pc, #188]	; (8002920 <SystemCoreClockUpdate+0xc4>)
 8002864:	68db      	ldr	r3, [r3, #12]
 8002866:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800286a:	2b00      	cmp	r3, #0
 800286c:	d03e      	beq.n	80028ec <SystemCoreClockUpdate+0x90>
  {
    /* fPLL is clock source for fSYS */
    if(SCU_PLL->PLLCON2 & SCU_PLL_PLLCON2_PINSEL_Msk)
 800286e:	4b2d      	ldr	r3, [pc, #180]	; (8002924 <SystemCoreClockUpdate+0xc8>)
 8002870:	68db      	ldr	r3, [r3, #12]
 8002872:	f003 0301 	and.w	r3, r3, #1
 8002876:	2b00      	cmp	r3, #0
 8002878:	d002      	beq.n	8002880 <SystemCoreClockUpdate+0x24>
    {
      /* PLL input clock is the backup clock (fOFI) */
      temp = OFI_FREQUENCY;
 800287a:	4b2b      	ldr	r3, [pc, #172]	; (8002928 <SystemCoreClockUpdate+0xcc>)
 800287c:	60fb      	str	r3, [r7, #12]
 800287e:	e002      	b.n	8002886 <SystemCoreClockUpdate+0x2a>
    }
    else
    {
      /* PLL input clock is the high performance osicllator (fOSCHP) */
      temp = OSCHP_GetFrequency();
 8002880:	f000 f856 	bl	8002930 <OSCHP_GetFrequency>
 8002884:	60f8      	str	r0, [r7, #12]
    }

    /* check if PLL is locked */
    if (SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk)
 8002886:	4b27      	ldr	r3, [pc, #156]	; (8002924 <SystemCoreClockUpdate+0xc8>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f003 0304 	and.w	r3, r3, #4
 800288e:	2b00      	cmp	r3, #0
 8002890:	d020      	beq.n	80028d4 <SystemCoreClockUpdate+0x78>
    {
      /* PLL normal mode */
      /* read back divider settings */
      pdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_PDIV_Msk) >> SCU_PLL_PLLCON1_PDIV_Pos) + 1;
 8002892:	4b24      	ldr	r3, [pc, #144]	; (8002924 <SystemCoreClockUpdate+0xc8>)
 8002894:	689b      	ldr	r3, [r3, #8]
 8002896:	0e1b      	lsrs	r3, r3, #24
 8002898:	f003 030f 	and.w	r3, r3, #15
 800289c:	3301      	adds	r3, #1
 800289e:	607b      	str	r3, [r7, #4]
      ndiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_NDIV_Msk) >> SCU_PLL_PLLCON1_NDIV_Pos) + 1;
 80028a0:	4b20      	ldr	r3, [pc, #128]	; (8002924 <SystemCoreClockUpdate+0xc8>)
 80028a2:	689b      	ldr	r3, [r3, #8]
 80028a4:	0a1b      	lsrs	r3, r3, #8
 80028a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80028aa:	3301      	adds	r3, #1
 80028ac:	603b      	str	r3, [r7, #0]
      kdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K2DIV_Msk) >> SCU_PLL_PLLCON1_K2DIV_Pos) + 1;
 80028ae:	4b1d      	ldr	r3, [pc, #116]	; (8002924 <SystemCoreClockUpdate+0xc8>)
 80028b0:	689b      	ldr	r3, [r3, #8]
 80028b2:	0c1b      	lsrs	r3, r3, #16
 80028b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80028b8:	3301      	adds	r3, #1
 80028ba:	60bb      	str	r3, [r7, #8]

      temp = (temp / (pdiv * kdiv)) * ndiv;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	68ba      	ldr	r2, [r7, #8]
 80028c0:	fb02 f303 	mul.w	r3, r2, r3
 80028c4:	68fa      	ldr	r2, [r7, #12]
 80028c6:	fbb2 f2f3 	udiv	r2, r2, r3
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	fb02 f303 	mul.w	r3, r2, r3
 80028d0:	60fb      	str	r3, [r7, #12]
 80028d2:	e00d      	b.n	80028f0 <SystemCoreClockUpdate+0x94>
    }
    else
    {
      /* PLL prescalar mode */
      /* read back divider settings */
      kdiv  = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K1DIV_Msk) >> SCU_PLL_PLLCON1_K1DIV_Pos) + 1;
 80028d4:	4b13      	ldr	r3, [pc, #76]	; (8002924 <SystemCoreClockUpdate+0xc8>)
 80028d6:	689b      	ldr	r3, [r3, #8]
 80028d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80028dc:	3301      	adds	r3, #1
 80028de:	60bb      	str	r3, [r7, #8]
      
      temp = (temp / kdiv);
 80028e0:	68fa      	ldr	r2, [r7, #12]
 80028e2:	68bb      	ldr	r3, [r7, #8]
 80028e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80028e8:	60fb      	str	r3, [r7, #12]
 80028ea:	e001      	b.n	80028f0 <SystemCoreClockUpdate+0x94>
    }
  }
  else
  {
    /* fOFI is clock source for fSYS */    
    temp = OFI_FREQUENCY;
 80028ec:	4b0e      	ldr	r3, [pc, #56]	; (8002928 <SystemCoreClockUpdate+0xcc>)
 80028ee:	60fb      	str	r3, [r7, #12]
  }

  temp = temp / ((SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSDIV_Msk) + 1);
 80028f0:	4b0b      	ldr	r3, [pc, #44]	; (8002920 <SystemCoreClockUpdate+0xc4>)
 80028f2:	68db      	ldr	r3, [r3, #12]
 80028f4:	b2db      	uxtb	r3, r3
 80028f6:	3301      	adds	r3, #1
 80028f8:	68fa      	ldr	r2, [r7, #12]
 80028fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80028fe:	60fb      	str	r3, [r7, #12]
  temp = temp / ((SCU_CLK->CPUCLKCR & SCU_CLK_CPUCLKCR_CPUDIV_Msk) + 1);
 8002900:	4b07      	ldr	r3, [pc, #28]	; (8002920 <SystemCoreClockUpdate+0xc4>)
 8002902:	691b      	ldr	r3, [r3, #16]
 8002904:	f003 0301 	and.w	r3, r3, #1
 8002908:	3301      	adds	r3, #1
 800290a:	68fa      	ldr	r2, [r7, #12]
 800290c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002910:	60fb      	str	r3, [r7, #12]

  SystemCoreClock = temp;
 8002912:	4a06      	ldr	r2, [pc, #24]	; (800292c <SystemCoreClockUpdate+0xd0>)
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	6013      	str	r3, [r2, #0]
}
 8002918:	bf00      	nop
 800291a:	3710      	adds	r7, #16
 800291c:	46bd      	mov	sp, r7
 800291e:	bd80      	pop	{r7, pc}
 8002920:	50004600 	.word	0x50004600
 8002924:	50004710 	.word	0x50004710
 8002928:	016e3600 	.word	0x016e3600
 800292c:	2000ffc0 	.word	0x2000ffc0

08002930 <OSCHP_GetFrequency>:

__WEAK uint32_t OSCHP_GetFrequency(void)
{
 8002930:	b480      	push	{r7}
 8002932:	af00      	add	r7, sp, #0
  return OSCHP_FREQUENCY;
 8002934:	4b02      	ldr	r3, [pc, #8]	; (8002940 <OSCHP_GetFrequency+0x10>)
}
 8002936:	4618      	mov	r0, r3
 8002938:	46bd      	mov	sp, r7
 800293a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293e:	4770      	bx	lr
 8002940:	00b71b00 	.word	0x00b71b00

08002944 <_sbrk>:

// defined in linker script
extern caddr_t Heap_Bank1_Start;
extern caddr_t Heap_Bank1_End;
caddr_t _sbrk(int nbytes)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b084      	sub	sp, #16
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
  static caddr_t heap_ptr = NULL;
  caddr_t base;

  if (heap_ptr == NULL) {
 800294c:	4b14      	ldr	r3, [pc, #80]	; (80029a0 <_sbrk+0x5c>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d102      	bne.n	800295a <_sbrk+0x16>
    heap_ptr = (caddr_t)&Heap_Bank1_Start;
 8002954:	4b12      	ldr	r3, [pc, #72]	; (80029a0 <_sbrk+0x5c>)
 8002956:	4a13      	ldr	r2, [pc, #76]	; (80029a4 <_sbrk+0x60>)
 8002958:	601a      	str	r2, [r3, #0]
  }

  base = heap_ptr;
 800295a:	4b11      	ldr	r3, [pc, #68]	; (80029a0 <_sbrk+0x5c>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	60fb      	str	r3, [r7, #12]

  /* heap word alignment */
  nbytes = (nbytes + 3) & ~0x3U;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	3303      	adds	r3, #3
 8002964:	f023 0303 	bic.w	r3, r3, #3
 8002968:	607b      	str	r3, [r7, #4]
  if ((caddr_t)&Heap_Bank1_End > (heap_ptr + nbytes))
 800296a:	4b0d      	ldr	r3, [pc, #52]	; (80029a0 <_sbrk+0x5c>)
 800296c:	681a      	ldr	r2, [r3, #0]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	4413      	add	r3, r2
 8002972:	4a0d      	ldr	r2, [pc, #52]	; (80029a8 <_sbrk+0x64>)
 8002974:	4293      	cmp	r3, r2
 8002976:	d207      	bcs.n	8002988 <_sbrk+0x44>
  {
    heap_ptr += nbytes;
 8002978:	4b09      	ldr	r3, [pc, #36]	; (80029a0 <_sbrk+0x5c>)
 800297a:	681a      	ldr	r2, [r3, #0]
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	4413      	add	r3, r2
 8002980:	4a07      	ldr	r2, [pc, #28]	; (80029a0 <_sbrk+0x5c>)
 8002982:	6013      	str	r3, [r2, #0]
    return (base);
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	e006      	b.n	8002996 <_sbrk+0x52>
  }
  else
  {
    /* Heap overflow */
    errno = ENOMEM;
 8002988:	f000 f818 	bl	80029bc <__errno>
 800298c:	4603      	mov	r3, r0
 800298e:	220c      	movs	r2, #12
 8002990:	601a      	str	r2, [r3, #0]
    return ((caddr_t)-1);
 8002992:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  }
}
 8002996:	4618      	mov	r0, r3
 8002998:	3710      	adds	r7, #16
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}
 800299e:	bf00      	nop
 80029a0:	20000440 	.word	0x20000440
 80029a4:	200004c8 	.word	0x200004c8
 80029a8:	2000ffc0 	.word	0x2000ffc0

080029ac <_init>:

/* Init */
void _init(void)
{}
 80029ac:	b480      	push	{r7}
 80029ae:	af00      	add	r7, sp, #0
 80029b0:	bf00      	nop
 80029b2:	46bd      	mov	sp, r7
 80029b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b8:	4770      	bx	lr
	...

080029bc <__errno>:
 80029bc:	4b01      	ldr	r3, [pc, #4]	; (80029c4 <__errno+0x8>)
 80029be:	6818      	ldr	r0, [r3, #0]
 80029c0:	4770      	bx	lr
 80029c2:	bf00      	nop
 80029c4:	20000008 	.word	0x20000008

080029c8 <__libc_init_array>:
 80029c8:	b570      	push	{r4, r5, r6, lr}
 80029ca:	4e0d      	ldr	r6, [pc, #52]	; (8002a00 <__libc_init_array+0x38>)
 80029cc:	4d0d      	ldr	r5, [pc, #52]	; (8002a04 <__libc_init_array+0x3c>)
 80029ce:	1b76      	subs	r6, r6, r5
 80029d0:	10b6      	asrs	r6, r6, #2
 80029d2:	d006      	beq.n	80029e2 <__libc_init_array+0x1a>
 80029d4:	2400      	movs	r4, #0
 80029d6:	3401      	adds	r4, #1
 80029d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80029dc:	4798      	blx	r3
 80029de:	42a6      	cmp	r6, r4
 80029e0:	d1f9      	bne.n	80029d6 <__libc_init_array+0xe>
 80029e2:	4e09      	ldr	r6, [pc, #36]	; (8002a08 <__libc_init_array+0x40>)
 80029e4:	4d09      	ldr	r5, [pc, #36]	; (8002a0c <__libc_init_array+0x44>)
 80029e6:	1b76      	subs	r6, r6, r5
 80029e8:	f7ff ffe0 	bl	80029ac <_init>
 80029ec:	10b6      	asrs	r6, r6, #2
 80029ee:	d006      	beq.n	80029fe <__libc_init_array+0x36>
 80029f0:	2400      	movs	r4, #0
 80029f2:	3401      	adds	r4, #1
 80029f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80029f8:	4798      	blx	r3
 80029fa:	42a6      	cmp	r6, r4
 80029fc:	d1f9      	bne.n	80029f2 <__libc_init_array+0x2a>
 80029fe:	bd70      	pop	{r4, r5, r6, pc}
 8002a00:	20000438 	.word	0x20000438
 8002a04:	20000438 	.word	0x20000438
 8002a08:	20000438 	.word	0x20000438
 8002a0c:	20000438 	.word	0x20000438

08002a10 <memcpy>:
 8002a10:	4684      	mov	ip, r0
 8002a12:	ea41 0300 	orr.w	r3, r1, r0
 8002a16:	f013 0303 	ands.w	r3, r3, #3
 8002a1a:	d16d      	bne.n	8002af8 <memcpy+0xe8>
 8002a1c:	3a40      	subs	r2, #64	; 0x40
 8002a1e:	d341      	bcc.n	8002aa4 <memcpy+0x94>
 8002a20:	f851 3b04 	ldr.w	r3, [r1], #4
 8002a24:	f840 3b04 	str.w	r3, [r0], #4
 8002a28:	f851 3b04 	ldr.w	r3, [r1], #4
 8002a2c:	f840 3b04 	str.w	r3, [r0], #4
 8002a30:	f851 3b04 	ldr.w	r3, [r1], #4
 8002a34:	f840 3b04 	str.w	r3, [r0], #4
 8002a38:	f851 3b04 	ldr.w	r3, [r1], #4
 8002a3c:	f840 3b04 	str.w	r3, [r0], #4
 8002a40:	f851 3b04 	ldr.w	r3, [r1], #4
 8002a44:	f840 3b04 	str.w	r3, [r0], #4
 8002a48:	f851 3b04 	ldr.w	r3, [r1], #4
 8002a4c:	f840 3b04 	str.w	r3, [r0], #4
 8002a50:	f851 3b04 	ldr.w	r3, [r1], #4
 8002a54:	f840 3b04 	str.w	r3, [r0], #4
 8002a58:	f851 3b04 	ldr.w	r3, [r1], #4
 8002a5c:	f840 3b04 	str.w	r3, [r0], #4
 8002a60:	f851 3b04 	ldr.w	r3, [r1], #4
 8002a64:	f840 3b04 	str.w	r3, [r0], #4
 8002a68:	f851 3b04 	ldr.w	r3, [r1], #4
 8002a6c:	f840 3b04 	str.w	r3, [r0], #4
 8002a70:	f851 3b04 	ldr.w	r3, [r1], #4
 8002a74:	f840 3b04 	str.w	r3, [r0], #4
 8002a78:	f851 3b04 	ldr.w	r3, [r1], #4
 8002a7c:	f840 3b04 	str.w	r3, [r0], #4
 8002a80:	f851 3b04 	ldr.w	r3, [r1], #4
 8002a84:	f840 3b04 	str.w	r3, [r0], #4
 8002a88:	f851 3b04 	ldr.w	r3, [r1], #4
 8002a8c:	f840 3b04 	str.w	r3, [r0], #4
 8002a90:	f851 3b04 	ldr.w	r3, [r1], #4
 8002a94:	f840 3b04 	str.w	r3, [r0], #4
 8002a98:	f851 3b04 	ldr.w	r3, [r1], #4
 8002a9c:	f840 3b04 	str.w	r3, [r0], #4
 8002aa0:	3a40      	subs	r2, #64	; 0x40
 8002aa2:	d2bd      	bcs.n	8002a20 <memcpy+0x10>
 8002aa4:	3230      	adds	r2, #48	; 0x30
 8002aa6:	d311      	bcc.n	8002acc <memcpy+0xbc>
 8002aa8:	f851 3b04 	ldr.w	r3, [r1], #4
 8002aac:	f840 3b04 	str.w	r3, [r0], #4
 8002ab0:	f851 3b04 	ldr.w	r3, [r1], #4
 8002ab4:	f840 3b04 	str.w	r3, [r0], #4
 8002ab8:	f851 3b04 	ldr.w	r3, [r1], #4
 8002abc:	f840 3b04 	str.w	r3, [r0], #4
 8002ac0:	f851 3b04 	ldr.w	r3, [r1], #4
 8002ac4:	f840 3b04 	str.w	r3, [r0], #4
 8002ac8:	3a10      	subs	r2, #16
 8002aca:	d2ed      	bcs.n	8002aa8 <memcpy+0x98>
 8002acc:	320c      	adds	r2, #12
 8002ace:	d305      	bcc.n	8002adc <memcpy+0xcc>
 8002ad0:	f851 3b04 	ldr.w	r3, [r1], #4
 8002ad4:	f840 3b04 	str.w	r3, [r0], #4
 8002ad8:	3a04      	subs	r2, #4
 8002ada:	d2f9      	bcs.n	8002ad0 <memcpy+0xc0>
 8002adc:	3204      	adds	r2, #4
 8002ade:	d008      	beq.n	8002af2 <memcpy+0xe2>
 8002ae0:	07d2      	lsls	r2, r2, #31
 8002ae2:	bf1c      	itt	ne
 8002ae4:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8002ae8:	f800 3b01 	strbne.w	r3, [r0], #1
 8002aec:	d301      	bcc.n	8002af2 <memcpy+0xe2>
 8002aee:	880b      	ldrh	r3, [r1, #0]
 8002af0:	8003      	strh	r3, [r0, #0]
 8002af2:	4660      	mov	r0, ip
 8002af4:	4770      	bx	lr
 8002af6:	bf00      	nop
 8002af8:	2a08      	cmp	r2, #8
 8002afa:	d313      	bcc.n	8002b24 <memcpy+0x114>
 8002afc:	078b      	lsls	r3, r1, #30
 8002afe:	d08d      	beq.n	8002a1c <memcpy+0xc>
 8002b00:	f010 0303 	ands.w	r3, r0, #3
 8002b04:	d08a      	beq.n	8002a1c <memcpy+0xc>
 8002b06:	f1c3 0304 	rsb	r3, r3, #4
 8002b0a:	1ad2      	subs	r2, r2, r3
 8002b0c:	07db      	lsls	r3, r3, #31
 8002b0e:	bf1c      	itt	ne
 8002b10:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8002b14:	f800 3b01 	strbne.w	r3, [r0], #1
 8002b18:	d380      	bcc.n	8002a1c <memcpy+0xc>
 8002b1a:	f831 3b02 	ldrh.w	r3, [r1], #2
 8002b1e:	f820 3b02 	strh.w	r3, [r0], #2
 8002b22:	e77b      	b.n	8002a1c <memcpy+0xc>
 8002b24:	3a04      	subs	r2, #4
 8002b26:	d3d9      	bcc.n	8002adc <memcpy+0xcc>
 8002b28:	3a01      	subs	r2, #1
 8002b2a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002b2e:	f800 3b01 	strb.w	r3, [r0], #1
 8002b32:	d2f9      	bcs.n	8002b28 <memcpy+0x118>
 8002b34:	780b      	ldrb	r3, [r1, #0]
 8002b36:	7003      	strb	r3, [r0, #0]
 8002b38:	784b      	ldrb	r3, [r1, #1]
 8002b3a:	7043      	strb	r3, [r0, #1]
 8002b3c:	788b      	ldrb	r3, [r1, #2]
 8002b3e:	7083      	strb	r3, [r0, #2]
 8002b40:	4660      	mov	r0, ip
 8002b42:	4770      	bx	lr
 8002b44:	01000100 	.word	0x01000100
 8002b48:	00000000 	.word	0x00000000
 8002b4c:	01000000 	.word	0x01000000
 8002b50:	01000101 	.word	0x01000101
 8002b54:	01010100 	.word	0x01010100
 8002b58:	00000100 	.word	0x00000100
 8002b5c:	01000100 	.word	0x01000100
 8002b60:	00000101 	.word	0x00000101
 8002b64:	01010100 	.word	0x01010100
 8002b68:	00000100 	.word	0x00000100
 8002b6c:	00000000 	.word	0x00000000
 8002b70:	01010100 	.word	0x01010100
 8002b74:	01010100 	.word	0x01010100
 8002b78:	01000000 	.word	0x01000000
 8002b7c:	01000101 	.word	0x01000101
 8002b80:	01000101 	.word	0x01000101
 8002b84:	00000101 	.word	0x00000101
 8002b88:	01000100 	.word	0x01000100
 8002b8c:	01000101 	.word	0x01000101
 8002b90:	01000000 	.word	0x01000000
 8002b94:	01000100 	.word	0x01000100
 8002b98:	01000000 	.word	0x01000000
 8002b9c:	00000003 	.word	0x00000003
 8002ba0:	00000000 	.word	0x00000000

08002ba4 <_global_impure_ptr>:
 8002ba4:	20000010                                ... 
